
STM32_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085b8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080087b8  080087b8  000187b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088e0  080088e0  00028e30  2**0
                  CONTENTS
  4 .ARM          00000008  080088e0  080088e0  000188e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088e8  080088e8  00028e30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088e8  080088e8  000188e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088ec  080088ec  000188ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00008e30  20000000  080088f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ed20  20008e30  08011720  00028e30  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20017b50  08011720  00037b50  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00028e30  2**0
                  CONTENTS, READONLY
 12 .debug_info   000218f8  00000000  00000000  00028e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000044ce  00000000  00000000  0004a756  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001328  00000000  00000000  0004ec28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001130  00000000  00000000  0004ff50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029d62  00000000  00000000  00051080  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012246  00000000  00000000  0007ade2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001203b1  00000000  00000000  0008d028  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ad3d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005390  00000000  00000000  001ad454  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20008e30 	.word	0x20008e30
 800021c:	00000000 	.word	0x00000000
 8000220:	080087a0 	.word	0x080087a0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20008e34 	.word	0x20008e34
 800023c:	080087a0 	.word	0x080087a0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <arm_relu_q7>:
   * Optimized relu with QSUB instructions.
   *
   */

void arm_relu_q7(q7_t * data, uint16_t size)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b08f      	sub	sp, #60	; 0x3c
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	807b      	strh	r3, [r7, #2]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    uint16_t  i = size >> 2;
 80005ec:	887b      	ldrh	r3, [r7, #2]
 80005ee:	089b      	lsrs	r3, r3, #2
 80005f0:	86fb      	strh	r3, [r7, #54]	; 0x36
    q7_t     *pIn = data;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	613b      	str	r3, [r7, #16]
    q7_t     *pOut = data;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]
    q31_t     in;
    q31_t     buf;
    q31_t     mask;

    while (i)
 80005fa:	e032      	b.n	8000662 <arm_relu_q7+0x82>
    {
        in = *__SIMD32(pIn)++;
 80005fc:	f107 0210 	add.w	r2, r7, #16
 8000600:	6813      	ldr	r3, [r2, #0]
 8000602:	1d19      	adds	r1, r3, #4
 8000604:	6011      	str	r1, [r2, #0]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	633b      	str	r3, [r7, #48]	; 0x30

        /* extract the first bit */
        buf = __ROR(in & 0x80808080, 7);
 800060a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800060c:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 8000610:	61bb      	str	r3, [r7, #24]
 8000612:	2307      	movs	r3, #7
 8000614:	617b      	str	r3, [r7, #20]
  \param [in]    op2  Number of Bits to rotate
  \return               Rotated value
 */
__STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	f003 031f 	and.w	r3, r3, #31
 800061c:	617b      	str	r3, [r7, #20]
  if (op2 == 0U)
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d101      	bne.n	8000628 <arm_relu_q7+0x48>
  {
    return op1;
 8000624:	69bb      	ldr	r3, [r7, #24]
 8000626:	e003      	b.n	8000630 <arm_relu_q7+0x50>
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 8000628:	69ba      	ldr	r2, [r7, #24]
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	fa62 f303 	ror.w	r3, r2, r3
 8000630:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* if MSB=1, mask will be 0xFF, 0x0 otherwise */
        mask = __QSUB8(0x00000000, buf);
 8000632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000634:	2200      	movs	r2, #0
 8000636:	627a      	str	r2, [r7, #36]	; 0x24
 8000638:	623b      	str	r3, [r7, #32]

__STATIC_FORCEINLINE uint32_t __QSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800063a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063c:	6a3a      	ldr	r2, [r7, #32]
 800063e:	fac3 f312 	qsub8	r3, r3, r2
 8000642:	61fb      	str	r3, [r7, #28]
  return(result);
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	62bb      	str	r3, [r7, #40]	; 0x28

        *__SIMD32(pOut)++ = in & (~mask);
 8000648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800064a:	43d9      	mvns	r1, r3
 800064c:	f107 020c 	add.w	r2, r7, #12
 8000650:	6813      	ldr	r3, [r2, #0]
 8000652:	1d18      	adds	r0, r3, #4
 8000654:	6010      	str	r0, [r2, #0]
 8000656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000658:	400a      	ands	r2, r1
 800065a:	601a      	str	r2, [r3, #0]
        i--;
 800065c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800065e:	3b01      	subs	r3, #1
 8000660:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 8000662:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1c9      	bne.n	80005fc <arm_relu_q7+0x1c>
    }

    i = size & 0x3;
 8000668:	887b      	ldrh	r3, [r7, #2]
 800066a:	f003 0303 	and.w	r3, r3, #3
 800066e:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 8000670:	e00d      	b.n	800068e <arm_relu_q7+0xae>
    {
        if (*pIn < 0)
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	f993 3000 	ldrsb.w	r3, [r3]
 8000678:	2b00      	cmp	r3, #0
 800067a:	da02      	bge.n	8000682 <arm_relu_q7+0xa2>
        {
            *pIn = 0;
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
        }
        pIn++;
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	3301      	adds	r3, #1
 8000686:	613b      	str	r3, [r7, #16]
        i--;
 8000688:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800068a:	3b01      	subs	r3, #1
 800068c:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 800068e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000690:	2b00      	cmp	r3, #0
 8000692:	d1ee      	bne.n	8000672 <arm_relu_q7+0x92>
            data[i] = 0;
    }

#endif                          /* ARM_MATH_DSP */

}
 8000694:	bf00      	nop
 8000696:	373c      	adds	r7, #60	; 0x3c
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <arm_convolve_HWC_q7_RGB>:
                        const uint16_t stride,
                        const q7_t * bias,
                        const uint16_t bias_shift,
                        const uint16_t out_shift,
                        q7_t * Im_out, const uint16_t dim_im_out, q15_t * bufferA, q7_t * bufferB)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b0b6      	sub	sp, #216	; 0xd8
 80006a4:	af04      	add	r7, sp, #16
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	460b      	mov	r3, r1
 80006ac:	817b      	strh	r3, [r7, #10]
 80006ae:	4613      	mov	r3, r2
 80006b0:	813b      	strh	r3, [r7, #8]

    /*
     *  Here we use bufferA as q15_t internally as computation are done with q15_t level
     *  im2col are done to output in q15_t format from q7_t input
     */
    q15_t    *pBuffer = bufferA;
 80006b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    q7_t     *pOut = Im_out;
 80006b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80006bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

    // check if number of input channels is 3
    if (ch_im_in != 3)
 80006c0:	893b      	ldrh	r3, [r7, #8]
 80006c2:	2b03      	cmp	r3, #3
 80006c4:	d002      	beq.n	80006cc <arm_convolve_HWC_q7_RGB+0x2c>
    {
        return ARM_MATH_SIZE_MISMATCH;
 80006c6:	f06f 0302 	mvn.w	r3, #2
 80006ca:	e229      	b.n	8000b20 <arm_convolve_HWC_q7_RGB+0x480>
    }
    // This part implements the im2col function
    for (i_out_y = 0; i_out_y < dim_im_out; i_out_y++)
 80006cc:	2300      	movs	r3, #0
 80006ce:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 80006d2:	e112      	b.n	80008fa <arm_convolve_HWC_q7_RGB+0x25a>
    {
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 80006d4:	2300      	movs	r3, #0
 80006d6:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 80006da:	e100      	b.n	80008de <arm_convolve_HWC_q7_RGB+0x23e>
        {
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 80006dc:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80006e0:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 80006e4:	fb12 f303 	smulbb	r3, r2, r3
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 80006f6:	e0a4      	b.n	8000842 <arm_convolve_HWC_q7_RGB+0x1a2>
            {
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 80006f8:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80006fc:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 8000700:	fb12 f303 	smulbb	r3, r2, r3
 8000704:	b29a      	uxth	r2, r3
 8000706:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	b29b      	uxth	r3, r3
 800070e:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 8000712:	e07e      	b.n	8000812 <arm_convolve_HWC_q7_RGB+0x172>
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 8000714:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 8000718:	2b00      	cmp	r3, #0
 800071a:	db0d      	blt.n	8000738 <arm_convolve_HWC_q7_RGB+0x98>
 800071c:	f9b7 20c2 	ldrsh.w	r2, [r7, #194]	; 0xc2
 8000720:	897b      	ldrh	r3, [r7, #10]
 8000722:	429a      	cmp	r2, r3
 8000724:	da08      	bge.n	8000738 <arm_convolve_HWC_q7_RGB+0x98>
 8000726:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 800072a:	2b00      	cmp	r3, #0
 800072c:	db04      	blt.n	8000738 <arm_convolve_HWC_q7_RGB+0x98>
 800072e:	f9b7 20c0 	ldrsh.w	r2, [r7, #192]	; 0xc0
 8000732:	897b      	ldrh	r3, [r7, #10]
 8000734:	429a      	cmp	r2, r3
 8000736:	db0c      	blt.n	8000752 <arm_convolve_HWC_q7_RGB+0xb2>
                    {
                        /* Equivalent to arm_fill_q15(0, pBuffer, ch_im_in) with assumption: ch_im_in = 3 */
                        *__SIMD32(pBuffer) = 0x0;
 8000738:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
                        *(pBuffer + 2) = 0;
 8000742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000744:	3304      	adds	r3, #4
 8000746:	2200      	movs	r2, #0
 8000748:	801a      	strh	r2, [r3, #0]
                        pBuffer += 3;
 800074a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800074c:	3306      	adds	r3, #6
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000750:	e058      	b.n	8000804 <arm_convolve_HWC_q7_RGB+0x164>
                        /* 
                         * Equivalent to:
                         *  arm_q7_to_q15_no_shift( (q7_t*)Im_in+(i_ker_y*dim_im_in+i_ker_x)*3, pBuffer, 3);
                         */

                        const q7_t *pPixel = Im_in + (i_ker_y * dim_im_in + i_ker_x) * 3;
 8000752:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 8000756:	897a      	ldrh	r2, [r7, #10]
 8000758:	fb02 f203 	mul.w	r2, r2, r3
 800075c:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 8000760:	441a      	add	r2, r3
 8000762:	4613      	mov	r3, r2
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	4413      	add	r3, r2
 8000768:	461a      	mov	r2, r3
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	4413      	add	r3, r2
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
                        q31_t     buf = *__SIMD32(pPixel);
 8000770:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                        union arm_nnword top;
                        union arm_nnword bottom;

                        top.word = __SXTB16(buf);
 800077c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000780:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8000784:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000788:	fa2f f383 	sxtb16	r3, r3
 800078c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 800078e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
                        bottom.word = __SXTB16(__ROR(buf, 8));
 8000792:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000796:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800079a:	2308      	movs	r3, #8
 800079c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  op2 %= 32U;
 80007a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80007a4:	f003 031f 	and.w	r3, r3, #31
 80007a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (op2 == 0U)
 80007ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d102      	bne.n	80007ba <arm_convolve_HWC_q7_RGB+0x11a>
    return op1;
 80007b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80007b8:	e005      	b.n	80007c6 <arm_convolve_HWC_q7_RGB+0x126>
  return (op1 >> op2) | (op1 << (32U - op2));
 80007ba:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80007be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80007c2:	fa62 f303 	ror.w	r3, r2, r3
 80007c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80007ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80007ce:	fa2f f383 	sxtb16	r3, r3
 80007d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  return(result);
 80007d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80007da:	623b      	str	r3, [r7, #32]
                         * *__SIMD32(pBuffer) = top.word;
                         * *(pBuffer+2) = bottom.half_words[0];
                         *
                         *  version 2, no weight shuffling required
                         */
                        *pBuffer++ = top.half_words[0];
 80007dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007de:	1c9a      	adds	r2, r3, #2
 80007e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80007e2:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80007e6:	801a      	strh	r2, [r3, #0]
                        *__SIMD32(pBuffer) = __PKHBT(bottom.word, top.word, 0);
 80007e8:	6a3b      	ldr	r3, [r7, #32]
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ee:	4619      	mov	r1, r3
 80007f0:	4ba7      	ldr	r3, [pc, #668]	; (8000a90 <arm_convolve_HWC_q7_RGB+0x3f0>)
 80007f2:	400b      	ands	r3, r1
 80007f4:	431a      	orrs	r2, r3
 80007f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	601a      	str	r2, [r3, #0]
                         *  version 2, no weight shuffling required
                         */
                        *pBuffer++ = bottom.half_words[0];
                        *__SIMD32(pBuffer) = __PKHTB(top.word, bottom.word, 0);
#endif
                        pBuffer += 2;
 80007fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000800:	3304      	adds	r3, #4
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8000804:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 8000808:	b29b      	uxth	r3, r3
 800080a:	3301      	adds	r3, #1
 800080c:	b29b      	uxth	r3, r3
 800080e:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 8000812:	f9b7 20c0 	ldrsh.w	r2, [r7, #192]	; 0xc0
 8000816:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 800081a:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	; 0xdc
 800081e:	fb01 f103 	mul.w	r1, r1, r3
 8000822:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8000826:	1ac9      	subs	r1, r1, r3
 8000828:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800082c:	440b      	add	r3, r1
 800082e:	429a      	cmp	r2, r3
 8000830:	f6ff af70 	blt.w	8000714 <arm_convolve_HWC_q7_RGB+0x74>
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8000834:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 8000838:	b29b      	uxth	r3, r3
 800083a:	3301      	adds	r3, #1
 800083c:	b29b      	uxth	r3, r3
 800083e:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 8000842:	f9b7 20c2 	ldrsh.w	r2, [r7, #194]	; 0xc2
 8000846:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 800084a:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	; 0xdc
 800084e:	fb01 f103 	mul.w	r1, r1, r3
 8000852:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8000856:	1ac9      	subs	r1, r1, r3
 8000858:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800085c:	440b      	add	r3, r1
 800085e:	429a      	cmp	r2, r3
 8000860:	f6ff af4a 	blt.w	80006f8 <arm_convolve_HWC_q7_RGB+0x58>
                    }
                }
            }

            if (pBuffer == bufferA + 2 * 3 * dim_kernel * dim_kernel)
 8000864:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 8000868:	4613      	mov	r3, r2
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	4413      	add	r3, r2
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	461a      	mov	r2, r3
 8000872:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8000876:	fb03 f302 	mul.w	r3, r3, r2
 800087a:	461a      	mov	r2, r3
 800087c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000880:	441a      	add	r2, r3
 8000882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000884:	429a      	cmp	r2, r3
 8000886:	d123      	bne.n	80008d0 <arm_convolve_HWC_q7_RGB+0x230>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15(wt, bufferA,
 8000888:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 800088c:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8000890:	fb12 f303 	smulbb	r3, r2, r3
 8000894:	b29b      	uxth	r3, r3
 8000896:	461a      	mov	r2, r3
 8000898:	0052      	lsls	r2, r2, #1
 800089a:	4413      	add	r3, r2
 800089c:	b299      	uxth	r1, r3
                pOut =
 800089e:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 80008a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80008a6:	9303      	str	r3, [sp, #12]
 80008a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80008ac:	9302      	str	r3, [sp, #8]
 80008ae:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	460b      	mov	r3, r1
 80008bc:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f000 fe1f 	bl	8001504 <arm_nn_mat_mult_kernel_q7_q15>
 80008c6:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
                                                  ch_im_out,
                                                  3 * dim_kernel * dim_kernel, bias_shift, out_shift, bias, pOut);

                /* counter reset */
                pBuffer = bufferA;
 80008ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 80008d0:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	3301      	adds	r3, #1
 80008d8:	b29b      	uxth	r3, r3
 80008da:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 80008de:	f9b7 20c4 	ldrsh.w	r2, [r7, #196]	; 0xc4
 80008e2:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 80008e6:	429a      	cmp	r2, r3
 80008e8:	f6ff aef8 	blt.w	80006dc <arm_convolve_HWC_q7_RGB+0x3c>
    for (i_out_y = 0; i_out_y < dim_im_out; i_out_y++)
 80008ec:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	3301      	adds	r3, #1
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 80008fa:	f9b7 20c6 	ldrsh.w	r2, [r7, #198]	; 0xc6
 80008fe:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8000902:	429a      	cmp	r2, r3
 8000904:	f6ff aee6 	blt.w	80006d4 <arm_convolve_HWC_q7_RGB+0x34>
            }
        }
    }

    /* left-over because odd number of output pixels */
    if (pBuffer != bufferA)
 8000908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800090a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800090e:	429a      	cmp	r2, r3
 8000910:	f000 8105 	beq.w	8000b1e <arm_convolve_HWC_q7_RGB+0x47e>
    {
        const q7_t *pA = wt;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        int       i;

        for (i = 0; i < ch_im_out; i++)
 800091a:	2300      	movs	r3, #0
 800091c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000920:	e0f6      	b.n	8000b10 <arm_convolve_HWC_q7_RGB+0x470>
        {
            q31_t     sum = ((q31_t)bias[i] << bias_shift) + NN_ROUND(out_shift);
 8000922:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000926:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800092a:	4413      	add	r3, r2
 800092c:	f993 3000 	ldrsb.w	r3, [r3]
 8000930:	461a      	mov	r2, r3
 8000932:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8000936:	409a      	lsls	r2, r3
 8000938:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 800093c:	3b01      	subs	r3, #1
 800093e:	2101      	movs	r1, #1
 8000940:	fa01 f303 	lsl.w	r3, r1, r3
 8000944:	4413      	add	r3, r2
 8000946:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            q15_t    *pB = bufferA;
 800094a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800094e:	61fb      	str	r3, [r7, #28]
            /* basically each time it process 4 entries */
            uint16_t  colCnt = 3 * dim_kernel * dim_kernel >> 2;
 8000950:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 8000954:	4613      	mov	r3, r2
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	4413      	add	r3, r2
 800095a:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 800095e:	fb02 f303 	mul.w	r3, r2, r3
 8000962:	109b      	asrs	r3, r3, #2
 8000964:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

            while (colCnt)
 8000968:	e07c      	b.n	8000a64 <arm_convolve_HWC_q7_RGB+0x3c4>
 800096a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	f107 0318 	add.w	r3, r7, #24
 8000974:	65bb      	str	r3, [r7, #88]	; 0x58
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	657b      	str	r3, [r7, #84]	; 0x54
 * @brief read and expand one Q7 word into two Q15 words
 */

__STATIC_FORCEINLINE void *read_and_pad(void *source, q31_t * out1, q31_t * out2)
{
        q31_t     inA = *__SIMD32(source)++;
 800097c:	f107 0210 	add.w	r2, r7, #16
 8000980:	6813      	ldr	r3, [r2, #0]
 8000982:	1d19      	adds	r1, r3, #4
 8000984:	6011      	str	r1, [r2, #0]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	653b      	str	r3, [r7, #80]	; 0x50
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 800098a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800098c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800098e:	2308      	movs	r3, #8
 8000990:	64bb      	str	r3, [r7, #72]	; 0x48
  op2 %= 32U;
 8000992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000994:	f003 031f 	and.w	r3, r3, #31
 8000998:	64bb      	str	r3, [r7, #72]	; 0x48
  if (op2 == 0U)
 800099a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800099c:	2b00      	cmp	r3, #0
 800099e:	d101      	bne.n	80009a4 <arm_convolve_HWC_q7_RGB+0x304>
    return op1;
 80009a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009a2:	e003      	b.n	80009ac <arm_convolve_HWC_q7_RGB+0x30c>
  return (op1 >> op2) | (op1 << (32U - op2));
 80009a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80009a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009a8:	fa62 f303 	ror.w	r3, r2, r3
 80009ac:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80009ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009b0:	fa2f f383 	sxtb16	r3, r3
 80009b4:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80009b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        q31_t     inAbuf2 = __SXTB16(inA);
 80009ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009bc:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80009be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009c0:	fa2f f383 	sxtb16	r3, r3
 80009c4:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80009c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30

#ifndef ARM_MATH_BIG_ENDIAN
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 80009ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80009cc:	4b30      	ldr	r3, [pc, #192]	; (8000a90 <arm_convolve_HWC_q7_RGB+0x3f0>)
 80009ce:	4013      	ands	r3, r2
 80009d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009d2:	0c12      	lsrs	r2, r2, #16
 80009d4:	4313      	orrs	r3, r2
 80009d6:	461a      	mov	r2, r3
 80009d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009da:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 80009dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009de:	b29a      	uxth	r2, r3
 80009e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009e2:	041b      	lsls	r3, r3, #16
 80009e4:	4313      	orrs	r3, r2
 80009e6:	461a      	mov	r2, r3
 80009e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009ea:	601a      	str	r2, [r3, #0]
#else
        *out1 = __PKHTB(inAbuf1, inAbuf2, 16);
        *out2 = __PKHBT(inAbuf2, inAbuf1, 16);
#endif

        return source;
 80009ec:	693b      	ldr	r3, [r7, #16]
            {

                q31_t     inA1, inA2;
                q31_t     inB1, inB2;

                pA = (q7_t *) read_and_pad((void *)pA, &inA1, &inA2);
 80009ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

                inB1 = *__SIMD32(pB)++;
 80009f2:	f107 021c 	add.w	r2, r7, #28
 80009f6:	6813      	ldr	r3, [r2, #0]
 80009f8:	1d19      	adds	r1, r3, #4
 80009fa:	6011      	str	r1, [r2, #0]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                sum = __SMLAD(inA1, inB1, sum);
 8000a02:	69bb      	ldr	r3, [r7, #24]
 8000a04:	4619      	mov	r1, r3
 8000a06:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000a0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000a0e:	66b9      	str	r1, [r7, #104]	; 0x68
 8000a10:	667a      	str	r2, [r7, #100]	; 0x64
 8000a12:	663b      	str	r3, [r7, #96]	; 0x60

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000a14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000a18:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000a1a:	fb23 1302 	smlad	r3, r3, r2, r1
 8000a1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8000a20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                inB2 = *__SIMD32(pB)++;
 8000a26:	f107 021c 	add.w	r2, r7, #28
 8000a2a:	6813      	ldr	r3, [r2, #0]
 8000a2c:	1d19      	adds	r1, r3, #4
 8000a2e:	6011      	str	r1, [r2, #0]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                sum = __SMLAD(inA2, inB2, sum);
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000a3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000a42:	67b9      	str	r1, [r7, #120]	; 0x78
 8000a44:	677a      	str	r2, [r7, #116]	; 0x74
 8000a46:	673b      	str	r3, [r7, #112]	; 0x70
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000a48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a4a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000a4c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000a4e:	fb23 1302 	smlad	r3, r3, r2, r1
 8000a52:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8000a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                colCnt--;
 8000a5a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
            while (colCnt)
 8000a64:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	f47f af7e 	bne.w	800096a <arm_convolve_HWC_q7_RGB+0x2ca>
            }
            colCnt = 3 * dim_kernel * dim_kernel & 0x3;
 8000a6e:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 8000a72:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8000a76:	fb12 f303 	smulbb	r3, r2, r3
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	0052      	lsls	r2, r2, #1
 8000a80:	4413      	add	r3, r2
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	f003 0303 	and.w	r3, r3, #3
 8000a88:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
            while (colCnt)
 8000a8c:	e020      	b.n	8000ad0 <arm_convolve_HWC_q7_RGB+0x430>
 8000a8e:	bf00      	nop
 8000a90:	ffff0000 	.word	0xffff0000
            {
                q7_t      inA1 = *pA++;
 8000a94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000a98:	1c5a      	adds	r2, r3, #1
 8000a9a:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
                q15_t     inB1 = *pB++;
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	1c9a      	adds	r2, r3, #2
 8000aa8:	61fa      	str	r2, [r7, #28]
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
                sum += inA1 * inB1;
 8000ab0:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 8000ab4:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	; 0xa0
 8000ab8:	fb02 f303 	mul.w	r3, r2, r3
 8000abc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000ac0:	4413      	add	r3, r2
 8000ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                colCnt--;
 8000ac6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000aca:	3b01      	subs	r3, #1
 8000acc:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
            while (colCnt)
 8000ad0:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d1dd      	bne.n	8000a94 <arm_convolve_HWC_q7_RGB+0x3f4>
            }
            *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8000ad8:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8000adc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000ae0:	fa42 f303 	asr.w	r3, r2, r3
 8000ae4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000ae8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000aec:	f303 0307 	ssat	r3, #8, r3
 8000af0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000af4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8000af8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000afc:	1c5a      	adds	r2, r3, #1
 8000afe:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000b02:	b24a      	sxtb	r2, r1
 8000b04:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < ch_im_out; i++)
 8000b06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000b10:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8000b14:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	f6ff af02 	blt.w	8000922 <arm_convolve_HWC_q7_RGB+0x282>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return (ARM_MATH_SUCCESS);
 8000b1e:	2300      	movs	r3, #0
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	37c8      	adds	r7, #200	; 0xc8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <arm_convolve_HWC_q7_fast>:
                         const uint16_t out_shift,
                         q7_t * Im_out, 
                         const uint16_t dim_im_out, 
                         q15_t * bufferA, 
                         q7_t * bufferB)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b0aa      	sub	sp, #168	; 0xa8
 8000b2c:	af04      	add	r7, sp, #16
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	460b      	mov	r3, r1
 8000b34:	817b      	strh	r3, [r7, #10]
 8000b36:	4613      	mov	r3, r2
 8000b38:	813b      	strh	r3, [r7, #8]
    /*
     *  Here we use bufferA as q15_t internally as computation are done with q15_t level
     *  im2col are done to output in q15_t format from q7_t input
     */

    q15_t    *pBuffer = bufferA;
 8000b3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000b3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    q7_t     *pOut = Im_out;
 8000b42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000b46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    if (ch_im_in % 4 != 0 || ch_im_out % 2 != 0)
 8000b4a:	893b      	ldrh	r3, [r7, #8]
 8000b4c:	f003 0303 	and.w	r3, r3, #3
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d106      	bne.n	8000b64 <arm_convolve_HWC_q7_fast+0x3c>
 8000b56:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d003      	beq.n	8000b6c <arm_convolve_HWC_q7_fast+0x44>
    {
        /* check if the input dimension meets the constraints */
        return ARM_MATH_SIZE_MISMATCH;
 8000b64:	f06f 0302 	mvn.w	r3, #2
 8000b68:	f000 bcc8 	b.w	80014fc <arm_convolve_HWC_q7_fast+0x9d4>
     * Middle: i_out_y from padding to dim_im_out-padding-1
     * Bottom: i_out_y from dim_im_out-padding to dim_im_out-1
     */

    /* top part */
    for (i_out_y = 0; i_out_y < padding; i_out_y++)
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8000b72:	e0cf      	b.n	8000d14 <arm_convolve_HWC_q7_fast+0x1ec>
    {
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8000b7a:	e0bd      	b.n	8000cf8 <arm_convolve_HWC_q7_fast+0x1d0>
        {
            /* This part implements the im2col function */
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8000b7c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000b80:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8000b84:	fb12 f303 	smulbb	r3, r2, r3
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000b8e:	1ad3      	subs	r3, r2, r3
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8000b96:	e061      	b.n	8000c5c <arm_convolve_HWC_q7_fast+0x134>
            {
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8000b98:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8000b9c:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8000ba0:	fb12 f303 	smulbb	r3, r2, r3
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8000bb2:	e03c      	b.n	8000c2e <arm_convolve_HWC_q7_fast+0x106>
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 8000bb4:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	db0d      	blt.n	8000bd8 <arm_convolve_HWC_q7_fast+0xb0>
 8000bbc:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8000bc0:	897b      	ldrh	r3, [r7, #10]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	da08      	bge.n	8000bd8 <arm_convolve_HWC_q7_fast+0xb0>
 8000bc6:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	db04      	blt.n	8000bd8 <arm_convolve_HWC_q7_fast+0xb0>
 8000bce:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8000bd2:	897b      	ldrh	r3, [r7, #10]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	db08      	blt.n	8000bea <arm_convolve_HWC_q7_fast+0xc2>
                    {
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 8000bd8:	893b      	ldrh	r3, [r7, #8]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	461a      	mov	r2, r3
 8000bde:	2100      	movs	r1, #0
 8000be0:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000be4:	f006 fe8b 	bl	80078fe <memset>
 8000be8:	e013      	b.n	8000c12 <arm_convolve_HWC_q7_fast+0xea>
                    } else
                    {
                        arm_q7_to_q15_reordered_no_shift
                            ((q7_t *) Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, pBuffer, ch_im_in);
 8000bea:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000bee:	897a      	ldrh	r2, [r7, #10]
 8000bf0:	fb02 f203 	mul.w	r2, r2, r3
 8000bf4:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8000bf8:	4413      	add	r3, r2
 8000bfa:	893a      	ldrh	r2, [r7, #8]
 8000bfc:	fb02 f303 	mul.w	r3, r2, r3
 8000c00:	461a      	mov	r2, r3
                        arm_q7_to_q15_reordered_no_shift
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	4413      	add	r3, r2
 8000c06:	893a      	ldrh	r2, [r7, #8]
 8000c08:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f002 f9af 	bl	8002f70 <arm_q7_to_q15_reordered_no_shift>
                    }
                    pBuffer += ch_im_in;
 8000c12:	893b      	ldrh	r3, [r7, #8]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000c1a:	4413      	add	r3, r2
 8000c1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8000c20:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	3301      	adds	r3, #1
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8000c2e:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8000c32:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8000c36:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8000c3a:	fb01 f103 	mul.w	r1, r1, r3
 8000c3e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000c42:	1ac9      	subs	r1, r1, r3
 8000c44:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000c48:	440b      	add	r3, r1
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	dbb2      	blt.n	8000bb4 <arm_convolve_HWC_q7_fast+0x8c>
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8000c4e:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	3301      	adds	r3, #1
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8000c5c:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8000c60:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8000c64:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8000c68:	fb01 f103 	mul.w	r1, r1, r3
 8000c6c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000c70:	1ac9      	subs	r1, r1, r3
 8000c72:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000c76:	440b      	add	r3, r1
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	db8d      	blt.n	8000b98 <arm_convolve_HWC_q7_fast+0x70>
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000c7c:	893b      	ldrh	r3, [r7, #8]
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000c84:	fb02 f303 	mul.w	r3, r2, r3
 8000c88:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000c8c:	fb02 f303 	mul.w	r3, r2, r3
 8000c90:	461a      	mov	r2, r3
 8000c92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000c96:	4413      	add	r3, r2
 8000c98:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d124      	bne.n	8000cea <arm_convolve_HWC_q7_fast+0x1c2>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt,
 8000ca0:	893a      	ldrh	r2, [r7, #8]
 8000ca2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000ca6:	fb12 f303 	smulbb	r3, r2, r3
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000cb0:	fb12 f303 	smulbb	r3, r2, r3
 8000cb4:	b299      	uxth	r1, r3
                pOut =
 8000cb6:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8000cba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000cbe:	9303      	str	r3, [sp, #12]
 8000cc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000cc4:	9302      	str	r3, [sp, #8]
 8000cc6:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8000cca:	9301      	str	r3, [sp, #4]
 8000ccc:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f001 f985 	bl	8001fe8 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8000cde:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                                                            ch_im_out,
                                                            ch_im_in
                                                            *
                                                            dim_kernel * dim_kernel, bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 8000ce2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000ce6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8000cea:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8000cf8:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 8000cfc:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8000d00:	429a      	cmp	r2, r3
 8000d02:	f6ff af3b 	blt.w	8000b7c <arm_convolve_HWC_q7_fast+0x54>
    for (i_out_y = 0; i_out_y < padding; i_out_y++)
 8000d06:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8000d14:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	; 0x96
 8000d18:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	f6ff af29 	blt.w	8000b74 <arm_convolve_HWC_q7_fast+0x4c>
            }
        }
    }

    /* middle part, here we also divide the x into left, mid and right */
    for (; i_out_y < dim_im_out - padding; i_out_y++)
 8000d22:	e21b      	b.n	800115c <arm_convolve_HWC_q7_fast+0x634>
    {

        /* left part */
        for (i_out_x = 0; i_out_x < padding; i_out_x++)
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8000d2a:	e0b4      	b.n	8000e96 <arm_convolve_HWC_q7_fast+0x36e>
        {
            /* This part implements the im2col function */
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8000d2c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000d30:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8000d34:	fb12 f303 	smulbb	r3, r2, r3
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8000d46:	e058      	b.n	8000dfa <arm_convolve_HWC_q7_fast+0x2d2>
            {
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8000d48:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8000d4c:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8000d50:	fb12 f303 	smulbb	r3, r2, r3
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8000d62:	e033      	b.n	8000dcc <arm_convolve_HWC_q7_fast+0x2a4>
                {
                    if (i_ker_x < 0 || i_ker_x >= dim_im_in)
 8000d64:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	db04      	blt.n	8000d76 <arm_convolve_HWC_q7_fast+0x24e>
 8000d6c:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8000d70:	897b      	ldrh	r3, [r7, #10]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	db08      	blt.n	8000d88 <arm_convolve_HWC_q7_fast+0x260>
                    {
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 8000d76:	893b      	ldrh	r3, [r7, #8]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000d82:	f006 fdbc 	bl	80078fe <memset>
 8000d86:	e013      	b.n	8000db0 <arm_convolve_HWC_q7_fast+0x288>
                    } else
                    {
                        arm_q7_to_q15_reordered_no_shift
                            ((q7_t *) Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, pBuffer, ch_im_in);
 8000d88:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000d8c:	897a      	ldrh	r2, [r7, #10]
 8000d8e:	fb02 f203 	mul.w	r2, r2, r3
 8000d92:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8000d96:	4413      	add	r3, r2
 8000d98:	893a      	ldrh	r2, [r7, #8]
 8000d9a:	fb02 f303 	mul.w	r3, r2, r3
 8000d9e:	461a      	mov	r2, r3
                        arm_q7_to_q15_reordered_no_shift
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4413      	add	r3, r2
 8000da4:	893a      	ldrh	r2, [r7, #8]
 8000da6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000daa:	4618      	mov	r0, r3
 8000dac:	f002 f8e0 	bl	8002f70 <arm_q7_to_q15_reordered_no_shift>
                    }
                    pBuffer += ch_im_in;
 8000db0:	893b      	ldrh	r3, [r7, #8]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000db8:	4413      	add	r3, r2
 8000dba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8000dbe:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8000dcc:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8000dd0:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8000dd4:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8000dd8:	fb01 f103 	mul.w	r1, r1, r3
 8000ddc:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000de0:	1ac9      	subs	r1, r1, r3
 8000de2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000de6:	440b      	add	r3, r1
 8000de8:	429a      	cmp	r2, r3
 8000dea:	dbbb      	blt.n	8000d64 <arm_convolve_HWC_q7_fast+0x23c>
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8000dec:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	3301      	adds	r3, #1
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8000dfa:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8000dfe:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8000e02:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8000e06:	fb01 f103 	mul.w	r1, r1, r3
 8000e0a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000e0e:	1ac9      	subs	r1, r1, r3
 8000e10:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000e14:	440b      	add	r3, r1
 8000e16:	429a      	cmp	r2, r3
 8000e18:	db96      	blt.n	8000d48 <arm_convolve_HWC_q7_fast+0x220>
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000e1a:	893b      	ldrh	r3, [r7, #8]
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000e22:	fb02 f303 	mul.w	r3, r2, r3
 8000e26:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000e2a:	fb02 f303 	mul.w	r3, r2, r3
 8000e2e:	461a      	mov	r2, r3
 8000e30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000e34:	4413      	add	r3, r2
 8000e36:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d124      	bne.n	8000e88 <arm_convolve_HWC_q7_fast+0x360>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt,
 8000e3e:	893a      	ldrh	r2, [r7, #8]
 8000e40:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000e44:	fb12 f303 	smulbb	r3, r2, r3
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000e4e:	fb12 f303 	smulbb	r3, r2, r3
 8000e52:	b299      	uxth	r1, r3
                pOut =
 8000e54:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8000e58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000e5c:	9303      	str	r3, [sp, #12]
 8000e5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000e62:	9302      	str	r3, [sp, #8]
 8000e64:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8000e68:	9301      	str	r3, [sp, #4]
 8000e6a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	460b      	mov	r3, r1
 8000e72:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f001 f8b6 	bl	8001fe8 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8000e7c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                                                            ch_im_out,
                                                            ch_im_in
                                                            *
                                                            dim_kernel * dim_kernel, bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 8000e80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000e84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (i_out_x = 0; i_out_x < padding; i_out_x++)
 8000e88:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	3301      	adds	r3, #1
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8000e96:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 8000e9a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	f6ff af44 	blt.w	8000d2c <arm_convolve_HWC_q7_fast+0x204>
            }
        }

        /* mid part */
        for (; i_out_x < dim_im_out - padding; i_out_x++)
 8000ea4:	e08c      	b.n	8000fc0 <arm_convolve_HWC_q7_fast+0x498>
        {
            /* This part implements the im2col function */
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8000ea6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000eaa:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8000eae:	fb12 f303 	smulbb	r3, r2, r3
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8000ec0:	e030      	b.n	8000f24 <arm_convolve_HWC_q7_fast+0x3fc>
            {
                arm_q7_to_q15_reordered_no_shift((q7_t *) Im_in
                                                 +
                                                 (i_ker_y *
 8000ec2:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000ec6:	897a      	ldrh	r2, [r7, #10]
 8000ec8:	fb02 f203 	mul.w	r2, r2, r3
                                                  dim_im_in +
                                                  i_out_x *
 8000ecc:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8000ed0:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8000ed4:	fb01 f303 	mul.w	r3, r1, r3
                                                  dim_im_in +
 8000ed8:	441a      	add	r2, r3
                                                  stride - padding) * ch_im_in, pBuffer, ch_im_in * dim_kernel);
 8000eda:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	893a      	ldrh	r2, [r7, #8]
 8000ee2:	fb02 f303 	mul.w	r3, r2, r3
 8000ee6:	461a      	mov	r2, r3
                arm_q7_to_q15_reordered_no_shift((q7_t *) Im_in
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	1898      	adds	r0, r3, r2
                                                  stride - padding) * ch_im_in, pBuffer, ch_im_in * dim_kernel);
 8000eec:	893b      	ldrh	r3, [r7, #8]
 8000eee:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000ef2:	fb02 f303 	mul.w	r3, r2, r3
                arm_q7_to_q15_reordered_no_shift((q7_t *) Im_in
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000efc:	f002 f838 	bl	8002f70 <arm_q7_to_q15_reordered_no_shift>
                pBuffer += ch_im_in * dim_kernel;
 8000f00:	893b      	ldrh	r3, [r7, #8]
 8000f02:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000f06:	fb02 f303 	mul.w	r3, r2, r3
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000f10:	4413      	add	r3, r2
 8000f12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8000f16:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8000f24:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8000f28:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8000f2c:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8000f30:	fb01 f103 	mul.w	r1, r1, r3
 8000f34:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000f38:	1ac9      	subs	r1, r1, r3
 8000f3a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000f3e:	440b      	add	r3, r1
 8000f40:	429a      	cmp	r2, r3
 8000f42:	dbbe      	blt.n	8000ec2 <arm_convolve_HWC_q7_fast+0x39a>
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000f44:	893b      	ldrh	r3, [r7, #8]
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000f4c:	fb02 f303 	mul.w	r3, r2, r3
 8000f50:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000f54:	fb02 f303 	mul.w	r3, r2, r3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000f5e:	4413      	add	r3, r2
 8000f60:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d124      	bne.n	8000fb2 <arm_convolve_HWC_q7_fast+0x48a>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt,
 8000f68:	893a      	ldrh	r2, [r7, #8]
 8000f6a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000f6e:	fb12 f303 	smulbb	r3, r2, r3
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000f78:	fb12 f303 	smulbb	r3, r2, r3
 8000f7c:	b299      	uxth	r1, r3
                pOut =
 8000f7e:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8000f82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000f86:	9303      	str	r3, [sp, #12]
 8000f88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000f8c:	9302      	str	r3, [sp, #8]
 8000f8e:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f001 f821 	bl	8001fe8 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8000fa6:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                                                            ch_im_out,
                                                            ch_im_in
                                                            *
                                                            dim_kernel * dim_kernel, bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 8000faa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000fae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (; i_out_x < dim_im_out - padding; i_out_x++)
 8000fb2:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	3301      	adds	r3, #1
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8000fc0:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 8000fc4:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8000fc8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000fcc:	1acb      	subs	r3, r1, r3
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	f6ff af69 	blt.w	8000ea6 <arm_convolve_HWC_q7_fast+0x37e>
            }
        }

        /* right part */
        for (; i_out_x < dim_im_out; i_out_x++)
 8000fd4:	e0b4      	b.n	8001140 <arm_convolve_HWC_q7_fast+0x618>
        {
            /* This part implements the im2col function */
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8000fd6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000fda:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8000fde:	fb12 f303 	smulbb	r3, r2, r3
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8000ff0:	e058      	b.n	80010a4 <arm_convolve_HWC_q7_fast+0x57c>
            {
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8000ff2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8000ff6:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8000ffa:	fb12 f303 	smulbb	r3, r2, r3
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	b29b      	uxth	r3, r3
 8001008:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800100c:	e033      	b.n	8001076 <arm_convolve_HWC_q7_fast+0x54e>
                {
                    if (i_ker_x < 0 || i_ker_x >= dim_im_in)
 800100e:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8001012:	2b00      	cmp	r3, #0
 8001014:	db04      	blt.n	8001020 <arm_convolve_HWC_q7_fast+0x4f8>
 8001016:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 800101a:	897b      	ldrh	r3, [r7, #10]
 800101c:	429a      	cmp	r2, r3
 800101e:	db08      	blt.n	8001032 <arm_convolve_HWC_q7_fast+0x50a>
                    {
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 8001020:	893b      	ldrh	r3, [r7, #8]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	461a      	mov	r2, r3
 8001026:	2100      	movs	r1, #0
 8001028:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800102c:	f006 fc67 	bl	80078fe <memset>
 8001030:	e013      	b.n	800105a <arm_convolve_HWC_q7_fast+0x532>
                    } else
                    {
                        arm_q7_to_q15_reordered_no_shift
                            ((q7_t *) Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, pBuffer, ch_im_in);
 8001032:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8001036:	897a      	ldrh	r2, [r7, #10]
 8001038:	fb02 f203 	mul.w	r2, r2, r3
 800103c:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8001040:	4413      	add	r3, r2
 8001042:	893a      	ldrh	r2, [r7, #8]
 8001044:	fb02 f303 	mul.w	r3, r2, r3
 8001048:	461a      	mov	r2, r3
                        arm_q7_to_q15_reordered_no_shift
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4413      	add	r3, r2
 800104e:	893a      	ldrh	r2, [r7, #8]
 8001050:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001054:	4618      	mov	r0, r3
 8001056:	f001 ff8b 	bl	8002f70 <arm_q7_to_q15_reordered_no_shift>
                    }
                    pBuffer += ch_im_in;
 800105a:	893b      	ldrh	r3, [r7, #8]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001062:	4413      	add	r3, r2
 8001064:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8001068:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800106c:	b29b      	uxth	r3, r3
 800106e:	3301      	adds	r3, #1
 8001070:	b29b      	uxth	r3, r3
 8001072:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8001076:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 800107a:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 800107e:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8001082:	fb01 f103 	mul.w	r1, r1, r3
 8001086:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800108a:	1ac9      	subs	r1, r1, r3
 800108c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001090:	440b      	add	r3, r1
 8001092:	429a      	cmp	r2, r3
 8001094:	dbbb      	blt.n	800100e <arm_convolve_HWC_q7_fast+0x4e6>
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8001096:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 800109a:	b29b      	uxth	r3, r3
 800109c:	3301      	adds	r3, #1
 800109e:	b29b      	uxth	r3, r3
 80010a0:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80010a4:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 80010a8:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 80010ac:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 80010b0:	fb01 f103 	mul.w	r1, r1, r3
 80010b4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80010b8:	1ac9      	subs	r1, r1, r3
 80010ba:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80010be:	440b      	add	r3, r1
 80010c0:	429a      	cmp	r2, r3
 80010c2:	db96      	blt.n	8000ff2 <arm_convolve_HWC_q7_fast+0x4ca>
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 80010c4:	893b      	ldrh	r3, [r7, #8]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80010cc:	fb02 f303 	mul.w	r3, r2, r3
 80010d0:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80010d4:	fb02 f303 	mul.w	r3, r2, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80010de:	4413      	add	r3, r2
 80010e0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d124      	bne.n	8001132 <arm_convolve_HWC_q7_fast+0x60a>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt,
 80010e8:	893a      	ldrh	r2, [r7, #8]
 80010ea:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80010ee:	fb12 f303 	smulbb	r3, r2, r3
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80010f8:	fb12 f303 	smulbb	r3, r2, r3
 80010fc:	b299      	uxth	r1, r3
                pOut =
 80010fe:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8001102:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001106:	9303      	str	r3, [sp, #12]
 8001108:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800110c:	9302      	str	r3, [sp, #8]
 800110e:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	460b      	mov	r3, r1
 800111c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f000 ff61 	bl	8001fe8 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8001126:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                                                            ch_im_out,
                                                            ch_im_in
                                                            *
                                                            dim_kernel * dim_kernel, bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 800112a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800112e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (; i_out_x < dim_im_out; i_out_x++)
 8001132:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8001136:	b29b      	uxth	r3, r3
 8001138:	3301      	adds	r3, #1
 800113a:	b29b      	uxth	r3, r3
 800113c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8001140:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 8001144:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8001148:	429a      	cmp	r2, r3
 800114a:	f6ff af44 	blt.w	8000fd6 <arm_convolve_HWC_q7_fast+0x4ae>
    for (; i_out_y < dim_im_out - padding; i_out_y++)
 800114e:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8001152:	b29b      	uxth	r3, r3
 8001154:	3301      	adds	r3, #1
 8001156:	b29b      	uxth	r3, r3
 8001158:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800115c:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	; 0x96
 8001160:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8001164:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8001168:	1acb      	subs	r3, r1, r3
 800116a:	429a      	cmp	r2, r3
 800116c:	f6ff adda 	blt.w	8000d24 <arm_convolve_HWC_q7_fast+0x1fc>
            }
        }
    }

    for (; i_out_y < dim_im_out; i_out_y++)
 8001170:	e0cf      	b.n	8001312 <arm_convolve_HWC_q7_fast+0x7ea>
    {
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8001172:	2300      	movs	r3, #0
 8001174:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8001178:	e0bd      	b.n	80012f6 <arm_convolve_HWC_q7_fast+0x7ce>
        {
            /* This part implements the im2col function */
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 800117a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800117e:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8001182:	fb12 f303 	smulbb	r3, r2, r3
 8001186:	b29a      	uxth	r2, r3
 8001188:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	b29b      	uxth	r3, r3
 8001190:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8001194:	e061      	b.n	800125a <arm_convolve_HWC_q7_fast+0x732>
            {
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8001196:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800119a:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 800119e:	fb12 f303 	smulbb	r3, r2, r3
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80011b0:	e03c      	b.n	800122c <arm_convolve_HWC_q7_fast+0x704>
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 80011b2:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0d      	blt.n	80011d6 <arm_convolve_HWC_q7_fast+0x6ae>
 80011ba:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 80011be:	897b      	ldrh	r3, [r7, #10]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	da08      	bge.n	80011d6 <arm_convolve_HWC_q7_fast+0x6ae>
 80011c4:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db04      	blt.n	80011d6 <arm_convolve_HWC_q7_fast+0x6ae>
 80011cc:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 80011d0:	897b      	ldrh	r3, [r7, #10]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	db08      	blt.n	80011e8 <arm_convolve_HWC_q7_fast+0x6c0>
                    {
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 80011d6:	893b      	ldrh	r3, [r7, #8]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	461a      	mov	r2, r3
 80011dc:	2100      	movs	r1, #0
 80011de:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80011e2:	f006 fb8c 	bl	80078fe <memset>
 80011e6:	e013      	b.n	8001210 <arm_convolve_HWC_q7_fast+0x6e8>
                    } else
                    {
                        arm_q7_to_q15_reordered_no_shift
                            ((q7_t *) Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, pBuffer, ch_im_in);
 80011e8:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 80011ec:	897a      	ldrh	r2, [r7, #10]
 80011ee:	fb02 f203 	mul.w	r2, r2, r3
 80011f2:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 80011f6:	4413      	add	r3, r2
 80011f8:	893a      	ldrh	r2, [r7, #8]
 80011fa:	fb02 f303 	mul.w	r3, r2, r3
 80011fe:	461a      	mov	r2, r3
                        arm_q7_to_q15_reordered_no_shift
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4413      	add	r3, r2
 8001204:	893a      	ldrh	r2, [r7, #8]
 8001206:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800120a:	4618      	mov	r0, r3
 800120c:	f001 feb0 	bl	8002f70 <arm_q7_to_q15_reordered_no_shift>
                    }
                    pBuffer += ch_im_in;
 8001210:	893b      	ldrh	r3, [r7, #8]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001218:	4413      	add	r3, r2
 800121a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 800121e:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8001222:	b29b      	uxth	r3, r3
 8001224:	3301      	adds	r3, #1
 8001226:	b29b      	uxth	r3, r3
 8001228:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800122c:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8001230:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8001234:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8001238:	fb01 f103 	mul.w	r1, r1, r3
 800123c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8001240:	1ac9      	subs	r1, r1, r3
 8001242:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001246:	440b      	add	r3, r1
 8001248:	429a      	cmp	r2, r3
 800124a:	dbb2      	blt.n	80011b2 <arm_convolve_HWC_q7_fast+0x68a>
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 800124c:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8001250:	b29b      	uxth	r3, r3
 8001252:	3301      	adds	r3, #1
 8001254:	b29b      	uxth	r3, r3
 8001256:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 800125a:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 800125e:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8001262:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8001266:	fb01 f103 	mul.w	r1, r1, r3
 800126a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800126e:	1ac9      	subs	r1, r1, r3
 8001270:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001274:	440b      	add	r3, r1
 8001276:	429a      	cmp	r2, r3
 8001278:	db8d      	blt.n	8001196 <arm_convolve_HWC_q7_fast+0x66e>
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 800127a:	893b      	ldrh	r3, [r7, #8]
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8001282:	fb02 f303 	mul.w	r3, r2, r3
 8001286:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800128a:	fb02 f303 	mul.w	r3, r2, r3
 800128e:	461a      	mov	r2, r3
 8001290:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001294:	4413      	add	r3, r2
 8001296:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800129a:	429a      	cmp	r2, r3
 800129c:	d124      	bne.n	80012e8 <arm_convolve_HWC_q7_fast+0x7c0>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt,
 800129e:	893a      	ldrh	r2, [r7, #8]
 80012a0:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80012a4:	fb12 f303 	smulbb	r3, r2, r3
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80012ae:	fb12 f303 	smulbb	r3, r2, r3
 80012b2:	b299      	uxth	r1, r3
                pOut =
 80012b4:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 80012b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80012bc:	9303      	str	r3, [sp, #12]
 80012be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80012c2:	9302      	str	r3, [sp, #8]
 80012c4:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	460b      	mov	r3, r1
 80012d2:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 fe86 	bl	8001fe8 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 80012dc:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                                                            ch_im_out,
                                                            ch_im_in
                                                            *
                                                            dim_kernel * dim_kernel, bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 80012e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80012e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 80012e8:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	3301      	adds	r3, #1
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80012f6:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 80012fa:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 80012fe:	429a      	cmp	r2, r3
 8001300:	f6ff af3b 	blt.w	800117a <arm_convolve_HWC_q7_fast+0x652>
    for (; i_out_y < dim_im_out; i_out_y++)
 8001304:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8001308:	b29b      	uxth	r3, r3
 800130a:	3301      	adds	r3, #1
 800130c:	b29b      	uxth	r3, r3
 800130e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8001312:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	; 0x96
 8001316:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800131a:	429a      	cmp	r2, r3
 800131c:	f6ff af29 	blt.w	8001172 <arm_convolve_HWC_q7_fast+0x64a>
            }
        }
    }

    /* check if there is left-over for compute */
    if (pBuffer != bufferA)
 8001320:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001324:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001328:	429a      	cmp	r2, r3
 800132a:	f000 80e6 	beq.w	80014fa <arm_convolve_HWC_q7_fast+0x9d2>
    {
        const q7_t *pA = wt;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        int       i;

        for (i = 0; i < ch_im_out; i++)
 8001334:	2300      	movs	r3, #0
 8001336:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800133a:	e0d7      	b.n	80014ec <arm_convolve_HWC_q7_fast+0x9c4>
        {
            q31_t     sum = ((q31_t)bias[i] << bias_shift) + NN_ROUND(out_shift);
 800133c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001340:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001344:	4413      	add	r3, r2
 8001346:	f993 3000 	ldrsb.w	r3, [r3]
 800134a:	461a      	mov	r2, r3
 800134c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8001350:	409a      	lsls	r2, r3
 8001352:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8001356:	3b01      	subs	r3, #1
 8001358:	2101      	movs	r1, #1
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	4413      	add	r3, r2
 8001360:	67fb      	str	r3, [r7, #124]	; 0x7c
            q15_t    *pB = bufferA;
 8001362:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001366:	61fb      	str	r3, [r7, #28]
            /* each time it process 4 entries */
            uint16_t  colCnt = ch_im_in * dim_kernel * dim_kernel >> 2;
 8001368:	893b      	ldrh	r3, [r7, #8]
 800136a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800136e:	fb02 f303 	mul.w	r3, r2, r3
 8001372:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8001376:	fb02 f303 	mul.w	r3, r2, r3
 800137a:	109b      	asrs	r3, r3, #2
 800137c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

            while (colCnt)
 8001380:	e067      	b.n	8001452 <arm_convolve_HWC_q7_fast+0x92a>
 8001382:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	f107 0318 	add.w	r3, r7, #24
 800138c:	643b      	str	r3, [r7, #64]	; 0x40
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	63fb      	str	r3, [r7, #60]	; 0x3c
 * @brief read and expand one Q7 word into two Q15 words with reordering
 */

__STATIC_FORCEINLINE void *read_and_pad_reordered(void *source, q31_t * out1, q31_t * out2)
{
        q31_t     inA = *__SIMD32(source)++;
 8001394:	f107 0210 	add.w	r2, r7, #16
 8001398:	6813      	ldr	r3, [r2, #0]
 800139a:	1d19      	adds	r1, r3, #4
 800139c:	6011      	str	r1, [r2, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	63bb      	str	r3, [r7, #56]	; 0x38
#ifndef ARM_MATH_BIG_ENDIAN
        *out2 = __SXTB16(__ROR(inA, 8));
 80013a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013a4:	637b      	str	r3, [r7, #52]	; 0x34
 80013a6:	2308      	movs	r3, #8
 80013a8:	633b      	str	r3, [r7, #48]	; 0x30
  op2 %= 32U;
 80013aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ac:	f003 031f 	and.w	r3, r3, #31
 80013b0:	633b      	str	r3, [r7, #48]	; 0x30
  if (op2 == 0U)
 80013b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <arm_convolve_HWC_q7_fast+0x894>
    return op1;
 80013b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ba:	e003      	b.n	80013c4 <arm_convolve_HWC_q7_fast+0x89c>
  return (op1 >> op2) | (op1 << (32U - op2));
 80013bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c0:	fa62 f303 	ror.w	r3, r2, r3
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80013c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c8:	fa2f f383 	sxtb16	r3, r3
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80013ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d0:	461a      	mov	r2, r3
 80013d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013d4:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 80013d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	fa2f f383 	sxtb16	r3, r3
 80013e0:	623b      	str	r3, [r7, #32]
  return(result);
 80013e2:	6a3b      	ldr	r3, [r7, #32]
 80013e4:	461a      	mov	r2, r3
 80013e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013e8:	601a      	str	r2, [r3, #0]
#else
        *out1 = __SXTB16(__ROR(inA, 8));
        *out2 = __SXTB16(inA);
#endif

        return source;
 80013ea:	693b      	ldr	r3, [r7, #16]
            {

                q31_t     inA1, inA2;
                q31_t     inB1, inB2;

                pA = (q7_t *) read_and_pad_reordered((void *)pA, &inA1, &inA2);
 80013ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                inB1 = *__SIMD32(pB)++;
 80013f0:	f107 021c 	add.w	r2, r7, #28
 80013f4:	6813      	ldr	r3, [r2, #0]
 80013f6:	1d19      	adds	r1, r3, #4
 80013f8:	6011      	str	r1, [r2, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	66bb      	str	r3, [r7, #104]	; 0x68
                sum = __SMLAD(inA1, inB1, sum);
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	4619      	mov	r1, r3
 8001402:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001404:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001406:	6539      	str	r1, [r7, #80]	; 0x50
 8001408:	64fa      	str	r2, [r7, #76]	; 0x4c
 800140a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800140c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800140e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001410:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001412:	fb23 1302 	smlad	r3, r3, r2, r1
 8001416:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8001418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800141a:	67fb      	str	r3, [r7, #124]	; 0x7c
                inB2 = *__SIMD32(pB)++;
 800141c:	f107 021c 	add.w	r2, r7, #28
 8001420:	6813      	ldr	r3, [r2, #0]
 8001422:	1d19      	adds	r1, r3, #4
 8001424:	6011      	str	r1, [r2, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	667b      	str	r3, [r7, #100]	; 0x64
                sum = __SMLAD(inA2, inB2, sum);
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	4619      	mov	r1, r3
 800142e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001430:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001432:	6639      	str	r1, [r7, #96]	; 0x60
 8001434:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001436:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001438:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800143a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800143c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800143e:	fb23 1302 	smlad	r3, r3, r2, r1
 8001442:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8001444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001446:	67fb      	str	r3, [r7, #124]	; 0x7c

                colCnt--;
 8001448:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800144c:	3b01      	subs	r3, #1
 800144e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            while (colCnt)
 8001452:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8001456:	2b00      	cmp	r3, #0
 8001458:	d193      	bne.n	8001382 <arm_convolve_HWC_q7_fast+0x85a>
            }
            colCnt = ch_im_in * dim_kernel * dim_kernel & 0x3;
 800145a:	893a      	ldrh	r2, [r7, #8]
 800145c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001460:	fb12 f303 	smulbb	r3, r2, r3
 8001464:	b29b      	uxth	r3, r3
 8001466:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800146a:	fb12 f303 	smulbb	r3, r2, r3
 800146e:	b29b      	uxth	r3, r3
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            while (colCnt)
 8001478:	e01b      	b.n	80014b2 <arm_convolve_HWC_q7_fast+0x98a>
            {
                q7_t      inA1 = *pA++;
 800147a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                q15_t     inB1 = *pB++;
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	1c9a      	adds	r2, r3, #2
 800148e:	61fa      	str	r2, [r7, #28]
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
                sum += inA1 * inB1;
 8001496:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800149a:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800149e:	fb02 f303 	mul.w	r3, r2, r3
 80014a2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80014a4:	4413      	add	r3, r2
 80014a6:	67fb      	str	r3, [r7, #124]	; 0x7c
                colCnt--;
 80014a8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80014ac:	3b01      	subs	r3, #1
 80014ae:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            while (colCnt)
 80014b2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1df      	bne.n	800147a <arm_convolve_HWC_q7_fast+0x952>
            }
            *pOut = (q7_t) __SSAT((sum >> out_shift), 8);
 80014ba:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80014be:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80014c0:	fa42 f303 	asr.w	r3, r2, r3
 80014c4:	677b      	str	r3, [r7, #116]	; 0x74
 80014c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014c8:	f303 0307 	ssat	r3, #8, r3
 80014cc:	673b      	str	r3, [r7, #112]	; 0x70
 80014ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80014d0:	b25a      	sxtb	r2, r3
 80014d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014d6:	701a      	strb	r2, [r3, #0]
            pOut++;
 80014d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014dc:	3301      	adds	r3, #1
 80014de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (i = 0; i < ch_im_out; i++)
 80014e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80014e6:	3301      	adds	r3, #1
 80014e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80014ec:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 80014f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80014f4:	429a      	cmp	r2, r3
 80014f6:	f6ff af21 	blt.w	800133c <arm_convolve_HWC_q7_fast+0x814>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3798      	adds	r7, #152	; 0x98
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <arm_nn_mat_mult_kernel_q7_q15>:
                                        const uint16_t numCol_A,
                                        const uint16_t bias_shift,
                                        const uint16_t out_shift, 
                                        const q7_t * bias, 
                                        q7_t * pOut)
{
 8001504:	b490      	push	{r4, r7}
 8001506:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800150a:	af00      	add	r7, sp, #0
 800150c:	f107 040c 	add.w	r4, r7, #12
 8001510:	6020      	str	r0, [r4, #0]
 8001512:	f107 0008 	add.w	r0, r7, #8
 8001516:	6001      	str	r1, [r0, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	1dbb      	adds	r3, r7, #6
 800151c:	801a      	strh	r2, [r3, #0]
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	460a      	mov	r2, r1
 8001522:	801a      	strh	r2, [r3, #0]
#if defined (ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t     *pOut2 = pOut + ch_im_out;
 8001524:	1dbb      	adds	r3, r7, #6
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800152c:	4413      	add	r3, r2
 800152e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    const q7_t *pBias = bias;
 8001532:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001536:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

    uint16_t  rowCnt = ch_im_out >> 1;
 800153a:	1dbb      	adds	r3, r7, #6
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	085b      	lsrs	r3, r3, #1
 8001540:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
    /* this loop over rows in A */
    while (rowCnt)
 8001544:	e347      	b.n	8001bd6 <arm_nn_mat_mult_kernel_q7_q15+0x6d2>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 8001546:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800154a:	f107 0208 	add.w	r2, r7, #8
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 8001552:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	441a      	add	r2, r3
 8001560:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001564:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *pA2 = pA + numCol_A;
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	f107 020c 	add.w	r2, r7, #12
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	4413      	add	r3, r2
 8001572:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

        /* init the sum with bias */
        q31_t     sum =  ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 8001576:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800157a:	f993 3000 	ldrsb.w	r3, [r3]
 800157e:	461a      	mov	r2, r3
 8001580:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8001584:	409a      	lsls	r2, r3
 8001586:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 800158a:	3b01      	subs	r3, #1
 800158c:	2101      	movs	r1, #1
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	4413      	add	r3, r2
 8001594:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8001598:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 80015a2:	f993 3000 	ldrsb.w	r3, [r3]
 80015a6:	461a      	mov	r2, r3
 80015a8:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 80015ac:	409a      	lsls	r2, r3
 80015ae:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80015b2:	3b01      	subs	r3, #1
 80015b4:	2101      	movs	r1, #1
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	4413      	add	r3, r2
 80015bc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        q31_t     sum3 = ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 80015c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015c4:	f993 3000 	ldrsb.w	r3, [r3]
 80015c8:	461a      	mov	r2, r3
 80015ca:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 80015ce:	409a      	lsls	r2, r3
 80015d0:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80015d4:	3b01      	subs	r3, #1
 80015d6:	2101      	movs	r1, #1
 80015d8:	fa01 f303 	lsl.w	r3, r1, r3
 80015dc:	4413      	add	r3, r2
 80015de:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
        q31_t     sum4 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80015e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 80015ec:	f993 3000 	ldrsb.w	r3, [r3]
 80015f0:	461a      	mov	r2, r3
 80015f2:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 80015f6:	409a      	lsls	r2, r3
 80015f8:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80015fc:	3b01      	subs	r3, #1
 80015fe:	2101      	movs	r1, #1
 8001600:	fa01 f303 	lsl.w	r3, r1, r3
 8001604:	4413      	add	r3, r2
 8001606:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

        uint16_t  colCnt = numCol_A >> 2;
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	089b      	lsrs	r3, r3, #2
 8001610:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        /* accumulate over the vector */
        while (colCnt)
 8001614:	e20c      	b.n	8001a30 <arm_nn_mat_mult_kernel_q7_q15+0x52c>
        {
            q31_t     inA11, inA12, inA21, inA22;
            q31_t     inB1 = *__SIMD32(pB)++;
 8001616:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800161a:	6813      	ldr	r3, [r2, #0]
 800161c:	1d19      	adds	r1, r3, #4
 800161e:	6011      	str	r1, [r2, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
            q31_t     inB2 = *__SIMD32(pB2)++;
 8001626:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800162a:	6813      	ldr	r3, [r2, #0]
 800162c:	1d19      	adds	r1, r3, #4
 800162e:	6011      	str	r1, [r2, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001636:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800163a:	f107 020c 	add.w	r2, r7, #12
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001646:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001650:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001654:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 8001656:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800165a:	6813      	ldr	r3, [r2, #0]
 800165c:	1d19      	adds	r1, r3, #4
 800165e:	6011      	str	r1, [r2, #0]
 8001660:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6013      	str	r3, [r2, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 8001668:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001678:	2208      	movs	r2, #8
 800167a:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800167c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001680:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001684:	6812      	ldr	r2, [r2, #0]
 8001686:	f002 021f 	and.w	r2, r2, #31
 800168a:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800168c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d103      	bne.n	800169e <arm_nn_mat_mult_kernel_q7_q15+0x19a>
    return op1;
 8001696:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	e007      	b.n	80016ae <arm_nn_mat_mult_kernel_q7_q15+0x1aa>
  return (op1 >> op2) | (op1 << (32U - op2));
 800169e:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80016a2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	fa62 f303 	ror.w	r3, r2, r3
 80016ae:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80016b2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80016b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	fa2f f283 	sxtb16	r2, r3
 80016be:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80016c2:	601a      	str	r2, [r3, #0]
  return(result);
 80016c4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016ce:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 80016d0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80016da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80016dc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	fa2f f283 	sxtb16	r2, r3
 80016e6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016ea:	601a      	str	r2, [r3, #0]
  return(result);
 80016ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80016f6:	601a      	str	r2, [r3, #0]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 80016f8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	4bd2      	ldr	r3, [pc, #840]	; (8001a48 <arm_nn_mat_mult_kernel_q7_q15+0x544>)
 8001700:	4013      	ands	r3, r2
 8001702:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	0c12      	lsrs	r2, r2, #16
 800170a:	4313      	orrs	r3, r2
 800170c:	461a      	mov	r2, r3
 800170e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 8001716:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	b29a      	uxth	r2, r3
 800171e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	041b      	lsls	r3, r3, #16
 8001726:	4313      	orrs	r3, r2
 8001728:	461a      	mov	r2, r3
 800172a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	601a      	str	r2, [r3, #0]
        return source;
 8001732:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001736:	681a      	ldr	r2, [r3, #0]

            pA = (q7_t *) read_and_pad((void *)pA, &inA11, &inA12);
 8001738:	f107 030c 	add.w	r3, r7, #12
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001742:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800174c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001756:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800175a:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 800175c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001760:	6813      	ldr	r3, [r2, #0]
 8001762:	1d19      	adds	r1, r3, #4
 8001764:	6011      	str	r1, [r2, #0]
 8001766:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6013      	str	r3, [r2, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 800176e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800177e:	2208      	movs	r2, #8
 8001780:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8001782:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001786:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 800178a:	6812      	ldr	r2, [r2, #0]
 800178c:	f002 021f 	and.w	r2, r2, #31
 8001790:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8001792:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d103      	bne.n	80017a4 <arm_nn_mat_mult_kernel_q7_q15+0x2a0>
    return op1;
 800179c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	e007      	b.n	80017b4 <arm_nn_mat_mult_kernel_q7_q15+0x2b0>
  return (op1 >> op2) | (op1 << (32U - op2));
 80017a4:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80017a8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017ac:	6812      	ldr	r2, [r2, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	fa62 f303 	ror.w	r3, r2, r3
 80017b4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80017b8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80017ba:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	fa2f f283 	sxtb16	r2, r3
 80017c4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017c8:	601a      	str	r2, [r3, #0]
  return(result);
 80017ca:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80017d4:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 80017d6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80017e2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	fa2f f283 	sxtb16	r2, r3
 80017ec:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80017f0:	601a      	str	r2, [r3, #0]
  return(result);
 80017f2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017fc:	601a      	str	r2, [r3, #0]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 80017fe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b90      	ldr	r3, [pc, #576]	; (8001a48 <arm_nn_mat_mult_kernel_q7_q15+0x544>)
 8001806:	4013      	ands	r3, r2
 8001808:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 800180c:	6812      	ldr	r2, [r2, #0]
 800180e:	0c12      	lsrs	r2, r2, #16
 8001810:	4313      	orrs	r3, r2
 8001812:	461a      	mov	r2, r3
 8001814:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 800181c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	b29a      	uxth	r2, r3
 8001824:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	041b      	lsls	r3, r3, #16
 800182c:	4313      	orrs	r3, r2
 800182e:	461a      	mov	r2, r3
 8001830:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	601a      	str	r2, [r3, #0]
        return source;
 8001838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183c:	681b      	ldr	r3, [r3, #0]
            pA2 = (q7_t *) read_and_pad((void *)pA2, &inA21, &inA22);
 800183e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

            sum = __SMLAD(inA11, inB1, sum);
 8001842:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800184e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001852:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8001856:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800185a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800185e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001862:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001866:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800186a:	fb23 1202 	smlad	r2, r3, r2, r1
 800186e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001872:	601a      	str	r2, [r3, #0]
  return(result);
 8001874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            sum2 = __SMLAD(inA11, inB2, sum2);
 800187e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 800188a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800188e:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 8001892:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8001896:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800189a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800189e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80018a2:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80018a6:	fb23 1302 	smlad	r3, r3, r2, r1
 80018aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  return(result);
 80018ae:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80018b2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
            sum3 = __SMLAD(inA21, inB1, sum3);
 80018b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80018c2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80018c6:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80018ca:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 80018ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80018d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80018d6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80018da:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80018de:	fb23 1302 	smlad	r3, r3, r2, r1
 80018e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  return(result);
 80018e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018ea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            sum4 = __SMLAD(inA21, inB2, sum4);
 80018ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4619      	mov	r1, r3
 80018f6:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 80018fa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80018fe:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 8001902:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8001906:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800190a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800190e:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8001912:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001916:	fb23 1302 	smlad	r3, r3, r2, r1
 800191a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 800191e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001922:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

            inB1 = *__SIMD32(pB)++;
 8001926:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800192a:	6813      	ldr	r3, [r2, #0]
 800192c:	1d19      	adds	r1, r3, #4
 800192e:	6011      	str	r1, [r2, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
            inB2 = *__SIMD32(pB2)++;
 8001936:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800193a:	6813      	ldr	r3, [r2, #0]
 800193c:	1d19      	adds	r1, r3, #4
 800193e:	6011      	str	r1, [r2, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

            sum = __SMLAD(inA12, inB1, sum);
 8001946:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4619      	mov	r1, r3
 800194e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8001952:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001956:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 800195a:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800195e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001962:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001966:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800196a:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800196e:	fb23 1302 	smlad	r3, r3, r2, r1
 8001972:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  return(result);
 8001976:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800197a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            sum2 = __SMLAD(inA12, inB2, sum2);
 800197e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4619      	mov	r1, r3
 8001986:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 800198a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800198e:	f8c7 1164 	str.w	r1, [r7, #356]	; 0x164
 8001992:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 8001996:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800199a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800199e:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80019a2:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 80019a6:	fb23 1302 	smlad	r3, r3, r2, r1
 80019aa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  return(result);
 80019ae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80019b2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
            sum3 = __SMLAD(inA22, inB1, sum3);
 80019b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80019c2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80019c6:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
 80019ca:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 80019ce:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80019d2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80019d6:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 80019da:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80019de:	fb23 1302 	smlad	r3, r3, r2, r1
 80019e2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 80019e6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80019ea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            sum4 = __SMLAD(inA22, inB2, sum4);
 80019ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4619      	mov	r1, r3
 80019f6:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 80019fa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80019fe:	f8c7 1184 	str.w	r1, [r7, #388]	; 0x184
 8001a02:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 8001a06:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001a0a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001a0e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8001a12:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8001a16:	fb23 1302 	smlad	r3, r3, r2, r1
 8001a1a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  return(result);
 8001a1e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001a22:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

            colCnt--;
 8001a26:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        while (colCnt)
 8001a30:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f47f adee 	bne.w	8001616 <arm_nn_mat_mult_kernel_q7_q15+0x112>
        }                       /* while over colCnt */
        colCnt = numCol_A & 0x3;
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        while (colCnt)
 8001a46:	e058      	b.n	8001afa <arm_nn_mat_mult_kernel_q7_q15+0x5f6>
 8001a48:	ffff0000 	.word	0xffff0000
        {
            q7_t      inA1 = *pA++;
 8001a4c:	f107 030c 	add.w	r3, r7, #12
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f107 020c 	add.w	r2, r7, #12
 8001a56:	1c59      	adds	r1, r3, #1
 8001a58:	6011      	str	r1, [r2, #0]
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
            q15_t     inB1 = *pB++;
 8001a60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	1c99      	adds	r1, r3, #2
 8001a68:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001a6c:	6011      	str	r1, [r2, #0]
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	f8a7 3194 	strh.w	r3, [r7, #404]	; 0x194
            q7_t      inA2 = *pA2++;
 8001a74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	f8c7 21f8 	str.w	r2, [r7, #504]	; 0x1f8
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
            q15_t     inB2 = *pB2++;
 8001a84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	1c99      	adds	r1, r3, #2
 8001a8c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001a90:	6011      	str	r1, [r2, #0]
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190

            sum += inA1 * inB1;
 8001a98:	f997 3197 	ldrsb.w	r3, [r7, #407]	; 0x197
 8001a9c:	f9b7 2194 	ldrsh.w	r2, [r7, #404]	; 0x194
 8001aa0:	fb02 f303 	mul.w	r3, r2, r3
 8001aa4:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            sum2 += inA1 * inB2;
 8001aae:	f997 3197 	ldrsb.w	r3, [r7, #407]	; 0x197
 8001ab2:	f9b7 2190 	ldrsh.w	r2, [r7, #400]	; 0x190
 8001ab6:	fb02 f303 	mul.w	r3, r2, r3
 8001aba:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8001abe:	4413      	add	r3, r2
 8001ac0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
            sum3 += inA2 * inB1;
 8001ac4:	f997 3193 	ldrsb.w	r3, [r7, #403]	; 0x193
 8001ac8:	f9b7 2194 	ldrsh.w	r2, [r7, #404]	; 0x194
 8001acc:	fb02 f303 	mul.w	r3, r2, r3
 8001ad0:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8001ad4:	4413      	add	r3, r2
 8001ad6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            sum4 += inA2 * inB2;
 8001ada:	f997 3193 	ldrsb.w	r3, [r7, #403]	; 0x193
 8001ade:	f9b7 2190 	ldrsh.w	r2, [r7, #400]	; 0x190
 8001ae2:	fb02 f303 	mul.w	r3, r2, r3
 8001ae6:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8001aea:	4413      	add	r3, r2
 8001aec:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
            colCnt--;
 8001af0:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8001af4:	3b01      	subs	r3, #1
 8001af6:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        while (colCnt)
 8001afa:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1a4      	bne.n	8001a4c <arm_nn_mat_mult_kernel_q7_q15+0x548>
        }                       /* while over colCnt */
        *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8001b02:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8001b06:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8001b0a:	fa42 f303 	asr.w	r3, r2, r3
 8001b0e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8001b12:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001b16:	f303 0307 	ssat	r3, #8, r3
 8001b1a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8001b1e:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8001b22:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8001b2c:	b24a      	sxtb	r2, r1
 8001b2e:	701a      	strb	r2, [r3, #0]
        *pOut++ = (q7_t) __SSAT((sum3 >> out_shift), 8);
 8001b30:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8001b34:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8001b38:	fa42 f303 	asr.w	r3, r2, r3
 8001b3c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8001b40:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001b44:	f303 0307 	ssat	r3, #8, r3
 8001b48:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001b4c:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 8001b50:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8001b5a:	b24a      	sxtb	r2, r1
 8001b5c:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 8001b5e:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8001b62:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8001b66:	fa42 f303 	asr.w	r3, r2, r3
 8001b6a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001b6e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001b72:	f303 0307 	ssat	r3, #8, r3
 8001b76:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001b7a:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8001b7e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8001b88:	b24a      	sxtb	r2, r1
 8001b8a:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum4 >> out_shift), 8);
 8001b8c:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8001b90:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8001b94:	fa42 f303 	asr.w	r3, r2, r3
 8001b98:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001b9c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001ba0:	f303 0307 	ssat	r3, #8, r3
 8001ba4:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8001ba8:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 8001bac:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8001bb6:	b24a      	sxtb	r2, r1
 8001bb8:	701a      	strb	r2, [r3, #0]

        /* skip the row computed with A2 */
        pA += numCol_A;
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	881a      	ldrh	r2, [r3, #0]
 8001bbe:	f107 030c 	add.w	r3, r7, #12
 8001bc2:	f107 010c 	add.w	r1, r7, #12
 8001bc6:	6809      	ldr	r1, [r1, #0]
 8001bc8:	440a      	add	r2, r1
 8001bca:	601a      	str	r2, [r3, #0]
        rowCnt--;
 8001bcc:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
    while (rowCnt)
 8001bd6:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f47f acb3 	bne.w	8001546 <arm_nn_mat_mult_kernel_q7_q15+0x42>
    }                           /* for over ch_im_out */

    /* compute left-over row if any */
    if (ch_im_out & 0x1)
 8001be0:	1dbb      	adds	r3, r7, #6
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 81eb 	beq.w	8001fc4 <arm_nn_mat_mult_kernel_q7_q15+0xac0>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 8001bee:	f107 0320 	add.w	r3, r7, #32
 8001bf2:	f107 0208 	add.w	r2, r7, #8
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 8001bfa:	f107 0320 	add.w	r3, r7, #32
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	441a      	add	r2, r3
 8001c08:	f107 031c 	add.w	r3, r7, #28
 8001c0c:	601a      	str	r2, [r3, #0]

        /* load the bias */
        q31_t     sum = ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 8001c0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c12:	f993 3000 	ldrsb.w	r3, [r3]
 8001c16:	461a      	mov	r2, r3
 8001c18:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8001c22:	3b01      	subs	r3, #1
 8001c24:	2101      	movs	r1, #1
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	4413      	add	r3, r2
 8001c2c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8001c30:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c34:	1c5a      	adds	r2, r3, #1
 8001c36:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 8001c3a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8001c44:	409a      	lsls	r2, r3
 8001c46:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

        uint16_t  colCnt = numCol_A >> 2;
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 8001c62:	e138      	b.n	8001ed6 <arm_nn_mat_mult_kernel_q7_q15+0x9d2>
        {
            q31_t     inA11, inA12;
            q31_t     inB1 = *__SIMD32(pB)++;
 8001c64:	f107 0220 	add.w	r2, r7, #32
 8001c68:	6813      	ldr	r3, [r2, #0]
 8001c6a:	1d19      	adds	r1, r3, #4
 8001c6c:	6011      	str	r1, [r2, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            q31_t     inB2 = *__SIMD32(pB2)++;
 8001c74:	f107 021c 	add.w	r2, r7, #28
 8001c78:	6813      	ldr	r3, [r2, #0]
 8001c7a:	1d19      	adds	r1, r3, #4
 8001c7c:	6011      	str	r1, [r2, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8001c84:	f107 0310 	add.w	r3, r7, #16
 8001c88:	f107 020c 	add.w	r2, r7, #12
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c94:	f107 0218 	add.w	r2, r7, #24
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c9e:	f107 0214 	add.w	r2, r7, #20
 8001ca2:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 8001ca4:	f107 0210 	add.w	r2, r7, #16
 8001ca8:	6813      	ldr	r3, [r2, #0]
 8001caa:	1d19      	adds	r1, r3, #4
 8001cac:	6011      	str	r1, [r2, #0]
 8001cae:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6013      	str	r3, [r2, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 8001cb6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cc6:	2208      	movs	r2, #8
 8001cc8:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8001cca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cce:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	f002 021f 	and.w	r2, r2, #31
 8001cd8:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8001cda:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d103      	bne.n	8001cec <arm_nn_mat_mult_kernel_q7_q15+0x7e8>
    return op1;
 8001ce4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	e007      	b.n	8001cfc <arm_nn_mat_mult_kernel_q7_q15+0x7f8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8001cec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001cf0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cf4:	6812      	ldr	r2, [r2, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	fa62 f303 	ror.w	r3, r2, r3
 8001cfc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001d00:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001d02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	fa2f f283 	sxtb16	r2, r3
 8001d0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d10:	601a      	str	r2, [r3, #0]
  return(result);
 8001d12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d1c:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 8001d1e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001d2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	fa2f f283 	sxtb16	r2, r3
 8001d34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d38:	601a      	str	r2, [r3, #0]
  return(result);
 8001d3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d44:	601a      	str	r2, [r3, #0]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 8001d46:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4ba5      	ldr	r3, [pc, #660]	; (8001fe4 <arm_nn_mat_mult_kernel_q7_q15+0xae0>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	0c12      	lsrs	r2, r2, #16
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 8001d64:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	041b      	lsls	r3, r3, #16
 8001d74:	4313      	orrs	r3, r2
 8001d76:	461a      	mov	r2, r3
 8001d78:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	601a      	str	r2, [r3, #0]
        return source;
 8001d80:	f107 0310 	add.w	r3, r7, #16
 8001d84:	681a      	ldr	r2, [r3, #0]

            pA = (q7_t *) read_and_pad((void *)pA, &inA11, &inA12);
 8001d86:	f107 030c 	add.w	r3, r7, #12
 8001d8a:	601a      	str	r2, [r3, #0]

            sum = __SMLAD(inA11, inB1, sum);
 8001d8c:	f107 0318 	add.w	r3, r7, #24
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8001d98:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8001d9c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001da0:	6018      	str	r0, [r3, #0]
 8001da2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001da6:	6019      	str	r1, [r3, #0]
 8001da8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001dac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001dae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001dbe:	6809      	ldr	r1, [r1, #0]
 8001dc0:	fb23 1202 	smlad	r2, r3, r2, r1
 8001dc4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001dc8:	601a      	str	r2, [r3, #0]
  return(result);
 8001dca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            sum2 = __SMLAD(inA11, inB2, sum2);
 8001dd4:	f107 0318 	add.w	r3, r7, #24
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8001de0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001de4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001de8:	6018      	str	r0, [r3, #0]
 8001dea:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001dee:	6019      	str	r1, [r3, #0]
 8001df0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001df4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001df6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001e06:	6809      	ldr	r1, [r1, #0]
 8001e08:	fb23 1202 	smlad	r2, r3, r2, r1
 8001e0c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e10:	601a      	str	r2, [r3, #0]
  return(result);
 8001e12:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

            inB1 = *__SIMD32(pB)++;
 8001e1c:	f107 0220 	add.w	r2, r7, #32
 8001e20:	6813      	ldr	r3, [r2, #0]
 8001e22:	1d19      	adds	r1, r3, #4
 8001e24:	6011      	str	r1, [r2, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            inB2 = *__SIMD32(pB2)++;
 8001e2c:	f107 021c 	add.w	r2, r7, #28
 8001e30:	6813      	ldr	r3, [r2, #0]
 8001e32:	1d19      	adds	r1, r3, #4
 8001e34:	6011      	str	r1, [r2, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
            sum = __SMLAD(inA12, inB1, sum);
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8001e48:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8001e4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e50:	6018      	str	r0, [r3, #0]
 8001e52:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e56:	6019      	str	r1, [r3, #0]
 8001e58:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001e5e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001e68:	6812      	ldr	r2, [r2, #0]
 8001e6a:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8001e6e:	6809      	ldr	r1, [r1, #0]
 8001e70:	fb23 1202 	smlad	r2, r3, r2, r1
 8001e74:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e78:	601a      	str	r2, [r3, #0]
  return(result);
 8001e7a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            sum2 = __SMLAD(inA12, inB2, sum2);
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8001e90:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001e94:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e98:	6018      	str	r0, [r3, #0]
 8001e9a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001e9e:	6019      	str	r1, [r3, #0]
 8001ea0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ea4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001ea6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8001eb6:	6809      	ldr	r1, [r1, #0]
 8001eb8:	fb23 1202 	smlad	r2, r3, r2, r1
 8001ebc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ec0:	601a      	str	r2, [r3, #0]
  return(result);
 8001ec2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

            colCnt--;
 8001ecc:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 8001ed6:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f47f aec2 	bne.w	8001c64 <arm_nn_mat_mult_kernel_q7_q15+0x760>
        }
        colCnt = numCol_A & 0x3;
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 8001eec:	e038      	b.n	8001f60 <arm_nn_mat_mult_kernel_q7_q15+0xa5c>
        {
            q7_t      inA1 = *pA++;
 8001eee:	f107 030c 	add.w	r3, r7, #12
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f107 020c 	add.w	r2, r7, #12
 8001ef8:	1c59      	adds	r1, r3, #1
 8001efa:	6011      	str	r1, [r2, #0]
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
            q15_t     inB1 = *pB++;
 8001f02:	f107 0320 	add.w	r3, r7, #32
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	1c99      	adds	r1, r3, #2
 8001f0a:	f107 0220 	add.w	r2, r7, #32
 8001f0e:	6011      	str	r1, [r2, #0]
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	f8a7 31c4 	strh.w	r3, [r7, #452]	; 0x1c4
            q15_t     inB2 = *pB2++;
 8001f16:	f107 031c 	add.w	r3, r7, #28
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	1c99      	adds	r1, r3, #2
 8001f1e:	f107 021c 	add.w	r2, r7, #28
 8001f22:	6011      	str	r1, [r2, #0]
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	f8a7 31c2 	strh.w	r3, [r7, #450]	; 0x1c2

            sum += inA1 * inB1;
 8001f2a:	f997 31c7 	ldrsb.w	r3, [r7, #455]	; 0x1c7
 8001f2e:	f9b7 21c4 	ldrsh.w	r2, [r7, #452]	; 0x1c4
 8001f32:	fb02 f303 	mul.w	r3, r2, r3
 8001f36:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            sum2 += inA1 * inB2;
 8001f40:	f997 31c7 	ldrsb.w	r3, [r7, #455]	; 0x1c7
 8001f44:	f9b7 21c2 	ldrsh.w	r2, [r7, #450]	; 0x1c2
 8001f48:	fb02 f303 	mul.w	r3, r2, r3
 8001f4c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001f50:	4413      	add	r3, r2
 8001f52:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
            colCnt--;
 8001f56:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 8001f60:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1c2      	bne.n	8001eee <arm_nn_mat_mult_kernel_q7_q15+0x9ea>
        }

        *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8001f68:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8001f6c:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8001f70:	fa42 f303 	asr.w	r3, r2, r3
 8001f74:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8001f78:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001f7c:	f303 0307 	ssat	r3, #8, r3
 8001f80:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8001f84:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8001f88:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001f8c:	1c5a      	adds	r2, r3, #1
 8001f8e:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8001f92:	b24a      	sxtb	r2, r1
 8001f94:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 8001f96:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8001f9a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001f9e:	fa42 f303 	asr.w	r3, r2, r3
 8001fa2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8001fa6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001faa:	f303 0307 	ssat	r3, #8, r3
 8001fae:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001fb2:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 8001fb6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8001fc0:	b24a      	sxtb	r2, r1
 8001fc2:	701a      	strb	r2, [r3, #0]
    }

    pOut += ch_im_out;
 8001fc4:	1dbb      	adds	r3, r7, #6
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8001fcc:	4413      	add	r3, r2
 8001fce:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

    /* return the new output pointer with offset */
    return pOut;
 8001fd2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
#else
    /* To be completed */
    return NULL;
#endif                          /* ARM_MATH_DSP */

}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc90      	pop	{r4, r7}
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	ffff0000 	.word	0xffff0000

08001fe8 <arm_nn_mat_mult_kernel_q7_q15_reordered>:
                                                  const uint16_t numCol_A,
                                                  const uint16_t bias_shift,
                                                  const uint16_t out_shift, 
                                                  const q7_t * bias, 
                                                  q7_t * pOut)
{
 8001fe8:	b490      	push	{r4, r7}
 8001fea:	b0d2      	sub	sp, #328	; 0x148
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	f107 040c 	add.w	r4, r7, #12
 8001ff2:	6020      	str	r0, [r4, #0]
 8001ff4:	f107 0008 	add.w	r0, r7, #8
 8001ff8:	6001      	str	r1, [r0, #0]
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	1dbb      	adds	r3, r7, #6
 8001ffe:	801a      	strh	r2, [r3, #0]
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	460a      	mov	r2, r1
 8002004:	801a      	strh	r2, [r3, #0]

#if defined (ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t     *pOut2 = pOut + ch_im_out;
 8002006:	1dbb      	adds	r3, r7, #6
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800200e:	4413      	add	r3, r2
 8002010:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    int       i;

    /* this loop over rows in A */
    for (i = 0; i < ch_im_out; i += 2)
 8002014:	2300      	movs	r3, #0
 8002016:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800201a:	e2df      	b.n	80025dc <arm_nn_mat_mult_kernel_q7_q15_reordered+0x5f4>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 800201c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002020:	f107 0208 	add.w	r2, r7, #8
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 8002028:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	1d3b      	adds	r3, r7, #4
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	441a      	add	r2, r3
 8002036:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800203a:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *pA2 = pA + numCol_A;
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	f107 020c 	add.w	r2, r7, #12
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	4413      	add	r3, r2
 8002048:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

        /* init the sum with bias */
        q31_t     sum =  ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
 800204c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002050:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002054:	4413      	add	r3, r2
 8002056:	f993 3000 	ldrsb.w	r3, [r3]
 800205a:	461a      	mov	r2, r3
 800205c:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 8002060:	409a      	lsls	r2, r3
 8002062:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8002066:	3b01      	subs	r3, #1
 8002068:	2101      	movs	r1, #1
 800206a:	fa01 f303 	lsl.w	r3, r1, r3
 800206e:	4413      	add	r3, r2
 8002070:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        q31_t     sum2 = ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
 8002074:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002078:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800207c:	4413      	add	r3, r2
 800207e:	f993 3000 	ldrsb.w	r3, [r3]
 8002082:	461a      	mov	r2, r3
 8002084:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 8002088:	409a      	lsls	r2, r3
 800208a:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 800208e:	3b01      	subs	r3, #1
 8002090:	2101      	movs	r1, #1
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        q31_t     sum3 = ((q31_t)(bias[i + 1]) << bias_shift) + NN_ROUND(out_shift);
 800209c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80020a0:	3301      	adds	r3, #1
 80020a2:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80020a6:	4413      	add	r3, r2
 80020a8:	f993 3000 	ldrsb.w	r3, [r3]
 80020ac:	461a      	mov	r2, r3
 80020ae:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 80020b2:	409a      	lsls	r2, r3
 80020b4:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 80020b8:	3b01      	subs	r3, #1
 80020ba:	2101      	movs	r1, #1
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        q31_t     sum4 = ((q31_t)(bias[i + 1]) << bias_shift) + NN_ROUND(out_shift);
 80020c6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80020ca:	3301      	adds	r3, #1
 80020cc:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80020d0:	4413      	add	r3, r2
 80020d2:	f993 3000 	ldrsb.w	r3, [r3]
 80020d6:	461a      	mov	r2, r3
 80020d8:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 80020dc:	409a      	lsls	r2, r3
 80020de:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 80020e2:	3b01      	subs	r3, #1
 80020e4:	2101      	movs	r1, #1
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	4413      	add	r3, r2
 80020ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

        uint16_t  colCnt = numCol_A >> 2;
 80020f0:	1d3b      	adds	r3, r7, #4
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	089b      	lsrs	r3, r3, #2
 80020f6:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        /* accumulate over the vector */
        while (colCnt)
 80020fa:	e19e      	b.n	800243a <arm_nn_mat_mult_kernel_q7_q15_reordered+0x452>
        {
            q31_t     inA11, inA12, inA21, inA22;
            q31_t     inB1 = *__SIMD32(pB)++;
 80020fc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002100:	6813      	ldr	r3, [r2, #0]
 8002102:	1d19      	adds	r1, r3, #4
 8002104:	6011      	str	r1, [r2, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
            q31_t     inB2 = *__SIMD32(pB2)++;
 800210c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002110:	6813      	ldr	r3, [r2, #0]
 8002112:	1d19      	adds	r1, r3, #4
 8002114:	6011      	str	r1, [r2, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	f107 020c 	add.w	r2, r7, #12
 8002124:	6812      	ldr	r2, [r2, #0]
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212c:	653b      	str	r3, [r7, #80]	; 0x50
 800212e:	f107 0320 	add.w	r3, r7, #32
 8002132:	64fb      	str	r3, [r7, #76]	; 0x4c
        q31_t     inA = *__SIMD32(source)++;
 8002134:	f107 0214 	add.w	r2, r7, #20
 8002138:	6813      	ldr	r3, [r2, #0]
 800213a:	1d19      	adds	r1, r3, #4
 800213c:	6011      	str	r1, [r2, #0]
 800213e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6013      	str	r3, [r2, #0]
        *out2 = __SXTB16(__ROR(inA, 8));
 8002146:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002156:	2208      	movs	r2, #8
 8002158:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800215a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800215e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	f002 021f 	and.w	r2, r2, #31
 8002168:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800216a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d103      	bne.n	800217c <arm_nn_mat_mult_kernel_q7_q15_reordered+0x194>
    return op1;
 8002174:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	e007      	b.n	800218c <arm_nn_mat_mult_kernel_q7_q15_reordered+0x1a4>
  return (op1 >> op2) | (op1 << (32U - op2));
 800217c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002180:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	fa62 f303 	ror.w	r3, r2, r3
 800218c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002190:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002192:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	fa2f f283 	sxtb16	r2, r3
 800219c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021a0:	601a      	str	r2, [r3, #0]
  return(result);
 80021a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021ac:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 80021ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80021ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	fa2f f283 	sxtb16	r2, r3
 80021c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021c8:	601a      	str	r2, [r3, #0]
  return(result);
 80021ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021d4:	601a      	str	r2, [r3, #0]
        return source;
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	681a      	ldr	r2, [r3, #0]

            pA = (q7_t *) read_and_pad_reordered((void *)pA, &inA11, &inA12);
 80021dc:	f107 030c 	add.w	r3, r7, #12
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	f107 0310 	add.w	r3, r7, #16
 80021e6:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	f107 031c 	add.w	r3, r7, #28
 80021f0:	677b      	str	r3, [r7, #116]	; 0x74
 80021f2:	f107 0318 	add.w	r3, r7, #24
 80021f6:	673b      	str	r3, [r7, #112]	; 0x70
        q31_t     inA = *__SIMD32(source)++;
 80021f8:	f107 0210 	add.w	r2, r7, #16
 80021fc:	6813      	ldr	r3, [r2, #0]
 80021fe:	1d19      	adds	r1, r3, #4
 8002200:	6011      	str	r1, [r2, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	66fb      	str	r3, [r7, #108]	; 0x6c
        *out2 = __SXTB16(__ROR(inA, 8));
 8002206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002208:	66bb      	str	r3, [r7, #104]	; 0x68
 800220a:	2308      	movs	r3, #8
 800220c:	667b      	str	r3, [r7, #100]	; 0x64
  op2 %= 32U;
 800220e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	667b      	str	r3, [r7, #100]	; 0x64
  if (op2 == 0U)
 8002216:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x238>
    return op1;
 800221c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800221e:	e003      	b.n	8002228 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x240>
  return (op1 >> op2) | (op1 << (32U - op2));
 8002220:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002222:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002224:	fa62 f303 	ror.w	r3, r2, r3
 8002228:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800222a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800222c:	fa2f f383 	sxtb16	r3, r3
 8002230:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8002232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002234:	461a      	mov	r2, r3
 8002236:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002238:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 800223a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800223c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800223e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002240:	fa2f f383 	sxtb16	r3, r3
 8002244:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002248:	461a      	mov	r2, r3
 800224a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800224c:	601a      	str	r2, [r3, #0]
        return source;
 800224e:	f107 0310 	add.w	r3, r7, #16
 8002252:	681b      	ldr	r3, [r3, #0]
            pA2 = (q7_t *) read_and_pad_reordered((void *)pA2, &inA21, &inA22);
 8002254:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

            sum = __SMLAD(inA11, inB1, sum);
 8002258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4619      	mov	r1, r3
 8002260:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8002264:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002268:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800226c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002270:	67fb      	str	r3, [r7, #124]	; 0x7c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002272:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002276:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800227a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800227c:	fb23 1302 	smlad	r3, r3, r2, r1
 8002280:	67bb      	str	r3, [r7, #120]	; 0x78
  return(result);
 8002282:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002284:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            sum2 = __SMLAD(inA11, inB2, sum2);
 8002288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4619      	mov	r1, r3
 8002290:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8002294:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002298:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800229c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80022a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80022a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022a8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80022ac:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80022b0:	fb23 1302 	smlad	r3, r3, r2, r1
 80022b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return(result);
 80022b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022bc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sum3 = __SMLAD(inA21, inB1, sum3);
 80022c0:	f107 031c 	add.w	r3, r7, #28
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4619      	mov	r1, r3
 80022c8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80022cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80022d0:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 80022d4:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80022d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80022dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022e0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80022e4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80022e8:	fb23 1302 	smlad	r3, r3, r2, r1
 80022ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  return(result);
 80022f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sum4 = __SMLAD(inA21, inB2, sum4);
 80022f8:	f107 031c 	add.w	r3, r7, #28
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4619      	mov	r1, r3
 8002300:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8002304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002308:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 800230c:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8002310:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002314:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002318:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800231c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8002320:	fb23 1302 	smlad	r3, r3, r2, r1
 8002324:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return(result);
 8002328:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800232c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

            inB1 = *__SIMD32(pB)++;
 8002330:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002334:	6813      	ldr	r3, [r2, #0]
 8002336:	1d19      	adds	r1, r3, #4
 8002338:	6011      	str	r1, [r2, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
            inB2 = *__SIMD32(pB2)++;
 8002340:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002344:	6813      	ldr	r3, [r2, #0]
 8002346:	1d19      	adds	r1, r3, #4
 8002348:	6011      	str	r1, [r2, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

            sum = __SMLAD(inA12, inB1, sum);
 8002350:	f107 0320 	add.w	r3, r7, #32
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4619      	mov	r1, r3
 8002358:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800235c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002360:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8002364:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8002368:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800236c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002370:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002374:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8002378:	fb23 1302 	smlad	r3, r3, r2, r1
 800237c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return(result);
 8002380:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002384:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            sum2 = __SMLAD(inA12, inB2, sum2);
 8002388:	f107 0320 	add.w	r3, r7, #32
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4619      	mov	r1, r3
 8002390:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8002394:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002398:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 800239c:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80023a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80023a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023a8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80023ac:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80023b0:	fb23 1302 	smlad	r3, r3, r2, r1
 80023b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  return(result);
 80023b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80023bc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sum3 = __SMLAD(inA22, inB1, sum3);
 80023c0:	f107 0318 	add.w	r3, r7, #24
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4619      	mov	r1, r3
 80023c8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80023cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80023d0:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 80023d4:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80023d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80023dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023e0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80023e4:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80023e8:	fb23 1302 	smlad	r3, r3, r2, r1
 80023ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  return(result);
 80023f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sum4 = __SMLAD(inA22, inB2, sum4);
 80023f8:	f107 0318 	add.w	r3, r7, #24
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4619      	mov	r1, r3
 8002400:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8002404:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002408:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 800240c:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8002410:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002418:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800241c:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8002420:	fb23 1302 	smlad	r3, r3, r2, r1
 8002424:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  return(result);
 8002428:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800242c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

            colCnt--;
 8002430:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8002434:	3b01      	subs	r3, #1
 8002436:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        while (colCnt)
 800243a:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 800243e:	2b00      	cmp	r3, #0
 8002440:	f47f ae5c 	bne.w	80020fc <arm_nn_mat_mult_kernel_q7_q15_reordered+0x114>
        }                       /* while over colCnt */
        colCnt = numCol_A & 0x3;
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        while (colCnt)
 8002450:	e056      	b.n	8002500 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x518>
        {
            q7_t      inA1 = *pA++;
 8002452:	f107 030c 	add.w	r3, r7, #12
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f107 020c 	add.w	r2, r7, #12
 800245c:	1c59      	adds	r1, r3, #1
 800245e:	6011      	str	r1, [r2, #0]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            q15_t     inB1 = *pB++;
 8002466:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	1c99      	adds	r1, r3, #2
 800246e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002472:	6011      	str	r1, [r2, #0]
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
            q7_t      inA2 = *pA2++;
 800247a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
            q15_t     inB2 = *pB2++;
 800248a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	1c99      	adds	r1, r3, #2
 8002492:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002496:	6011      	str	r1, [r2, #0]
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100

            sum += inA1 * inB1;
 800249e:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
 80024a2:	f9b7 2104 	ldrsh.w	r2, [r7, #260]	; 0x104
 80024a6:	fb02 f303 	mul.w	r3, r2, r3
 80024aa:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80024ae:	4413      	add	r3, r2
 80024b0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            sum2 += inA1 * inB2;
 80024b4:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
 80024b8:	f9b7 2100 	ldrsh.w	r2, [r7, #256]	; 0x100
 80024bc:	fb02 f303 	mul.w	r3, r2, r3
 80024c0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80024c4:	4413      	add	r3, r2
 80024c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sum3 += inA2 * inB1;
 80024ca:	f997 3103 	ldrsb.w	r3, [r7, #259]	; 0x103
 80024ce:	f9b7 2104 	ldrsh.w	r2, [r7, #260]	; 0x104
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80024da:	4413      	add	r3, r2
 80024dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sum4 += inA2 * inB2;
 80024e0:	f997 3103 	ldrsb.w	r3, [r7, #259]	; 0x103
 80024e4:	f9b7 2100 	ldrsh.w	r2, [r7, #256]	; 0x100
 80024e8:	fb02 f303 	mul.w	r3, r2, r3
 80024ec:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80024f0:	4413      	add	r3, r2
 80024f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            colCnt--;
 80024f6:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 80024fa:	3b01      	subs	r3, #1
 80024fc:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        while (colCnt)
 8002500:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1a4      	bne.n	8002452 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x46a>
        }                       /* while over colCnt */
        *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8002508:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 800250c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8002510:	fa42 f303 	asr.w	r3, r2, r3
 8002514:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002518:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800251c:	f303 0307 	ssat	r3, #8, r3
 8002520:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002524:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8002528:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8002532:	b24a      	sxtb	r2, r1
 8002534:	701a      	strb	r2, [r3, #0]
        *pOut++ = (q7_t) __SSAT((sum3 >> out_shift), 8);
 8002536:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 800253a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800253e:	fa42 f303 	asr.w	r3, r2, r3
 8002542:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002546:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800254a:	f303 0307 	ssat	r3, #8, r3
 800254e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002552:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8002556:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8002560:	b24a      	sxtb	r2, r1
 8002562:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 8002564:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8002568:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800256c:	fa42 f303 	asr.w	r3, r2, r3
 8002570:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002578:	f303 0307 	ssat	r3, #8, r3
 800257c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002580:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8002584:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 800258e:	b24a      	sxtb	r2, r1
 8002590:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum4 >> out_shift), 8);
 8002592:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8002596:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800259a:	fa42 f303 	asr.w	r3, r2, r3
 800259e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80025a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025a6:	f303 0307 	ssat	r3, #8, r3
 80025aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80025ae:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80025b2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 80025bc:	b24a      	sxtb	r2, r1
 80025be:	701a      	strb	r2, [r3, #0]

        /* skip the row computed with A2 */
        pA += numCol_A;
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	881a      	ldrh	r2, [r3, #0]
 80025c4:	f107 030c 	add.w	r3, r7, #12
 80025c8:	f107 010c 	add.w	r1, r7, #12
 80025cc:	6809      	ldr	r1, [r1, #0]
 80025ce:	440a      	add	r2, r1
 80025d0:	601a      	str	r2, [r3, #0]
    for (i = 0; i < ch_im_out; i += 2)
 80025d2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80025d6:	3302      	adds	r3, #2
 80025d8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80025dc:	1dbb      	adds	r3, r7, #6
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80025e4:	429a      	cmp	r2, r3
 80025e6:	f6ff ad19 	blt.w	800201c <arm_nn_mat_mult_kernel_q7_q15_reordered+0x34>
    }                           /* for over ch_im_out */

    pOut += ch_im_out;
 80025ea:	1dbb      	adds	r3, r7, #6
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80025f2:	4413      	add	r3, r2
 80025f4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

    /* return the new output pointer with offset */
    return pOut;
 80025f8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
#else
    /* To be completed */
    return NULL;
#endif                          /* ARM_MATH_DSP */
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8002602:	46bd      	mov	sp, r7
 8002604:	bc90      	pop	{r4, r7}
 8002606:	4770      	bx	lr

08002608 <arm_fully_connected_q7_opt>:
                           const uint16_t bias_shift,
                           const uint16_t out_shift, 
                           const q7_t * bias, 
                           q7_t * pOut, 
                           q15_t * vec_buffer)
{
 8002608:	b590      	push	{r4, r7, lr}
 800260a:	b0f1      	sub	sp, #452	; 0x1c4
 800260c:	af00      	add	r7, sp, #0
 800260e:	f107 040c 	add.w	r4, r7, #12
 8002612:	6020      	str	r0, [r4, #0]
 8002614:	f107 0008 	add.w	r0, r7, #8
 8002618:	6001      	str	r1, [r0, #0]
 800261a:	4619      	mov	r1, r3
 800261c:	1dbb      	adds	r3, r7, #6
 800261e:	801a      	strh	r2, [r3, #0]
 8002620:	1d3b      	adds	r3, r7, #4
 8002622:	460a      	mov	r2, r1
 8002624:	801a      	strh	r2, [r3, #0]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    const q7_t *pB = pM;
 8002626:	f107 0320 	add.w	r3, r7, #32
 800262a:	f107 0208 	add.w	r2, r7, #8
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	601a      	str	r2, [r3, #0]
    q7_t     *pO = pOut;
 8002632:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8002636:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    const q7_t *pBias = bias;
 800263a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800263e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    q15_t    *pA;
    uint16_t  rowCnt = num_of_rows >> 2;
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	089b      	lsrs	r3, r3, #2
 8002648:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6

    arm_q7_to_q15_reordered_no_shift(pV, vec_buffer, dim_vec);
 800264c:	1dbb      	adds	r3, r7, #6
 800264e:	881a      	ldrh	r2, [r3, #0]
 8002650:	f107 030c 	add.w	r3, r7, #12
 8002654:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 8002658:	6818      	ldr	r0, [r3, #0]
 800265a:	f000 fc89 	bl	8002f70 <arm_q7_to_q15_reordered_no_shift>

    while (rowCnt)
 800265e:	e339      	b.n	8002cd4 <arm_fully_connected_q7_opt+0x6cc>
    {

        q31_t     sum =  ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8002660:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800266a:	f993 3000 	ldrsb.w	r3, [r3]
 800266e:	461a      	mov	r2, r3
 8002670:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 8002674:	409a      	lsls	r2, r3
 8002676:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 800267a:	3b01      	subs	r3, #1
 800267c:	2101      	movs	r1, #1
 800267e:	fa01 f303 	lsl.w	r3, r1, r3
 8002682:	4413      	add	r3, r2
 8002684:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8002688:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002692:	f993 3000 	ldrsb.w	r3, [r3]
 8002696:	461a      	mov	r2, r3
 8002698:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 800269c:	409a      	lsls	r2, r3
 800269e:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 80026a2:	3b01      	subs	r3, #1
 80026a4:	2101      	movs	r1, #1
 80026a6:	fa01 f303 	lsl.w	r3, r1, r3
 80026aa:	4413      	add	r3, r2
 80026ac:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
        q31_t     sum3 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80026b0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80026ba:	f993 3000 	ldrsb.w	r3, [r3]
 80026be:	461a      	mov	r2, r3
 80026c0:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 80026c4:	409a      	lsls	r2, r3
 80026c6:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 80026ca:	3b01      	subs	r3, #1
 80026cc:	2101      	movs	r1, #1
 80026ce:	fa01 f303 	lsl.w	r3, r1, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
        q31_t     sum4 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80026d8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80026e2:	f993 3000 	ldrsb.w	r3, [r3]
 80026e6:	461a      	mov	r2, r3
 80026e8:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 80026ec:	409a      	lsls	r2, r3
 80026ee:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 80026f2:	3b01      	subs	r3, #1
 80026f4:	2101      	movs	r1, #1
 80026f6:	fa01 f303 	lsl.w	r3, r1, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

        uint16_t  colCnt = dim_vec >> 2;
 8002700:	1dbb      	adds	r3, r7, #6
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	089b      	lsrs	r3, r3, #2
 8002706:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2

        pA = vec_buffer;
 800270a:	f107 031c 	add.w	r3, r7, #28
 800270e:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8002712:	601a      	str	r2, [r3, #0]

#ifdef USE_INTRINSIC

#ifndef ARM_MATH_BIG_ENDIAN
        while (colCnt)
 8002714:	e20a      	b.n	8002b2c <arm_fully_connected_q7_opt+0x524>
        {
            q31_t     inM11, inM12, inM13, inM14;
            q31_t     inV;

            inV = *__SIMD32(pA)++;
 8002716:	f107 021c 	add.w	r2, r7, #28
 800271a:	6813      	ldr	r3, [r2, #0]
 800271c:	1d19      	adds	r1, r3, #4
 800271e:	6011      	str	r1, [r2, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
            inM11 = *__SIMD32(pB)++;
 8002726:	f107 0220 	add.w	r2, r7, #32
 800272a:	6813      	ldr	r3, [r2, #0]
 800272c:	1d19      	adds	r1, r3, #4
 800272e:	6011      	str	r1, [r2, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
            inM12 = __SXTB16(__ROR(inM11, 8));
 8002736:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800273a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002744:	2208      	movs	r2, #8
 8002746:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8002748:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800274c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002750:	6812      	ldr	r2, [r2, #0]
 8002752:	f002 021f 	and.w	r2, r2, #31
 8002756:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8002758:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d103      	bne.n	800276a <arm_fully_connected_q7_opt+0x162>
    return op1;
 8002762:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	e007      	b.n	800277a <arm_fully_connected_q7_opt+0x172>
  return (op1 >> op2) | (op1 << (32U - op2));
 800276a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800276e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	fa62 f303 	ror.w	r3, r2, r3
 800277a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800277e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002780:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	fa2f f283 	sxtb16	r2, r3
 800278a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800278e:	601a      	str	r2, [r3, #0]
  return(result);
 8002790:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
            inM11 = __SXTB16(inM11);
 800279a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800279e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80027a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80027a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	fa2f f283 	sxtb16	r2, r3
 80027ae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80027b2:	601a      	str	r2, [r3, #0]
  return(result);
 80027b4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
            sum = __SMLAD(inM11, inV, sum);
 80027be:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80027c2:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80027c6:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 80027ca:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80027ce:	6018      	str	r0, [r3, #0]
 80027d0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80027d4:	6019      	str	r1, [r3, #0]
 80027d6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80027da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80027dc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80027ec:	6809      	ldr	r1, [r1, #0]
 80027ee:	fb23 1202 	smlad	r2, r3, r2, r1
 80027f2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80027f6:	601a      	str	r2, [r3, #0]
  return(result);
 80027f8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
            sum2 = __SMLAD(inM12, inV, sum2);
 8002802:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8002806:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800280a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800280e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002812:	6018      	str	r0, [r3, #0]
 8002814:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002818:	6019      	str	r1, [r3, #0]
 800281a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800281e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002820:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8002830:	6809      	ldr	r1, [r1, #0]
 8002832:	fb23 1202 	smlad	r2, r3, r2, r1
 8002836:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800283a:	601a      	str	r2, [r3, #0]
  return(result);
 800283c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
            inM13 = *__SIMD32(pB)++;
 8002846:	f107 0220 	add.w	r2, r7, #32
 800284a:	6813      	ldr	r3, [r2, #0]
 800284c:	1d19      	adds	r1, r3, #4
 800284e:	6011      	str	r1, [r2, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
            inM14 = __SXTB16(__ROR(inM13, 8));
 8002856:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800285a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002864:	2208      	movs	r2, #8
 8002866:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8002868:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800286c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	f002 021f 	and.w	r2, r2, #31
 8002876:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8002878:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d103      	bne.n	800288a <arm_fully_connected_q7_opt+0x282>
    return op1;
 8002882:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	e007      	b.n	800289a <arm_fully_connected_q7_opt+0x292>
  return (op1 >> op2) | (op1 << (32U - op2));
 800288a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800288e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	fa62 f303 	ror.w	r3, r2, r3
 800289a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800289e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80028a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	fa2f f283 	sxtb16	r2, r3
 80028aa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80028ae:	601a      	str	r2, [r3, #0]
  return(result);
 80028b0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
            inM13 = __SXTB16(inM13);
 80028ba:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80028be:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80028c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80028c4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	fa2f f283 	sxtb16	r2, r3
 80028ce:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80028d2:	601a      	str	r2, [r3, #0]
  return(result);
 80028d4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
            sum3 = __SMLAD(inM13, inV, sum3);
 80028de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80028e2:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80028e6:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 80028ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80028ee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80028f2:	6019      	str	r1, [r3, #0]
 80028f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80028f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80028fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028fe:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8002908:	6809      	ldr	r1, [r1, #0]
 800290a:	fb23 1202 	smlad	r2, r3, r2, r1
 800290e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002912:	601a      	str	r2, [r3, #0]
  return(result);
 8002914:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
            sum4 = __SMLAD(inM14, inV, sum4);
 800291e:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8002922:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002926:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800292a:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 800292e:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8002932:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800293a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800293e:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8002942:	fb23 1302 	smlad	r3, r3, r2, r1
 8002946:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  return(result);
 800294a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800294e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

            inV = *__SIMD32(pA)++;
 8002952:	f107 021c 	add.w	r2, r7, #28
 8002956:	6813      	ldr	r3, [r2, #0]
 8002958:	1d19      	adds	r1, r3, #4
 800295a:	6011      	str	r1, [r2, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
            inM11 = *__SIMD32(pB)++;
 8002962:	f107 0220 	add.w	r2, r7, #32
 8002966:	6813      	ldr	r3, [r2, #0]
 8002968:	1d19      	adds	r1, r3, #4
 800296a:	6011      	str	r1, [r2, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
            inM12 = __SXTB16(__ROR(inM11, 8));
 8002972:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002976:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800297a:	2308      	movs	r3, #8
 800297c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  op2 %= 32U;
 8002980:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (op2 == 0U)
 800298c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002990:	2b00      	cmp	r3, #0
 8002992:	d102      	bne.n	800299a <arm_fully_connected_q7_opt+0x392>
    return op1;
 8002994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002998:	e005      	b.n	80029a6 <arm_fully_connected_q7_opt+0x39e>
  return (op1 >> op2) | (op1 << (32U - op2));
 800299a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800299e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029a2:	fa62 f303 	ror.w	r3, r2, r3
 80029a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80029aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ae:	fa2f f383 	sxtb16	r3, r3
 80029b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  return(result);
 80029b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ba:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
            inM11 = __SXTB16(inM11);
 80029be:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80029c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80029c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80029ca:	fa2f f383 	sxtb16	r3, r3
 80029ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  return(result);
 80029d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80029d6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
            sum = __SMLAD(inM11, inV, sum);
 80029da:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 80029de:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80029e2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80029e6:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 80029ea:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 80029ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80029f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029f6:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80029fa:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80029fe:	fb23 1302 	smlad	r3, r3, r2, r1
 8002a02:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  return(result);
 8002a06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002a0a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
            sum2 = __SMLAD(inM12, inV, sum2);
 8002a0e:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8002a12:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002a16:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002a1a:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8002a1e:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8002a22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a2a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002a2e:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8002a32:	fb23 1302 	smlad	r3, r3, r2, r1
 8002a36:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  return(result);
 8002a3a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002a3e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
            inM13 = *__SIMD32(pB)++;
 8002a42:	f107 0220 	add.w	r2, r7, #32
 8002a46:	6813      	ldr	r3, [r2, #0]
 8002a48:	1d19      	adds	r1, r3, #4
 8002a4a:	6011      	str	r1, [r2, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
            inM14 = __SXTB16(__ROR(inM13, 8));
 8002a52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a56:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002a5a:	2308      	movs	r3, #8
 8002a5c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  op2 %= 32U;
 8002a60:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  if (op2 == 0U)
 8002a6c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d102      	bne.n	8002a7a <arm_fully_connected_q7_opt+0x472>
    return op1;
 8002a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a78:	e005      	b.n	8002a86 <arm_fully_connected_q7_opt+0x47e>
  return (op1 >> op2) | (op1 << (32U - op2));
 8002a7a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002a7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a82:	fa62 f303 	ror.w	r3, r2, r3
 8002a86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002a8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a8e:	fa2f f383 	sxtb16	r3, r3
 8002a92:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  return(result);
 8002a96:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002a9a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
            inM13 = __SXTB16(inM13);
 8002a9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002aa2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002aa6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002aaa:	fa2f f383 	sxtb16	r3, r3
 8002aae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  return(result);
 8002ab2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002ab6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
            sum3 = __SMLAD(inM13, inV, sum3);
 8002aba:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8002abe:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002ac2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002ac6:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8002aca:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8002ace:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002ad2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002ad6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8002ada:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8002ade:	fb23 1302 	smlad	r3, r3, r2, r1
 8002ae2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  return(result);
 8002ae6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002aea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
            sum4 = __SMLAD(inM14, inV, sum4);
 8002aee:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8002af2:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002af6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002afa:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 8002afe:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8002b02:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002b06:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002b0a:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002b0e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002b12:	fb23 1302 	smlad	r3, r3, r2, r1
 8002b16:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8002b1a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002b1e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
            colCnt--;
 8002b22:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 8002b26:	3b01      	subs	r3, #1
 8002b28:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
        while (colCnt)
 8002b2c:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f47f adf0 	bne.w	8002716 <arm_fully_connected_q7_opt+0x10e>
                      [sum4] "+r"(sum4),[pB] "+r"(pB),[pA] "+r"(pA):[colCnt] "r"(colCnt):"r0", "r1", "r2", "r3", "r4");
#endif                          /* ARM_MATH_BIG_ENDIAN */

#endif                          /* USE_INTRINSIC */

        colCnt = dim_vec & 0x3;
 8002b36:	1dbb      	adds	r3, r7, #6
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
        while (colCnt)
 8002b42:	e062      	b.n	8002c0a <arm_fully_connected_q7_opt+0x602>
        {
            q15_t     inV = *pA++;
 8002b44:	f107 031c 	add.w	r3, r7, #28
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	1c99      	adds	r1, r3, #2
 8002b4c:	f107 021c 	add.w	r2, r7, #28
 8002b50:	6011      	str	r1, [r2, #0]
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	f8a7 3162 	strh.w	r3, [r7, #354]	; 0x162
            q7_t      inM = *pB++;
 8002b58:	f107 0320 	add.w	r3, r7, #32
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	1c59      	adds	r1, r3, #1
 8002b60:	f107 0220 	add.w	r2, r7, #32
 8002b64:	6011      	str	r1, [r2, #0]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	f887 3161 	strb.w	r3, [r7, #353]	; 0x161
            q7_t      inM2 = *pB++;
 8002b6c:	f107 0320 	add.w	r3, r7, #32
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	1c59      	adds	r1, r3, #1
 8002b74:	f107 0220 	add.w	r2, r7, #32
 8002b78:	6011      	str	r1, [r2, #0]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	f887 3160 	strb.w	r3, [r7, #352]	; 0x160
            q7_t      inM3 = *pB++;
 8002b80:	f107 0320 	add.w	r3, r7, #32
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	1c59      	adds	r1, r3, #1
 8002b88:	f107 0220 	add.w	r2, r7, #32
 8002b8c:	6011      	str	r1, [r2, #0]
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
            q7_t      inM4 = *pB++;
 8002b94:	f107 0320 	add.w	r3, r7, #32
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	1c59      	adds	r1, r3, #1
 8002b9c:	f107 0220 	add.w	r2, r7, #32
 8002ba0:	6011      	str	r1, [r2, #0]
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e

            sum += inV * inM;
 8002ba8:	f9b7 3162 	ldrsh.w	r3, [r7, #354]	; 0x162
 8002bac:	f997 2161 	ldrsb.w	r2, [r7, #353]	; 0x161
 8002bb0:	fb02 f303 	mul.w	r3, r2, r3
 8002bb4:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8002bb8:	4413      	add	r3, r2
 8002bba:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
            sum2 += inV * inM2;
 8002bbe:	f9b7 3162 	ldrsh.w	r3, [r7, #354]	; 0x162
 8002bc2:	f997 2160 	ldrsb.w	r2, [r7, #352]	; 0x160
 8002bc6:	fb02 f303 	mul.w	r3, r2, r3
 8002bca:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8002bce:	4413      	add	r3, r2
 8002bd0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
            sum3 += inV * inM3;
 8002bd4:	f9b7 3162 	ldrsh.w	r3, [r7, #354]	; 0x162
 8002bd8:	f997 215f 	ldrsb.w	r2, [r7, #351]	; 0x15f
 8002bdc:	fb02 f303 	mul.w	r3, r2, r3
 8002be0:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8002be4:	4413      	add	r3, r2
 8002be6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
            sum4 += inV * inM4;
 8002bea:	f9b7 3162 	ldrsh.w	r3, [r7, #354]	; 0x162
 8002bee:	f997 215e 	ldrsb.w	r2, [r7, #350]	; 0x15e
 8002bf2:	fb02 f303 	mul.w	r3, r2, r3
 8002bf6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
            colCnt--;
 8002c00:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 8002c04:	3b01      	subs	r3, #1
 8002c06:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
        while (colCnt)
 8002c0a:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d198      	bne.n	8002b44 <arm_fully_connected_q7_opt+0x53c>
        }                       /* while over colCnt */
        *pO++ = (q7_t) (__SSAT((sum >> out_shift), 8));
 8002c12:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 8002c16:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8002c1a:	fa42 f303 	asr.w	r3, r2, r3
 8002c1e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002c22:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c26:	f303 0307 	ssat	r3, #8, r3
 8002c2a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002c2e:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8002c32:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002c36:	1c5a      	adds	r2, r3, #1
 8002c38:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002c3c:	b24a      	sxtb	r2, r1
 8002c3e:	701a      	strb	r2, [r3, #0]
        *pO++ = (q7_t) (__SSAT((sum2 >> out_shift), 8));
 8002c40:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 8002c44:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8002c48:	fa42 f303 	asr.w	r3, r2, r3
 8002c4c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8002c50:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8002c54:	f303 0307 	ssat	r3, #8, r3
 8002c58:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8002c5c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002c60:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002c6a:	b24a      	sxtb	r2, r1
 8002c6c:	701a      	strb	r2, [r3, #0]
        *pO++ = (q7_t) (__SSAT((sum3 >> out_shift), 8));
 8002c6e:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 8002c72:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8002c76:	fa42 f303 	asr.w	r3, r2, r3
 8002c7a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002c7e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002c82:	f303 0307 	ssat	r3, #8, r3
 8002c86:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002c8a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002c8e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002c98:	b24a      	sxtb	r2, r1
 8002c9a:	701a      	strb	r2, [r3, #0]
        *pO++ = (q7_t) (__SSAT((sum4 >> out_shift), 8));
 8002c9c:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 8002ca0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002ca4:	fa42 f303 	asr.w	r3, r2, r3
 8002ca8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8002cac:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002cb0:	f303 0307 	ssat	r3, #8, r3
 8002cb4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8002cb8:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8002cbc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002cc6:	b24a      	sxtb	r2, r1
 8002cc8:	701a      	strb	r2, [r3, #0]

        /* adjust the pointers and counters */
        rowCnt--;
 8002cca:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
    while (rowCnt)
 8002cd4:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f47f acc1 	bne.w	8002660 <arm_fully_connected_q7_opt+0x58>
    }

    /* left-over part of the rows */
    rowCnt = num_of_rows & 0x3;
 8002cde:	1d3b      	adds	r3, r7, #4
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6

    while (rowCnt)
 8002cea:	e136      	b.n	8002f5a <arm_fully_connected_q7_opt+0x952>
    {
        q31_t     sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8002cec:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002cf6:	f993 3000 	ldrsb.w	r3, [r3]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 8002d00:	409a      	lsls	r2, r3
 8002d02:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 8002d06:	3b01      	subs	r3, #1
 8002d08:	2101      	movs	r1, #1
 8002d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        uint16_t  colCnt = dim_vec >> 2;
 8002d14:	1dbb      	adds	r3, r7, #6
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	089b      	lsrs	r3, r3, #2
 8002d1a:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a

        pA = vec_buffer;
 8002d1e:	f107 031c 	add.w	r3, r7, #28
 8002d22:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8002d26:	601a      	str	r2, [r3, #0]

        while (colCnt)
 8002d28:	e0c7      	b.n	8002eba <arm_fully_connected_q7_opt+0x8b2>
        {
            q31_t     inV1, inV2, inM11, inM12;

            pB = (q7_t *) read_and_pad_reordered((void *)pB, &inM11, &inM12);
 8002d2a:	f107 0320 	add.w	r3, r7, #32
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	f107 0310 	add.w	r3, r7, #16
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d3a:	f107 0218 	add.w	r2, r7, #24
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d44:	f107 0214 	add.w	r2, r7, #20
 8002d48:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 8002d4a:	f107 0210 	add.w	r2, r7, #16
 8002d4e:	6813      	ldr	r3, [r2, #0]
 8002d50:	1d19      	adds	r1, r3, #4
 8002d52:	6011      	str	r1, [r2, #0]
 8002d54:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6013      	str	r3, [r2, #0]
        *out2 = __SXTB16(__ROR(inA, 8));
 8002d5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d6c:	2208      	movs	r2, #8
 8002d6e:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8002d70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d74:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002d78:	6812      	ldr	r2, [r2, #0]
 8002d7a:	f002 021f 	and.w	r2, r2, #31
 8002d7e:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8002d80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d103      	bne.n	8002d92 <arm_fully_connected_q7_opt+0x78a>
    return op1;
 8002d8a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	e007      	b.n	8002da2 <arm_fully_connected_q7_opt+0x79a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8002d92:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	fa62 f303 	ror.w	r3, r2, r3
 8002da2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002da6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002da8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	fa2f f283 	sxtb16	r2, r3
 8002db2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002db6:	601a      	str	r2, [r3, #0]
  return(result);
 8002db8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8002dc8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dd2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002dd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	fa2f f283 	sxtb16	r2, r3
 8002dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de2:	601a      	str	r2, [r3, #0]
  return(result);
 8002de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	601a      	str	r2, [r3, #0]
        return source;
 8002df4:	f107 0310 	add.w	r3, r7, #16
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	f107 0320 	add.w	r3, r7, #32
 8002dfe:	601a      	str	r2, [r3, #0]

            inV1 = *__SIMD32(pA)++;
 8002e00:	f107 021c 	add.w	r2, r7, #28
 8002e04:	6813      	ldr	r3, [r2, #0]
 8002e06:	1d19      	adds	r1, r3, #4
 8002e08:	6011      	str	r1, [r2, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
            sum = __SMLAD(inV1, inM11, sum);
 8002e10:	f8d7 1188 	ldr.w	r1, [r7, #392]	; 0x188
 8002e14:	f107 0318 	add.w	r3, r7, #24
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002e20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e24:	6019      	str	r1, [r3, #0]
 8002e26:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e2a:	6018      	str	r0, [r3, #0]
 8002e2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002e32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002e3c:	6812      	ldr	r2, [r2, #0]
 8002e3e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002e42:	6809      	ldr	r1, [r1, #0]
 8002e44:	fb23 1202 	smlad	r2, r3, r2, r1
 8002e48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e4c:	601a      	str	r2, [r3, #0]
  return(result);
 8002e4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

            inV2 = *__SIMD32(pA)++;
 8002e58:	f107 021c 	add.w	r2, r7, #28
 8002e5c:	6813      	ldr	r3, [r2, #0]
 8002e5e:	1d19      	adds	r1, r3, #4
 8002e60:	6011      	str	r1, [r2, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
            sum = __SMLAD(inV2, inM12, sum);
 8002e68:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002e6c:	f107 0314 	add.w	r3, r7, #20
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002e78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002e7c:	6019      	str	r1, [r3, #0]
 8002e7e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002e82:	6018      	str	r0, [r3, #0]
 8002e84:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002e8a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e94:	6812      	ldr	r2, [r2, #0]
 8002e96:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002e9a:	6809      	ldr	r1, [r1, #0]
 8002e9c:	fb23 1202 	smlad	r2, r3, r2, r1
 8002ea0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ea4:	601a      	str	r2, [r3, #0]
  return(result);
 8002ea6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

            colCnt--;
 8002eb0:	f8b7 319a 	ldrh.w	r3, [r7, #410]	; 0x19a
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a
        while (colCnt)
 8002eba:	f8b7 319a 	ldrh.w	r3, [r7, #410]	; 0x19a
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f47f af33 	bne.w	8002d2a <arm_fully_connected_q7_opt+0x722>
        }

        /* left-over of the vector */
        colCnt = dim_vec & 0x3;
 8002ec4:	1dbb      	adds	r3, r7, #6
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a
        while (colCnt)
 8002ed0:	e023      	b.n	8002f1a <arm_fully_connected_q7_opt+0x912>
        {
            q15_t     inV = *pA++;
 8002ed2:	f107 031c 	add.w	r3, r7, #28
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	1c99      	adds	r1, r3, #2
 8002eda:	f107 021c 	add.w	r2, r7, #28
 8002ede:	6011      	str	r1, [r2, #0]
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
            q7_t      inM = *pB++;
 8002ee6:	f107 0320 	add.w	r3, r7, #32
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	1c59      	adds	r1, r3, #1
 8002eee:	f107 0220 	add.w	r2, r7, #32
 8002ef2:	6011      	str	r1, [r2, #0]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d
            sum += inV * inM;
 8002efa:	f9b7 318e 	ldrsh.w	r3, [r7, #398]	; 0x18e
 8002efe:	f997 218d 	ldrsb.w	r2, [r7, #397]	; 0x18d
 8002f02:	fb02 f303 	mul.w	r3, r2, r3
 8002f06:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
            colCnt--;
 8002f10:	f8b7 319a 	ldrh.w	r3, [r7, #410]	; 0x19a
 8002f14:	3b01      	subs	r3, #1
 8002f16:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a
        while (colCnt)
 8002f1a:	f8b7 319a 	ldrh.w	r3, [r7, #410]	; 0x19a
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1d7      	bne.n	8002ed2 <arm_fully_connected_q7_opt+0x8ca>
        }

        *pO++ = (q7_t) (__SSAT((sum >> out_shift), 8));
 8002f22:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 8002f26:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002f2a:	fa42 f303 	asr.w	r3, r2, r3
 8002f2e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8002f32:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002f36:	f303 0307 	ssat	r3, #8, r3
 8002f3a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8002f3e:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 8002f42:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002f4c:	b24a      	sxtb	r2, r1
 8002f4e:	701a      	strb	r2, [r3, #0]

        rowCnt--;
 8002f50:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 8002f54:	3b01      	subs	r3, #1
 8002f56:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
    while (rowCnt)
 8002f5a:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f47f aec4 	bne.w	8002cec <arm_fully_connected_q7_opt+0x6e4>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to ARM_MATH_SUCCESS */
    return (ARM_MATH_SUCCESS);
 8002f64:	2300      	movs	r3, #0

}
 8002f66:	4618      	mov	r0, r3
 8002f68:	f507 77e2 	add.w	r7, r7, #452	; 0x1c4
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd90      	pop	{r4, r7, pc}

08002f70 <arm_q7_to_q15_reordered_no_shift>:
 * The tail (i.e., last (N % 4) elements) will still be in original order.
 *   
 */

void arm_q7_to_q15_reordered_no_shift(const q7_t * pSrc, q15_t * pDst, uint32_t blockSize)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b091      	sub	sp, #68	; 0x44
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
    const q7_t *pIn = pSrc;     /* Src pointer */
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	617b      	str	r3, [r7, #20]
    q31_t     in1, in2;

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /*loop Unrolling */
    blkCnt = blockSize >> 2u;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	089b      	lsrs	r3, r3, #2
 8002f84:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0u)
 8002f86:	e037      	b.n	8002ff8 <arm_q7_to_q15_reordered_no_shift+0x88>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in = *__SIMD32(pIn)++;
 8002f88:	f107 0214 	add.w	r2, r7, #20
 8002f8c:	6813      	ldr	r3, [r2, #0]
 8002f8e:	1d19      	adds	r1, r3, #4
 8002f90:	6011      	str	r1, [r2, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	63bb      	str	r3, [r7, #56]	; 0x38

        /* rotatate in by 8 and extend two q7_t values to q15_t values */
        in1 = __SXTB16(__ROR(in, 8));
 8002f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f98:	61fb      	str	r3, [r7, #28]
 8002f9a:	2308      	movs	r3, #8
 8002f9c:	61bb      	str	r3, [r7, #24]
  op2 %= 32U;
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	f003 031f 	and.w	r3, r3, #31
 8002fa4:	61bb      	str	r3, [r7, #24]
  if (op2 == 0U)
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <arm_q7_to_q15_reordered_no_shift+0x40>
    return op1;
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	e003      	b.n	8002fb8 <arm_q7_to_q15_reordered_no_shift+0x48>
  return (op1 >> op2) | (op1 << (32U - op2));
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	fa62 f303 	ror.w	r3, r2, r3
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	fa2f f383 	sxtb16	r3, r3
 8002fc0:	623b      	str	r3, [r7, #32]
  return(result);
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	637b      	str	r3, [r7, #52]	; 0x34

        /* extend remainig two q7_t values to q15_t values */
        in2 = __SXTB16(in);
 8002fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fcc:	fa2f f383 	sxtb16	r3, r3
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd4:	633b      	str	r3, [r7, #48]	; 0x30

#ifndef ARM_MATH_BIG_ENDIAN
        *__SIMD32(pDst)++ = in2;
 8002fd6:	f107 0208 	add.w	r2, r7, #8
 8002fda:	6813      	ldr	r3, [r2, #0]
 8002fdc:	1d19      	adds	r1, r3, #4
 8002fde:	6011      	str	r1, [r2, #0]
 8002fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fe2:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = in1;
 8002fe4:	f107 0208 	add.w	r2, r7, #8
 8002fe8:	6813      	ldr	r3, [r2, #0]
 8002fea:	1d19      	adds	r1, r3, #4
 8002fec:	6011      	str	r1, [r2, #0]
 8002fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ff0:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = in1;
        *__SIMD32(pDst)++ = in2;
#endif

        /* Decrement the loop counter */
        blkCnt--;
 8002ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (blkCnt > 0u)
 8002ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1c4      	bne.n	8002f88 <arm_q7_to_q15_reordered_no_shift+0x18>
    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    blkCnt = blockSize % 0x4u;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f003 0303 	and.w	r3, r3, #3
 8003004:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Loop over blockSize number of values */
    blkCnt = blockSize;

#endif                          /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 8003006:	e00c      	b.n	8003022 <arm_q7_to_q15_reordered_no_shift+0xb2>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        *pDst++ = (q15_t) * pIn++;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	617a      	str	r2, [r7, #20]
 800300e:	f993 1000 	ldrsb.w	r1, [r3]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	1c9a      	adds	r2, r3, #2
 8003016:	60ba      	str	r2, [r7, #8]
 8003018:	b20a      	sxth	r2, r1
 800301a:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 800301c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800301e:	3b01      	subs	r3, #1
 8003020:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (blkCnt > 0u)
 8003022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1ef      	bne.n	8003008 <arm_q7_to_q15_reordered_no_shift+0x98>
    }

}
 8003028:	bf00      	nop
 800302a:	3744      	adds	r7, #68	; 0x44
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <compare_and_replace_if_larger_q7>:

static void compare_and_replace_if_larger_q7(q7_t * base,   // base data
                                             q7_t * target, // compare target
                                             const uint16_t length  // data length
    )
{
 8003034:	b480      	push	{r7}
 8003036:	b08b      	sub	sp, #44	; 0x2c
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	4613      	mov	r3, r2
 8003040:	80fb      	strh	r3, [r7, #6]
    q7_t     *pIn = base;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	623b      	str	r3, [r7, #32]
    q7_t     *pCom = target;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	61fb      	str	r3, [r7, #28]
    union arm_nnword in;
    union arm_nnword com;
    uint16_t  cnt = length >> 2;
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	089b      	lsrs	r3, r3, #2
 800304e:	84fb      	strh	r3, [r7, #38]	; 0x26

    while (cnt > 0u)
 8003050:	e039      	b.n	80030c6 <compare_and_replace_if_larger_q7+0x92>
    {
        in.word = *__SIMD32(pIn);
 8003052:	f107 0320 	add.w	r3, r7, #32
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	61bb      	str	r3, [r7, #24]
        com.word = *__SIMD32(pCom)++;
 800305c:	f107 021c 	add.w	r2, r7, #28
 8003060:	6813      	ldr	r3, [r2, #0]
 8003062:	1d19      	adds	r1, r3, #4
 8003064:	6011      	str	r1, [r2, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	617b      	str	r3, [r7, #20]

        // if version
        if (com.bytes[0] > in.bytes[0])
 800306a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800306e:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003072:	429a      	cmp	r2, r3
 8003074:	dd02      	ble.n	800307c <compare_and_replace_if_larger_q7+0x48>
            in.bytes[0] = com.bytes[0];
 8003076:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800307a:	763b      	strb	r3, [r7, #24]
        if (com.bytes[1] > in.bytes[1])
 800307c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8003080:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003084:	429a      	cmp	r2, r3
 8003086:	dd02      	ble.n	800308e <compare_and_replace_if_larger_q7+0x5a>
            in.bytes[1] = com.bytes[1];
 8003088:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800308c:	767b      	strb	r3, [r7, #25]
        if (com.bytes[2] > in.bytes[2])
 800308e:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8003092:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003096:	429a      	cmp	r2, r3
 8003098:	dd02      	ble.n	80030a0 <compare_and_replace_if_larger_q7+0x6c>
            in.bytes[2] = com.bytes[2];
 800309a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800309e:	76bb      	strb	r3, [r7, #26]
        if (com.bytes[3] > in.bytes[3])
 80030a0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80030a4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	dd02      	ble.n	80030b2 <compare_and_replace_if_larger_q7+0x7e>
            in.bytes[3] = com.bytes[3];
 80030ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030b0:	76fb      	strb	r3, [r7, #27]

        *__SIMD32(pIn)++ = in.word;
 80030b2:	f107 0220 	add.w	r2, r7, #32
 80030b6:	6813      	ldr	r3, [r2, #0]
 80030b8:	1d19      	adds	r1, r3, #4
 80030ba:	6011      	str	r1, [r2, #0]
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	601a      	str	r2, [r3, #0]

        cnt--;
 80030c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80030c2:	3b01      	subs	r3, #1
 80030c4:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (cnt > 0u)
 80030c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1c2      	bne.n	8003052 <compare_and_replace_if_larger_q7+0x1e>
    }
}
 80030cc:	bf00      	nop
 80030ce:	372c      	adds	r7, #44	; 0x2c
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <arm_maxpool_q7_HWC>:
                   const uint16_t dim_im_in,
                   const uint16_t ch_im_in,
                   const uint16_t dim_kernel,
                   const uint16_t padding,
                   const uint16_t stride, const uint16_t dim_im_out, q7_t * bufferA, q7_t * Im_out)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08c      	sub	sp, #48	; 0x30
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	4608      	mov	r0, r1
 80030e2:	4611      	mov	r1, r2
 80030e4:	461a      	mov	r2, r3
 80030e6:	4603      	mov	r3, r0
 80030e8:	817b      	strh	r3, [r7, #10]
 80030ea:	460b      	mov	r3, r1
 80030ec:	813b      	strh	r3, [r7, #8]
 80030ee:	4613      	mov	r3, r2
 80030f0:	80fb      	strh	r3, [r7, #6]
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    int16_t   i_x, i_y;

    /* first does the pooling along x axis */
    for (i_y = 0; i_y < dim_im_in; i_y++)
 80030f2:	2300      	movs	r3, #0
 80030f4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80030f6:	e08d      	b.n	8003214 <arm_maxpool_q7_HWC+0x13c>
    {

        for (i_x = 0; i_x < dim_im_out; i_x++)
 80030f8:	2300      	movs	r3, #0
 80030fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80030fc:	e07d      	b.n	80031fa <arm_maxpool_q7_HWC+0x122>
        {
            /* for each output pixel */
            q7_t     *target = Im_in + (i_y * dim_im_in + i_x) * ch_im_in;
 80030fe:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003102:	897a      	ldrh	r2, [r7, #10]
 8003104:	fb02 f203 	mul.w	r2, r2, r3
 8003108:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800310c:	4413      	add	r3, r2
 800310e:	893a      	ldrh	r2, [r7, #8]
 8003110:	fb02 f303 	mul.w	r3, r2, r3
 8003114:	461a      	mov	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4413      	add	r3, r2
 800311a:	617b      	str	r3, [r7, #20]
            q7_t     *win_start;
            q7_t     *win_stop;
            if (i_x * stride - padding < 0)
 800311c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8003120:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8003122:	fb02 f203 	mul.w	r2, r2, r3
 8003126:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	da02      	bge.n	8003134 <arm_maxpool_q7_HWC+0x5c>
            {
                win_start = target;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	62bb      	str	r3, [r7, #40]	; 0x28
 8003132:	e013      	b.n	800315c <arm_maxpool_q7_HWC+0x84>
            } else
            {
                win_start = Im_in + (i_y * dim_im_in + i_x * stride - padding) * ch_im_in;
 8003134:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003138:	897a      	ldrh	r2, [r7, #10]
 800313a:	fb02 f203 	mul.w	r2, r2, r3
 800313e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8003142:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	441a      	add	r2, r3
 800314a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	893a      	ldrh	r2, [r7, #8]
 8003150:	fb02 f303 	mul.w	r3, r2, r3
 8003154:	461a      	mov	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4413      	add	r3, r2
 800315a:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            if (i_x * stride - padding + dim_kernel >= dim_im_in)
 800315c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8003160:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8003162:	fb02 f203 	mul.w	r2, r2, r3
 8003166:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003168:	1ad2      	subs	r2, r2, r3
 800316a:	88fb      	ldrh	r3, [r7, #6]
 800316c:	441a      	add	r2, r3
 800316e:	897b      	ldrh	r3, [r7, #10]
 8003170:	429a      	cmp	r2, r3
 8003172:	db0d      	blt.n	8003190 <arm_maxpool_q7_HWC+0xb8>
            {
                win_stop = Im_in + (i_y * dim_im_in + dim_im_in) * ch_im_in;
 8003174:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003178:	3301      	adds	r3, #1
 800317a:	897a      	ldrh	r2, [r7, #10]
 800317c:	fb02 f303 	mul.w	r3, r2, r3
 8003180:	893a      	ldrh	r2, [r7, #8]
 8003182:	fb02 f303 	mul.w	r3, r2, r3
 8003186:	461a      	mov	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4413      	add	r3, r2
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
 800318e:	e015      	b.n	80031bc <arm_maxpool_q7_HWC+0xe4>
            } else
            {
                win_stop = Im_in + (i_y * dim_im_in + i_x * stride - padding + dim_kernel) * ch_im_in;
 8003190:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003194:	897a      	ldrh	r2, [r7, #10]
 8003196:	fb02 f203 	mul.w	r2, r2, r3
 800319a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800319e:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 80031a0:	fb01 f303 	mul.w	r3, r1, r3
 80031a4:	441a      	add	r2, r3
 80031a6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80031a8:	1ad2      	subs	r2, r2, r3
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	4413      	add	r3, r2
 80031ae:	893a      	ldrh	r2, [r7, #8]
 80031b0:	fb02 f303 	mul.w	r3, r2, r3
 80031b4:	461a      	mov	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4413      	add	r3, r2
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* first step is to copy over initial data */
            /* arm_copy_q7(win_start, target, ch_im_in); */
            memmove(target, win_start, ch_im_in);
 80031bc:	893b      	ldrh	r3, [r7, #8]
 80031be:	461a      	mov	r2, r3
 80031c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031c2:	6978      	ldr	r0, [r7, #20]
 80031c4:	f004 fb82 	bl	80078cc <memmove>

            /* start the max operation from the second part */
            win_start += ch_im_in;
 80031c8:	893b      	ldrh	r3, [r7, #8]
 80031ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031cc:	4413      	add	r3, r2
 80031ce:	62bb      	str	r3, [r7, #40]	; 0x28
            for (; win_start < win_stop; win_start += ch_im_in)
 80031d0:	e009      	b.n	80031e6 <arm_maxpool_q7_HWC+0x10e>
            {
                compare_and_replace_if_larger_q7(target, win_start, ch_im_in);
 80031d2:	893b      	ldrh	r3, [r7, #8]
 80031d4:	461a      	mov	r2, r3
 80031d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031d8:	6978      	ldr	r0, [r7, #20]
 80031da:	f7ff ff2b 	bl	8003034 <compare_and_replace_if_larger_q7>
            for (; win_start < win_stop; win_start += ch_im_in)
 80031de:	893b      	ldrh	r3, [r7, #8]
 80031e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031e2:	4413      	add	r3, r2
 80031e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80031e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d3f1      	bcc.n	80031d2 <arm_maxpool_q7_HWC+0xfa>
        for (i_x = 0; i_x < dim_im_out; i_x++)
 80031ee:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	3301      	adds	r3, #1
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80031fa:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80031fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003202:	429a      	cmp	r2, r3
 8003204:	f6ff af7b 	blt.w	80030fe <arm_maxpool_q7_HWC+0x26>
    for (i_y = 0; i_y < dim_im_in; i_y++)
 8003208:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800320c:	b29b      	uxth	r3, r3
 800320e:	3301      	adds	r3, #1
 8003210:	b29b      	uxth	r3, r3
 8003212:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003214:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8003218:	897b      	ldrh	r3, [r7, #10]
 800321a:	429a      	cmp	r2, r3
 800321c:	f6ff af6c 	blt.w	80030f8 <arm_maxpool_q7_HWC+0x20>
            }
        }
    }

    /* then does the pooling along y axis */
    for (i_y = 0; i_y < dim_im_out; i_y++)
 8003220:	2300      	movs	r3, #0
 8003222:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003224:	e084      	b.n	8003330 <arm_maxpool_q7_HWC+0x258>
    {

        /* for each output row */
        q7_t     *target = Im_out + i_y * dim_im_out * ch_im_in;
 8003226:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800322a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800322e:	fb02 f303 	mul.w	r3, r2, r3
 8003232:	893a      	ldrh	r2, [r7, #8]
 8003234:	fb02 f303 	mul.w	r3, r2, r3
 8003238:	461a      	mov	r2, r3
 800323a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800323c:	4413      	add	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        q7_t     *row_start;
        q7_t     *row_end;
        /* setting the starting row */
        if (i_y * stride - padding < 0)
 8003240:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003244:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8003246:	fb02 f203 	mul.w	r2, r2, r3
 800324a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	da02      	bge.n	8003258 <arm_maxpool_q7_HWC+0x180>
        {
            row_start = Im_in;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	623b      	str	r3, [r7, #32]
 8003256:	e010      	b.n	800327a <arm_maxpool_q7_HWC+0x1a2>
        } else
        {
            row_start = Im_in + (i_y * stride - padding) * dim_im_in * ch_im_in;
 8003258:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800325c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800325e:	fb02 f203 	mul.w	r2, r2, r3
 8003262:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	897a      	ldrh	r2, [r7, #10]
 8003268:	fb02 f303 	mul.w	r3, r2, r3
 800326c:	893a      	ldrh	r2, [r7, #8]
 800326e:	fb02 f303 	mul.w	r3, r2, r3
 8003272:	461a      	mov	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4413      	add	r3, r2
 8003278:	623b      	str	r3, [r7, #32]
        }
        /* setting the stopping row */
        if (i_y * stride - padding + dim_kernel >= dim_im_in)
 800327a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800327e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8003280:	fb02 f203 	mul.w	r2, r2, r3
 8003284:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003286:	1ad2      	subs	r2, r2, r3
 8003288:	88fb      	ldrh	r3, [r7, #6]
 800328a:	441a      	add	r2, r3
 800328c:	897b      	ldrh	r3, [r7, #10]
 800328e:	429a      	cmp	r2, r3
 8003290:	db0b      	blt.n	80032aa <arm_maxpool_q7_HWC+0x1d2>
        {
            row_end = Im_in + dim_im_in * dim_im_in * ch_im_in;
 8003292:	897b      	ldrh	r3, [r7, #10]
 8003294:	897a      	ldrh	r2, [r7, #10]
 8003296:	fb02 f303 	mul.w	r3, r2, r3
 800329a:	893a      	ldrh	r2, [r7, #8]
 800329c:	fb02 f303 	mul.w	r3, r2, r3
 80032a0:	461a      	mov	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4413      	add	r3, r2
 80032a6:	61fb      	str	r3, [r7, #28]
 80032a8:	e012      	b.n	80032d0 <arm_maxpool_q7_HWC+0x1f8>
        } else
        {
            row_end = Im_in + (i_y * stride - padding + dim_kernel) * dim_im_in * ch_im_in;
 80032aa:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80032ae:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80032b0:	fb02 f203 	mul.w	r2, r2, r3
 80032b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80032b6:	1ad2      	subs	r2, r2, r3
 80032b8:	88fb      	ldrh	r3, [r7, #6]
 80032ba:	4413      	add	r3, r2
 80032bc:	897a      	ldrh	r2, [r7, #10]
 80032be:	fb02 f303 	mul.w	r3, r2, r3
 80032c2:	893a      	ldrh	r2, [r7, #8]
 80032c4:	fb02 f303 	mul.w	r3, r2, r3
 80032c8:	461a      	mov	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4413      	add	r3, r2
 80032ce:	61fb      	str	r3, [r7, #28]
        }

        /* copy over the first row */
        /* arm_copy_q7(row_start, target, dim_im_out * ch_im_in); */
        memmove(target, row_start, dim_im_out * ch_im_in);
 80032d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80032d4:	893a      	ldrh	r2, [r7, #8]
 80032d6:	fb02 f303 	mul.w	r3, r2, r3
 80032da:	461a      	mov	r2, r3
 80032dc:	6a39      	ldr	r1, [r7, #32]
 80032de:	69b8      	ldr	r0, [r7, #24]
 80032e0:	f004 faf4 	bl	80078cc <memmove>

        /* move over to next row */
        row_start += ch_im_in * dim_im_in;
 80032e4:	893b      	ldrh	r3, [r7, #8]
 80032e6:	897a      	ldrh	r2, [r7, #10]
 80032e8:	fb02 f303 	mul.w	r3, r2, r3
 80032ec:	461a      	mov	r2, r3
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	4413      	add	r3, r2
 80032f2:	623b      	str	r3, [r7, #32]

        for (; row_start < row_end; row_start += dim_im_in * ch_im_in)
 80032f4:	e012      	b.n	800331c <arm_maxpool_q7_HWC+0x244>
        {
            compare_and_replace_if_larger_q7(target, row_start, dim_im_out * ch_im_in);
 80032f6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80032fa:	893b      	ldrh	r3, [r7, #8]
 80032fc:	fb12 f303 	smulbb	r3, r2, r3
 8003300:	b29b      	uxth	r3, r3
 8003302:	461a      	mov	r2, r3
 8003304:	6a39      	ldr	r1, [r7, #32]
 8003306:	69b8      	ldr	r0, [r7, #24]
 8003308:	f7ff fe94 	bl	8003034 <compare_and_replace_if_larger_q7>
        for (; row_start < row_end; row_start += dim_im_in * ch_im_in)
 800330c:	897b      	ldrh	r3, [r7, #10]
 800330e:	893a      	ldrh	r2, [r7, #8]
 8003310:	fb02 f303 	mul.w	r3, r2, r3
 8003314:	461a      	mov	r2, r3
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	4413      	add	r3, r2
 800331a:	623b      	str	r3, [r7, #32]
 800331c:	6a3a      	ldr	r2, [r7, #32]
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	429a      	cmp	r2, r3
 8003322:	d3e8      	bcc.n	80032f6 <arm_maxpool_q7_HWC+0x21e>
    for (i_y = 0; i_y < dim_im_out; i_y++)
 8003324:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003328:	b29b      	uxth	r3, r3
 800332a:	3301      	adds	r3, #1
 800332c:	b29b      	uxth	r3, r3
 800332e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003330:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8003334:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003338:	429a      	cmp	r2, r3
 800333a:	f6ff af74 	blt.w	8003226 <arm_maxpool_q7_HWC+0x14e>
        }
    }

#endif                          /* ARM_MATH_DSP */

}
 800333e:	bf00      	nop
 8003340:	3730      	adds	r7, #48	; 0x30
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <arm_softmax_q7>:
   *  with a log(2) scaling factor.
   *
   */

void arm_softmax_q7(const q7_t * vec_in, const uint16_t dim_vec, q7_t * p_out)
{
 8003346:	b480      	push	{r7}
 8003348:	b08f      	sub	sp, #60	; 0x3c
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	460b      	mov	r3, r1
 8003350:	607a      	str	r2, [r7, #4]
 8003352:	817b      	strh	r3, [r7, #10]
    q31_t     sum;
    int16_t   i;
    uint8_t   shift;
    q15_t     base;
    base = -257;
 8003354:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8003358:	863b      	strh	r3, [r7, #48]	; 0x30

    /* We first search for the maximum */
    for (i = 0; i < dim_vec; i++)
 800335a:	2300      	movs	r3, #0
 800335c:	867b      	strh	r3, [r7, #50]	; 0x32
 800335e:	e017      	b.n	8003390 <arm_softmax_q7+0x4a>
    {
        if (vec_in[i] > base)
 8003360:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4413      	add	r3, r2
 8003368:	f993 3000 	ldrsb.w	r3, [r3]
 800336c:	b21b      	sxth	r3, r3
 800336e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8003372:	429a      	cmp	r2, r3
 8003374:	da06      	bge.n	8003384 <arm_softmax_q7+0x3e>
        {
            base = vec_in[i];
 8003376:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	4413      	add	r3, r2
 800337e:	f993 3000 	ldrsb.w	r3, [r3]
 8003382:	863b      	strh	r3, [r7, #48]	; 0x30
    for (i = 0; i < dim_vec; i++)
 8003384:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003388:	b29b      	uxth	r3, r3
 800338a:	3301      	adds	r3, #1
 800338c:	b29b      	uxth	r3, r3
 800338e:	867b      	strh	r3, [r7, #50]	; 0x32
 8003390:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8003394:	897b      	ldrh	r3, [r7, #10]
 8003396:	429a      	cmp	r2, r3
 8003398:	dbe2      	blt.n	8003360 <arm_softmax_q7+0x1a>
    /* 
     * So the base is set to max-8, meaning 
     * that we ignore really small values. 
     * anyway, they will be 0 after shrinking to q7_t.
     */
    base = base - 8;
 800339a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800339c:	3b08      	subs	r3, #8
 800339e:	b29b      	uxth	r3, r3
 80033a0:	863b      	strh	r3, [r7, #48]	; 0x30

    sum = 0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	637b      	str	r3, [r7, #52]	; 0x34

    for (i = 0; i < dim_vec; i++)
 80033a6:	2300      	movs	r3, #0
 80033a8:	867b      	strh	r3, [r7, #50]	; 0x32
 80033aa:	e02a      	b.n	8003402 <arm_softmax_q7+0xbc>
    {
        if (vec_in[i] > base) 
 80033ac:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4413      	add	r3, r2
 80033b4:	f993 3000 	ldrsb.w	r3, [r3]
 80033b8:	b21b      	sxth	r3, r3
 80033ba:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80033be:	429a      	cmp	r2, r3
 80033c0:	da19      	bge.n	80033f6 <arm_softmax_q7+0xb0>
        {
            shift = (uint8_t)__USAT(vec_in[i] - base, 5);
 80033c2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4413      	add	r3, r2
 80033ca:	f993 3000 	ldrsb.w	r3, [r3]
 80033ce:	461a      	mov	r2, r3
 80033d0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f383 0305 	usat	r3, #5, r3
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            sum += 0x1 << shift;
 80033e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033ea:	2201      	movs	r2, #1
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033f2:	4413      	add	r3, r2
 80033f4:	637b      	str	r3, [r7, #52]	; 0x34
    for (i = 0; i < dim_vec; i++)
 80033f6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3301      	adds	r3, #1
 80033fe:	b29b      	uxth	r3, r3
 8003400:	867b      	strh	r3, [r7, #50]	; 0x32
 8003402:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8003406:	897b      	ldrh	r3, [r7, #10]
 8003408:	429a      	cmp	r2, r3
 800340a:	dbcf      	blt.n	80033ac <arm_softmax_q7+0x66>
        }
    }

    /* This is effectively (0x1 << 20) / sum */
    int output_base = 0x100000 / sum;
 800340c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003412:	fb92 f3f3 	sdiv	r3, r2, r3
 8003416:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* 
     * Final confidence will be output_base >> ( 13 - (vec_in[i] - base) )
     * so 128 (0x1<<7) -> 100% confidence when sum = 0x1 << 8, output_base = 0x1 << 12 
     * and vec_in[i]-base = 8
     */
    for (i = 0; i < dim_vec; i++) 
 8003418:	2300      	movs	r3, #0
 800341a:	867b      	strh	r3, [r7, #50]	; 0x32
 800341c:	e03a      	b.n	8003494 <arm_softmax_q7+0x14e>
    {
        if (vec_in[i] > base) 
 800341e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4413      	add	r3, r2
 8003426:	f993 3000 	ldrsb.w	r3, [r3]
 800342a:	b21b      	sxth	r3, r3
 800342c:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8003430:	429a      	cmp	r2, r3
 8003432:	da23      	bge.n	800347c <arm_softmax_q7+0x136>
        {
            /* Here minimum value of 13+base-vec_in[i] will be 5 */
            shift = (uint8_t)__USAT(13+base-vec_in[i], 5);
 8003434:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8003438:	330d      	adds	r3, #13
 800343a:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 800343e:	68f9      	ldr	r1, [r7, #12]
 8003440:	440a      	add	r2, r1
 8003442:	f992 2000 	ldrsb.w	r2, [r2]
 8003446:	1a9b      	subs	r3, r3, r2
 8003448:	62bb      	str	r3, [r7, #40]	; 0x28
 800344a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344c:	f383 0305 	usat	r3, #5, r3
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            p_out[i] = (q7_t) __SSAT((output_base >> shift), 8);
 8003458:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800345c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800345e:	fa42 f303 	asr.w	r3, r2, r3
 8003462:	61fb      	str	r3, [r7, #28]
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f303 0307 	ssat	r3, #8, r3
 800346a:	61bb      	str	r3, [r7, #24]
 800346c:	69b9      	ldr	r1, [r7, #24]
 800346e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	4413      	add	r3, r2
 8003476:	b24a      	sxtb	r2, r1
 8003478:	701a      	strb	r2, [r3, #0]
 800347a:	e005      	b.n	8003488 <arm_softmax_q7+0x142>
        } else {
            p_out[i] = 0;
 800347c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	4413      	add	r3, r2
 8003484:	2200      	movs	r2, #0
 8003486:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < dim_vec; i++) 
 8003488:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800348c:	b29b      	uxth	r3, r3
 800348e:	3301      	adds	r3, #1
 8003490:	b29b      	uxth	r3, r3
 8003492:	867b      	strh	r3, [r7, #50]	; 0x32
 8003494:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8003498:	897b      	ldrh	r3, [r7, #10]
 800349a:	429a      	cmp	r2, r3
 800349c:	dbbf      	blt.n	800341e <arm_softmax_q7+0xd8>
        }
    }
}
 800349e:	bf00      	nop
 80034a0:	373c      	adds	r7, #60	; 0x3c
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
	...

080034ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4a07      	ldr	r2, [pc, #28]	; (80034d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80034bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	4a06      	ldr	r2, [pc, #24]	; (80034dc <vApplicationGetIdleTaskMemory+0x30>)
 80034c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2280      	movs	r2, #128	; 0x80
 80034c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80034ca:	bf00      	nop
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	20008e4c 	.word	0x20008e4c
 80034dc:	20008ea0 	.word	0x20008ea0

080034e0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart6 , (uint8_t *)&ch, 1, 0xFFFF);
 80034e8:	1d39      	adds	r1, r7, #4
 80034ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034ee:	2201      	movs	r2, #1
 80034f0:	4803      	ldr	r0, [pc, #12]	; (8003500 <__io_putchar+0x20>)
 80034f2:	f002 fafb 	bl	8005aec <HAL_UART_Transmit>
		return ch;
 80034f6:	687b      	ldr	r3, [r7, #4]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	20017a7c 	.word	0x20017a7c

08003504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003504:	b5b0      	push	{r4, r5, r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800350a:	f000 fc36 	bl	8003d7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800350e:	f000 f81d 	bl	800354c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003512:	f000 f8db 	bl	80036cc <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8003516:	f000 f8a9 	bl	800366c <MX_USART6_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800351a:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <main+0x40>)
 800351c:	1d3c      	adds	r4, r7, #4
 800351e:	461d      	mov	r5, r3
 8003520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003524:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003528:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800352c:	1d3b      	adds	r3, r7, #4
 800352e:	2100      	movs	r1, #0
 8003530:	4618      	mov	r0, r3
 8003532:	f002 ff98 	bl	8006466 <osThreadCreate>
 8003536:	4602      	mov	r2, r0
 8003538:	4b03      	ldr	r3, [pc, #12]	; (8003548 <main+0x44>)
 800353a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800353c:	f002 ff8c 	bl	8006458 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003540:	e7fe      	b.n	8003540 <main+0x3c>
 8003542:	bf00      	nop
 8003544:	080087c4 	.word	0x080087c4
 8003548:	2000da78 	.word	0x2000da78

0800354c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b0b8      	sub	sp, #224	; 0xe0
 8003550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003552:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003556:	2234      	movs	r2, #52	; 0x34
 8003558:	2100      	movs	r1, #0
 800355a:	4618      	mov	r0, r3
 800355c:	f004 f9cf 	bl	80078fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003560:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	605a      	str	r2, [r3, #4]
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	60da      	str	r2, [r3, #12]
 800356e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003570:	f107 0308 	add.w	r3, r7, #8
 8003574:	2290      	movs	r2, #144	; 0x90
 8003576:	2100      	movs	r1, #0
 8003578:	4618      	mov	r0, r3
 800357a:	f004 f9c0 	bl	80078fe <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800357e:	4b39      	ldr	r3, [pc, #228]	; (8003664 <SystemClock_Config+0x118>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	4a38      	ldr	r2, [pc, #224]	; (8003664 <SystemClock_Config+0x118>)
 8003584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003588:	6413      	str	r3, [r2, #64]	; 0x40
 800358a:	4b36      	ldr	r3, [pc, #216]	; (8003664 <SystemClock_Config+0x118>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003592:	607b      	str	r3, [r7, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003596:	4b34      	ldr	r3, [pc, #208]	; (8003668 <SystemClock_Config+0x11c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a33      	ldr	r2, [pc, #204]	; (8003668 <SystemClock_Config+0x11c>)
 800359c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	4b31      	ldr	r3, [pc, #196]	; (8003668 <SystemClock_Config+0x11c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80035ae:	2302      	movs	r3, #2
 80035b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035b4:	2301      	movs	r3, #1
 80035b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80035ba:	2310      	movs	r3, #16
 80035bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035c0:	2302      	movs	r3, #2
 80035c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80035c6:	2300      	movs	r3, #0
 80035c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 80035cc:	2308      	movs	r3, #8
 80035ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 210;
 80035d2:	23d2      	movs	r3, #210	; 0xd2
 80035d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80035d8:	2302      	movs	r3, #2
 80035da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80035de:	2302      	movs	r3, #2
 80035e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 fecf 	bl	800438c <HAL_RCC_OscConfig>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80035f4:	f000 f9f9 	bl	80039ea <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80035f8:	f000 fe78 	bl	80042ec <HAL_PWREx_EnableOverDrive>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8003602:	f000 f9f2 	bl	80039ea <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003606:	230f      	movs	r3, #15
 8003608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800360c:	2302      	movs	r3, #2
 800360e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003612:	2300      	movs	r3, #0
 8003614:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003618:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800361c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003624:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003628:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800362c:	2106      	movs	r1, #6
 800362e:	4618      	mov	r0, r3
 8003630:	f001 f95a 	bl	80048e8 <HAL_RCC_ClockConfig>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800363a:	f000 f9d6 	bl	80039ea <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800363e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003642:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8003644:	2300      	movs	r3, #0
 8003646:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003648:	f107 0308 	add.w	r3, r7, #8
 800364c:	4618      	mov	r0, r3
 800364e:	f001 fb73 	bl	8004d38 <HAL_RCCEx_PeriphCLKConfig>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8003658:	f000 f9c7 	bl	80039ea <Error_Handler>
  }
}
 800365c:	bf00      	nop
 800365e:	37e0      	adds	r7, #224	; 0xe0
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40023800 	.word	0x40023800
 8003668:	40007000 	.word	0x40007000

0800366c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003670:	4b14      	ldr	r3, [pc, #80]	; (80036c4 <MX_USART6_UART_Init+0x58>)
 8003672:	4a15      	ldr	r2, [pc, #84]	; (80036c8 <MX_USART6_UART_Init+0x5c>)
 8003674:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003676:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <MX_USART6_UART_Init+0x58>)
 8003678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800367c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800367e:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <MX_USART6_UART_Init+0x58>)
 8003680:	2200      	movs	r2, #0
 8003682:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003684:	4b0f      	ldr	r3, [pc, #60]	; (80036c4 <MX_USART6_UART_Init+0x58>)
 8003686:	2200      	movs	r2, #0
 8003688:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800368a:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <MX_USART6_UART_Init+0x58>)
 800368c:	2200      	movs	r2, #0
 800368e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003690:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <MX_USART6_UART_Init+0x58>)
 8003692:	220c      	movs	r2, #12
 8003694:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003696:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <MX_USART6_UART_Init+0x58>)
 8003698:	2200      	movs	r2, #0
 800369a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800369c:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <MX_USART6_UART_Init+0x58>)
 800369e:	2200      	movs	r2, #0
 80036a0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036a2:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <MX_USART6_UART_Init+0x58>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036a8:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <MX_USART6_UART_Init+0x58>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80036ae:	4805      	ldr	r0, [pc, #20]	; (80036c4 <MX_USART6_UART_Init+0x58>)
 80036b0:	f002 f9ce 	bl	8005a50 <HAL_UART_Init>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80036ba:	f000 f996 	bl	80039ea <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80036be:	bf00      	nop
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20017a7c 	.word	0x20017a7c
 80036c8:	40011400 	.word	0x40011400

080036cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036d2:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <MX_GPIO_Init+0x2c>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	4a08      	ldr	r2, [pc, #32]	; (80036f8 <MX_GPIO_Init+0x2c>)
 80036d8:	f043 0304 	orr.w	r3, r3, #4
 80036dc:	6313      	str	r3, [r2, #48]	; 0x30
 80036de:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <MX_GPIO_Init+0x2c>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	607b      	str	r3, [r7, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]

}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40023800 	.word	0x40023800

080036fc <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b0a0      	sub	sp, #128	; 0x80
 8003700:	af0c      	add	r7, sp, #48	; 0x30
 8003702:	6078      	str	r0, [r7, #4]
#ifdef RTE_Compiler_EventRecorder
 EventRecorderInitialize (EventRecordAll, 1);  // initialize and start Event Recorder
 #endif

 //HAL_UART_Transmit(&huart6,"start execution\n",20,1000);//發送串口
 printf("start execution\n");
 8003704:	489f      	ldr	r0, [pc, #636]	; (8003984 <StartDefaultTask+0x288>)
 8003706:	f004 f977 	bl	80079f8 <puts>
 /* start the execution */

 q7_t     *img_buffer1 = scratch_buffer;
 800370a:	4b9f      	ldr	r3, [pc, #636]	; (8003988 <StartDefaultTask+0x28c>)
 800370c:	647b      	str	r3, [r7, #68]	; 0x44
 q7_t     *img_buffer2 = img_buffer1 + 32 * 32 * 32;
 800370e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003710:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003714:	643b      	str	r3, [r7, #64]	; 0x40

 /* input pre-processing */
 int mean_data[3] = INPUT_MEAN_SHIFT;
 8003716:	4a9d      	ldr	r2, [pc, #628]	; (800398c <StartDefaultTask+0x290>)
 8003718:	f107 0318 	add.w	r3, r7, #24
 800371c:	ca07      	ldmia	r2, {r0, r1, r2}
 800371e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 unsigned int scale_data[3] = INPUT_RIGHT_SHIFT;
 8003722:	4a9b      	ldr	r2, [pc, #620]	; (8003990 <StartDefaultTask+0x294>)
 8003724:	f107 030c 	add.w	r3, r7, #12
 8003728:	ca07      	ldmia	r2, {r0, r1, r2}
 800372a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 for (int i=0;i<32*32*3; i+=3) {
 800372e:	2300      	movs	r3, #0
 8003730:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003732:	e058      	b.n	80037e6 <StartDefaultTask+0xea>
   img_buffer2[i] =   (q7_t)__SSAT( ((((int)image_data[i]   - mean_data[0])<<7) + (0x1<<(scale_data[0]-1)))
 8003734:	4a97      	ldr	r2, [pc, #604]	; (8003994 <StartDefaultTask+0x298>)
 8003736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003738:	4413      	add	r3, r2
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	461a      	mov	r2, r3
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	01da      	lsls	r2, r3, #7
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	3b01      	subs	r3, #1
 8003748:	2101      	movs	r1, #1
 800374a:	fa01 f303 	lsl.w	r3, r1, r3
 800374e:	441a      	add	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	fa42 f303 	asr.w	r3, r2, r3
 8003756:	63bb      	str	r3, [r7, #56]	; 0x38
 8003758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375a:	f303 0307 	ssat	r3, #8, r3
 800375e:	637b      	str	r3, [r7, #52]	; 0x34
 8003760:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003764:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003766:	4413      	add	r3, r2
 8003768:	b24a      	sxtb	r2, r1
 800376a:	701a      	strb	r2, [r3, #0]
                            >> scale_data[0], 8);
   img_buffer2[i+1] = (q7_t)__SSAT( ((((int)image_data[i+1] - mean_data[1])<<7) + (0x1<<(scale_data[1]-1)))
 800376c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800376e:	3301      	adds	r3, #1
 8003770:	4a88      	ldr	r2, [pc, #544]	; (8003994 <StartDefaultTask+0x298>)
 8003772:	5cd3      	ldrb	r3, [r2, r3]
 8003774:	461a      	mov	r2, r3
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	01da      	lsls	r2, r3, #7
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	3b01      	subs	r3, #1
 8003780:	2101      	movs	r1, #1
 8003782:	fa01 f303 	lsl.w	r3, r1, r3
 8003786:	441a      	add	r2, r3
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	fa42 f303 	asr.w	r3, r2, r3
 800378e:	633b      	str	r3, [r7, #48]	; 0x30
 8003790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003792:	f303 0307 	ssat	r3, #8, r3
 8003796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003798:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800379a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800379c:	3301      	adds	r3, #1
 800379e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037a0:	4413      	add	r3, r2
 80037a2:	b24a      	sxtb	r2, r1
 80037a4:	701a      	strb	r2, [r3, #0]
                            >> scale_data[1], 8);
   img_buffer2[i+2] = (q7_t)__SSAT( ((((int)image_data[i+2] - mean_data[2])<<7) + (0x1<<(scale_data[2]-1)))
 80037a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037a8:	3302      	adds	r3, #2
 80037aa:	4a7a      	ldr	r2, [pc, #488]	; (8003994 <StartDefaultTask+0x298>)
 80037ac:	5cd3      	ldrb	r3, [r2, r3]
 80037ae:	461a      	mov	r2, r3
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	01da      	lsls	r2, r3, #7
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	3b01      	subs	r3, #1
 80037ba:	2101      	movs	r1, #1
 80037bc:	fa01 f303 	lsl.w	r3, r1, r3
 80037c0:	441a      	add	r2, r3
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	fa42 f303 	asr.w	r3, r2, r3
 80037c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037cc:	f303 0307 	ssat	r3, #8, r3
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
 80037d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037d6:	3302      	adds	r3, #2
 80037d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037da:	4413      	add	r3, r2
 80037dc:	b24a      	sxtb	r2, r1
 80037de:	701a      	strb	r2, [r3, #0]
 for (int i=0;i<32*32*3; i+=3) {
 80037e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e2:	3303      	adds	r3, #3
 80037e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037ec:	dba2      	blt.n	8003734 <StartDefaultTask+0x38>
                            >> scale_data[2], 8);
 }

 // conv1 img_buffer2 -> img_buffer1
 arm_convolve_HWC_q7_RGB(img_buffer2, CONV1_IM_DIM, CONV1_IM_CH, conv1_wt, CONV1_OUT_CH, CONV1_KER_DIM, CONV1_PADDING,
 80037ee:	2300      	movs	r3, #0
 80037f0:	930a      	str	r3, [sp, #40]	; 0x28
 80037f2:	4b69      	ldr	r3, [pc, #420]	; (8003998 <StartDefaultTask+0x29c>)
 80037f4:	9309      	str	r3, [sp, #36]	; 0x24
 80037f6:	2320      	movs	r3, #32
 80037f8:	9308      	str	r3, [sp, #32]
 80037fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037fc:	9307      	str	r3, [sp, #28]
 80037fe:	2309      	movs	r3, #9
 8003800:	9306      	str	r3, [sp, #24]
 8003802:	2306      	movs	r3, #6
 8003804:	9305      	str	r3, [sp, #20]
 8003806:	4b65      	ldr	r3, [pc, #404]	; (800399c <StartDefaultTask+0x2a0>)
 8003808:	9304      	str	r3, [sp, #16]
 800380a:	2301      	movs	r3, #1
 800380c:	9303      	str	r3, [sp, #12]
 800380e:	2302      	movs	r3, #2
 8003810:	9302      	str	r3, [sp, #8]
 8003812:	2305      	movs	r3, #5
 8003814:	9301      	str	r3, [sp, #4]
 8003816:	2320      	movs	r3, #32
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	4b61      	ldr	r3, [pc, #388]	; (80039a0 <StartDefaultTask+0x2a4>)
 800381c:	2203      	movs	r2, #3
 800381e:	2120      	movs	r1, #32
 8003820:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003822:	f7fc ff3d 	bl	80006a0 <arm_convolve_HWC_q7_RGB>
                         CONV1_STRIDE, conv1_bias, CONV1_BIAS_LSHIFT, CONV1_OUT_RSHIFT, img_buffer1, CONV1_OUT_DIM,
                         (q15_t *) col_buffer, NULL);

 arm_relu_q7(img_buffer1, CONV1_OUT_DIM * CONV1_OUT_DIM * CONV1_OUT_CH);
 8003826:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800382a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800382c:	f7fc fed8 	bl	80005e0 <arm_relu_q7>

 // pool1 img_buffer1 -> img_buffer2
 arm_maxpool_q7_HWC(img_buffer1, CONV1_OUT_DIM, CONV1_OUT_CH, POOL1_KER_DIM,
 8003830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003832:	9304      	str	r3, [sp, #16]
 8003834:	2300      	movs	r3, #0
 8003836:	9303      	str	r3, [sp, #12]
 8003838:	2310      	movs	r3, #16
 800383a:	9302      	str	r3, [sp, #8]
 800383c:	2302      	movs	r3, #2
 800383e:	9301      	str	r3, [sp, #4]
 8003840:	2300      	movs	r3, #0
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	2303      	movs	r3, #3
 8003846:	2220      	movs	r2, #32
 8003848:	2120      	movs	r1, #32
 800384a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800384c:	f7ff fc44 	bl	80030d8 <arm_maxpool_q7_HWC>
                    POOL1_PADDING, POOL1_STRIDE, POOL1_OUT_DIM, NULL, img_buffer2);

 // conv2 img_buffer2 -> img_buffer1
 arm_convolve_HWC_q7_fast(img_buffer2, CONV2_IM_DIM, CONV2_IM_CH, conv2_wt, CONV2_OUT_CH, CONV2_KER_DIM,
 8003850:	2300      	movs	r3, #0
 8003852:	930a      	str	r3, [sp, #40]	; 0x28
 8003854:	4b50      	ldr	r3, [pc, #320]	; (8003998 <StartDefaultTask+0x29c>)
 8003856:	9309      	str	r3, [sp, #36]	; 0x24
 8003858:	2310      	movs	r3, #16
 800385a:	9308      	str	r3, [sp, #32]
 800385c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800385e:	9307      	str	r3, [sp, #28]
 8003860:	2309      	movs	r3, #9
 8003862:	9306      	str	r3, [sp, #24]
 8003864:	2304      	movs	r3, #4
 8003866:	9305      	str	r3, [sp, #20]
 8003868:	4b4e      	ldr	r3, [pc, #312]	; (80039a4 <StartDefaultTask+0x2a8>)
 800386a:	9304      	str	r3, [sp, #16]
 800386c:	2301      	movs	r3, #1
 800386e:	9303      	str	r3, [sp, #12]
 8003870:	2302      	movs	r3, #2
 8003872:	9302      	str	r3, [sp, #8]
 8003874:	2305      	movs	r3, #5
 8003876:	9301      	str	r3, [sp, #4]
 8003878:	2310      	movs	r3, #16
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	4b4a      	ldr	r3, [pc, #296]	; (80039a8 <StartDefaultTask+0x2ac>)
 800387e:	2220      	movs	r2, #32
 8003880:	2110      	movs	r1, #16
 8003882:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003884:	f7fd f950 	bl	8000b28 <arm_convolve_HWC_q7_fast>
                          CONV2_PADDING, CONV2_STRIDE, conv2_bias, CONV2_BIAS_LSHIFT, CONV2_OUT_RSHIFT, img_buffer1,
                          CONV2_OUT_DIM, (q15_t *) col_buffer, NULL);

 arm_relu_q7(img_buffer1, CONV2_OUT_DIM * CONV2_OUT_DIM * CONV2_OUT_CH);
 8003888:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800388c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800388e:	f7fc fea7 	bl	80005e0 <arm_relu_q7>

 // pool2 img_buffer1 -> img_buffer2
 arm_maxpool_q7_HWC(img_buffer1, CONV2_OUT_DIM, CONV2_OUT_CH, POOL2_KER_DIM,
 8003892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003894:	9304      	str	r3, [sp, #16]
 8003896:	4b40      	ldr	r3, [pc, #256]	; (8003998 <StartDefaultTask+0x29c>)
 8003898:	9303      	str	r3, [sp, #12]
 800389a:	2308      	movs	r3, #8
 800389c:	9302      	str	r3, [sp, #8]
 800389e:	2302      	movs	r3, #2
 80038a0:	9301      	str	r3, [sp, #4]
 80038a2:	2300      	movs	r3, #0
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	2303      	movs	r3, #3
 80038a8:	2210      	movs	r2, #16
 80038aa:	2110      	movs	r1, #16
 80038ac:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80038ae:	f7ff fc13 	bl	80030d8 <arm_maxpool_q7_HWC>
                    POOL2_PADDING, POOL2_STRIDE, POOL2_OUT_DIM, col_buffer, img_buffer2);

// conv3 img_buffer2 -> img_buffer1
 arm_convolve_HWC_q7_fast(img_buffer2, CONV3_IM_DIM, CONV3_IM_CH, conv3_wt, CONV3_OUT_CH, CONV3_KER_DIM,
 80038b2:	2300      	movs	r3, #0
 80038b4:	930a      	str	r3, [sp, #40]	; 0x28
 80038b6:	4b38      	ldr	r3, [pc, #224]	; (8003998 <StartDefaultTask+0x29c>)
 80038b8:	9309      	str	r3, [sp, #36]	; 0x24
 80038ba:	2308      	movs	r3, #8
 80038bc:	9308      	str	r3, [sp, #32]
 80038be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038c0:	9307      	str	r3, [sp, #28]
 80038c2:	2307      	movs	r3, #7
 80038c4:	9306      	str	r3, [sp, #24]
 80038c6:	2301      	movs	r3, #1
 80038c8:	9305      	str	r3, [sp, #20]
 80038ca:	4b38      	ldr	r3, [pc, #224]	; (80039ac <StartDefaultTask+0x2b0>)
 80038cc:	9304      	str	r3, [sp, #16]
 80038ce:	2301      	movs	r3, #1
 80038d0:	9303      	str	r3, [sp, #12]
 80038d2:	2302      	movs	r3, #2
 80038d4:	9302      	str	r3, [sp, #8]
 80038d6:	2305      	movs	r3, #5
 80038d8:	9301      	str	r3, [sp, #4]
 80038da:	2320      	movs	r3, #32
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	4b34      	ldr	r3, [pc, #208]	; (80039b0 <StartDefaultTask+0x2b4>)
 80038e0:	2210      	movs	r2, #16
 80038e2:	2108      	movs	r1, #8
 80038e4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80038e6:	f7fd f91f 	bl	8000b28 <arm_convolve_HWC_q7_fast>
                          CONV3_PADDING, CONV3_STRIDE, conv3_bias, CONV3_BIAS_LSHIFT, CONV3_OUT_RSHIFT, img_buffer1,
                          CONV3_OUT_DIM, (q15_t *) col_buffer, NULL);

 arm_relu_q7(img_buffer1, CONV3_OUT_DIM * CONV3_OUT_DIM * CONV3_OUT_CH);
 80038ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80038ee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80038f0:	f7fc fe76 	bl	80005e0 <arm_relu_q7>

 // pool3 img_buffer-> img_buffer2
 arm_maxpool_q7_HWC(img_buffer1, CONV3_OUT_DIM, CONV3_OUT_CH, POOL3_KER_DIM,
 80038f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038f6:	9304      	str	r3, [sp, #16]
 80038f8:	4b27      	ldr	r3, [pc, #156]	; (8003998 <StartDefaultTask+0x29c>)
 80038fa:	9303      	str	r3, [sp, #12]
 80038fc:	2304      	movs	r3, #4
 80038fe:	9302      	str	r3, [sp, #8]
 8003900:	2302      	movs	r3, #2
 8003902:	9301      	str	r3, [sp, #4]
 8003904:	2300      	movs	r3, #0
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	2303      	movs	r3, #3
 800390a:	2220      	movs	r2, #32
 800390c:	2108      	movs	r1, #8
 800390e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003910:	f7ff fbe2 	bl	80030d8 <arm_maxpool_q7_HWC>
                    POOL3_PADDING, POOL3_STRIDE, POOL3_OUT_DIM, col_buffer, img_buffer2);

 arm_fully_connected_q7_opt(img_buffer2, ip1_wt, IP1_DIM, IP1_OUT, IP1_BIAS_LSHIFT, IP1_OUT_RSHIFT, ip1_bias,
 8003914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003916:	9304      	str	r3, [sp, #16]
 8003918:	4b26      	ldr	r3, [pc, #152]	; (80039b4 <StartDefaultTask+0x2b8>)
 800391a:	9303      	str	r3, [sp, #12]
 800391c:	4b26      	ldr	r3, [pc, #152]	; (80039b8 <StartDefaultTask+0x2bc>)
 800391e:	9302      	str	r3, [sp, #8]
 8003920:	2308      	movs	r3, #8
 8003922:	9301      	str	r3, [sp, #4]
 8003924:	2301      	movs	r3, #1
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	230a      	movs	r3, #10
 800392a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800392e:	4923      	ldr	r1, [pc, #140]	; (80039bc <StartDefaultTask+0x2c0>)
 8003930:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003932:	f7fe fe69 	bl	8002608 <arm_fully_connected_q7_opt>
                            output_data, (q15_t *) img_buffer1);

 arm_softmax_q7(output_data, 10, output_data);
 8003936:	4a1f      	ldr	r2, [pc, #124]	; (80039b4 <StartDefaultTask+0x2b8>)
 8003938:	210a      	movs	r1, #10
 800393a:	481e      	ldr	r0, [pc, #120]	; (80039b4 <StartDefaultTask+0x2b8>)
 800393c:	f7ff fd03 	bl	8003346 <arm_softmax_q7>

 for (int i = 0; i < 10; i++)
 8003940:	2300      	movs	r3, #0
 8003942:	64bb      	str	r3, [r7, #72]	; 0x48
 8003944:	e00c      	b.n	8003960 <StartDefaultTask+0x264>
 {
     printf("%d: %d\n", i, output_data[i]);
 8003946:	4a1b      	ldr	r2, [pc, #108]	; (80039b4 <StartDefaultTask+0x2b8>)
 8003948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800394a:	4413      	add	r3, r2
 800394c:	f993 3000 	ldrsb.w	r3, [r3]
 8003950:	461a      	mov	r2, r3
 8003952:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003954:	481a      	ldr	r0, [pc, #104]	; (80039c0 <StartDefaultTask+0x2c4>)
 8003956:	f003 ffdb 	bl	8007910 <iprintf>
 for (int i = 0; i < 10; i++)
 800395a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800395c:	3301      	adds	r3, #1
 800395e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003962:	2b09      	cmp	r3, #9
 8003964:	ddef      	ble.n	8003946 <StartDefaultTask+0x24a>
 }
 uint32_t tick = HAL_GetTick();
 8003966:	f000 fa29 	bl	8003dbc <HAL_GetTick>
 800396a:	63f8      	str	r0, [r7, #60]	; 0x3c
 printf("It is a cat\n");
 800396c:	4815      	ldr	r0, [pc, #84]	; (80039c4 <StartDefaultTask+0x2c8>)
 800396e:	f004 f843 	bl	80079f8 <puts>
 printf("time is %d\n",tick);
 8003972:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003974:	4814      	ldr	r0, [pc, #80]	; (80039c8 <StartDefaultTask+0x2cc>)
 8003976:	f003 ffcb 	bl	8007910 <iprintf>
    osDelay(1);
 800397a:	2001      	movs	r0, #1
 800397c:	f002 fdbf 	bl	80064fe <osDelay>
  {
 8003980:	e6c0      	b.n	8003704 <StartDefaultTask+0x8>
 8003982:	bf00      	nop
 8003984:	080087e0 	.word	0x080087e0
 8003988:	2000da7c 	.word	0x2000da7c
 800398c:	08008810 	.word	0x08008810
 8003990:	0800881c 	.word	0x0800881c
 8003994:	200081bc 	.word	0x200081bc
 8003998:	2000cdf8 	.word	0x2000cdf8
 800399c:	20000960 	.word	0x20000960
 80039a0:	20000000 	.word	0x20000000
 80039a4:	20003b80 	.word	0x20003b80
 80039a8:	20000980 	.word	0x20000980
 80039ac:	20006d90 	.word	0x20006d90
 80039b0:	20003b90 	.word	0x20003b90
 80039b4:	20017afc 	.word	0x20017afc
 80039b8:	200081b0 	.word	0x200081b0
 80039bc:	20006db0 	.word	0x20006db0
 80039c0:	080087f0 	.word	0x080087f0
 80039c4:	080087f8 	.word	0x080087f8
 80039c8:	08008804 	.word	0x08008804

080039cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039dc:	d101      	bne.n	80039e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80039de:	f000 f9d9 	bl	8003d94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80039e2:	bf00      	nop
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039ea:	b480      	push	{r7}
 80039ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80039ee:	bf00      	nop
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80039fe:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <HAL_MspInit+0x4c>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	4a10      	ldr	r2, [pc, #64]	; (8003a44 <HAL_MspInit+0x4c>)
 8003a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a08:	6413      	str	r3, [r2, #64]	; 0x40
 8003a0a:	4b0e      	ldr	r3, [pc, #56]	; (8003a44 <HAL_MspInit+0x4c>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a12:	607b      	str	r3, [r7, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a16:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <HAL_MspInit+0x4c>)
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	4a0a      	ldr	r2, [pc, #40]	; (8003a44 <HAL_MspInit+0x4c>)
 8003a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a20:	6453      	str	r3, [r2, #68]	; 0x44
 8003a22:	4b08      	ldr	r3, [pc, #32]	; (8003a44 <HAL_MspInit+0x4c>)
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a2a:	603b      	str	r3, [r7, #0]
 8003a2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a2e:	2200      	movs	r2, #0
 8003a30:	210f      	movs	r1, #15
 8003a32:	f06f 0001 	mvn.w	r0, #1
 8003a36:	f000 fa85 	bl	8003f44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40023800 	.word	0x40023800

08003a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08a      	sub	sp, #40	; 0x28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a50:	f107 0314 	add.w	r3, r7, #20
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	605a      	str	r2, [r3, #4]
 8003a5a:	609a      	str	r2, [r3, #8]
 8003a5c:	60da      	str	r2, [r3, #12]
 8003a5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a17      	ldr	r2, [pc, #92]	; (8003ac4 <HAL_UART_MspInit+0x7c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d127      	bne.n	8003aba <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8003a6a:	4b17      	ldr	r3, [pc, #92]	; (8003ac8 <HAL_UART_MspInit+0x80>)
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6e:	4a16      	ldr	r2, [pc, #88]	; (8003ac8 <HAL_UART_MspInit+0x80>)
 8003a70:	f043 0320 	orr.w	r3, r3, #32
 8003a74:	6453      	str	r3, [r2, #68]	; 0x44
 8003a76:	4b14      	ldr	r3, [pc, #80]	; (8003ac8 <HAL_UART_MspInit+0x80>)
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	f003 0320 	and.w	r3, r3, #32
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a82:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <HAL_UART_MspInit+0x80>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	4a10      	ldr	r2, [pc, #64]	; (8003ac8 <HAL_UART_MspInit+0x80>)
 8003a88:	f043 0304 	orr.w	r3, r3, #4
 8003a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a8e:	4b0e      	ldr	r3, [pc, #56]	; (8003ac8 <HAL_UART_MspInit+0x80>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a9a:	23c0      	movs	r3, #192	; 0xc0
 8003a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003aaa:	2308      	movs	r3, #8
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aae:	f107 0314 	add.w	r3, r7, #20
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4805      	ldr	r0, [pc, #20]	; (8003acc <HAL_UART_MspInit+0x84>)
 8003ab6:	f000 fa6f 	bl	8003f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003aba:	bf00      	nop
 8003abc:	3728      	adds	r7, #40	; 0x28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40011400 	.word	0x40011400
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	40020800 	.word	0x40020800

08003ad0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08c      	sub	sp, #48	; 0x30
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	201c      	movs	r0, #28
 8003ae6:	f000 fa2d 	bl	8003f44 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8003aea:	201c      	movs	r0, #28
 8003aec:	f000 fa46 	bl	8003f7c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003af0:	4b20      	ldr	r3, [pc, #128]	; (8003b74 <HAL_InitTick+0xa4>)
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	4a1f      	ldr	r2, [pc, #124]	; (8003b74 <HAL_InitTick+0xa4>)
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	6413      	str	r3, [r2, #64]	; 0x40
 8003afc:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <HAL_InitTick+0xa4>)
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b08:	f107 0210 	add.w	r2, r7, #16
 8003b0c:	f107 0314 	add.w	r3, r7, #20
 8003b10:	4611      	mov	r1, r2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f001 f8de 	bl	8004cd4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003b18:	f001 f8b4 	bl	8004c84 <HAL_RCC_GetPCLK1Freq>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b24:	4a14      	ldr	r2, [pc, #80]	; (8003b78 <HAL_InitTick+0xa8>)
 8003b26:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2a:	0c9b      	lsrs	r3, r3, #18
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8003b30:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <HAL_InitTick+0xac>)
 8003b32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b36:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8003b38:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <HAL_InitTick+0xac>)
 8003b3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b3e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8003b40:	4a0e      	ldr	r2, [pc, #56]	; (8003b7c <HAL_InitTick+0xac>)
 8003b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b44:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8003b46:	4b0d      	ldr	r3, [pc, #52]	; (8003b7c <HAL_InitTick+0xac>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_InitTick+0xac>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8003b52:	480a      	ldr	r0, [pc, #40]	; (8003b7c <HAL_InitTick+0xac>)
 8003b54:	f001 fd16 	bl	8005584 <HAL_TIM_Base_Init>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d104      	bne.n	8003b68 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8003b5e:	4807      	ldr	r0, [pc, #28]	; (8003b7c <HAL_InitTick+0xac>)
 8003b60:	f001 fd46 	bl	80055f0 <HAL_TIM_Base_Start_IT>
 8003b64:	4603      	mov	r3, r0
 8003b66:	e000      	b.n	8003b6a <HAL_InitTick+0x9a>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3730      	adds	r7, #48	; 0x30
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40023800 	.word	0x40023800
 8003b78:	431bde83 	.word	0x431bde83
 8003b7c:	20017b08 	.word	0x20017b08

08003b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b84:	bf00      	nop
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b92:	e7fe      	b.n	8003b92 <HardFault_Handler+0x4>

08003b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b98:	e7fe      	b.n	8003b98 <MemManage_Handler+0x4>

08003b9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b9e:	e7fe      	b.n	8003b9e <BusFault_Handler+0x4>

08003ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ba4:	e7fe      	b.n	8003ba4 <UsageFault_Handler+0x4>

08003ba6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003baa:	bf00      	nop
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003bb8:	4802      	ldr	r0, [pc, #8]	; (8003bc4 <TIM2_IRQHandler+0x10>)
 8003bba:	f001 fd43 	bl	8005644 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20017b08 	.word	0x20017b08

08003bc8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	e00a      	b.n	8003bf0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003bda:	f3af 8000 	nop.w
 8003bde:	4601      	mov	r1, r0
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	60ba      	str	r2, [r7, #8]
 8003be6:	b2ca      	uxtb	r2, r1
 8003be8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	3301      	adds	r3, #1
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	dbf0      	blt.n	8003bda <_read+0x12>
	}

return len;
 8003bf8:	687b      	ldr	r3, [r7, #4]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b086      	sub	sp, #24
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c0e:	2300      	movs	r3, #0
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	e009      	b.n	8003c28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	60ba      	str	r2, [r7, #8]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff fc5f 	bl	80034e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	3301      	adds	r3, #1
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	dbf1      	blt.n	8003c14 <_write+0x12>
	}
	return len;
 8003c30:	687b      	ldr	r3, [r7, #4]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <_close>:

int _close(int file)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
	return -1;
 8003c42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c62:	605a      	str	r2, [r3, #4]
	return 0;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <_isatty>:

int _isatty(int file)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
	return 1;
 8003c7a:	2301      	movs	r3, #1
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
	return 0;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003cac:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <_sbrk+0x50>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d102      	bne.n	8003cba <_sbrk+0x16>
		heap_end = &end;
 8003cb4:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <_sbrk+0x50>)
 8003cb6:	4a10      	ldr	r2, [pc, #64]	; (8003cf8 <_sbrk+0x54>)
 8003cb8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003cba:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <_sbrk+0x50>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003cc0:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <_sbrk+0x50>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	466a      	mov	r2, sp
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d907      	bls.n	8003cde <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003cce:	f003 fdd3 	bl	8007878 <__errno>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	230c      	movs	r3, #12
 8003cd6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cdc:	e006      	b.n	8003cec <_sbrk+0x48>
	}

	heap_end += incr;
 8003cde:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <_sbrk+0x50>)
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	4a03      	ldr	r2, [pc, #12]	; (8003cf4 <_sbrk+0x50>)
 8003ce8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003cea:	68fb      	ldr	r3, [r7, #12]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	200090a0 	.word	0x200090a0
 8003cf8:	20017b50 	.word	0x20017b50

08003cfc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d00:	4b08      	ldr	r3, [pc, #32]	; (8003d24 <SystemInit+0x28>)
 8003d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d06:	4a07      	ldr	r2, [pc, #28]	; (8003d24 <SystemInit+0x28>)
 8003d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d10:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <SystemInit+0x28>)
 8003d12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d16:	609a      	str	r2, [r3, #8]
#endif
}
 8003d18:	bf00      	nop
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	e000ed00 	.word	0xe000ed00

08003d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d2e:	e003      	b.n	8003d38 <LoopCopyDataInit>

08003d30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d30:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003d32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d36:	3104      	adds	r1, #4

08003d38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d38:	480b      	ldr	r0, [pc, #44]	; (8003d68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d3a:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d40:	d3f6      	bcc.n	8003d30 <CopyDataInit>
  ldr  r2, =_sbss
 8003d42:	4a0b      	ldr	r2, [pc, #44]	; (8003d70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d44:	e002      	b.n	8003d4c <LoopFillZerobss>

08003d46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d48:	f842 3b04 	str.w	r3, [r2], #4

08003d4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d4c:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d50:	d3f9      	bcc.n	8003d46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003d52:	f7ff ffd3 	bl	8003cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d56:	f003 fd95 	bl	8007884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d5a:	f7ff fbd3 	bl	8003504 <main>
  bx  lr    
 8003d5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d60:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003d64:	080088f0 	.word	0x080088f0
  ldr  r0, =_sdata
 8003d68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d6c:	20008e30 	.word	0x20008e30
  ldr  r2, =_sbss
 8003d70:	20008e30 	.word	0x20008e30
  ldr  r3, = _ebss
 8003d74:	20017b50 	.word	0x20017b50

08003d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d78:	e7fe      	b.n	8003d78 <ADC_IRQHandler>

08003d7a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d7e:	2003      	movs	r0, #3
 8003d80:	f000 f8d5 	bl	8003f2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d84:	2000      	movs	r0, #0
 8003d86:	f7ff fea3 	bl	8003ad0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003d8a:	f7ff fe35 	bl	80039f8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d98:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <HAL_IncTick+0x20>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <HAL_IncTick+0x24>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4413      	add	r3, r2
 8003da4:	4a04      	ldr	r2, [pc, #16]	; (8003db8 <HAL_IncTick+0x24>)
 8003da6:	6013      	str	r3, [r2, #0]
}
 8003da8:	bf00      	nop
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20008dc4 	.word	0x20008dc4
 8003db8:	20017b48 	.word	0x20017b48

08003dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8003dc0:	4b03      	ldr	r3, [pc, #12]	; (8003dd0 <HAL_GetTick+0x14>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	20017b48 	.word	0x20017b48

08003dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <__NVIC_SetPriorityGrouping+0x40>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003df0:	4013      	ands	r3, r2
 8003df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <__NVIC_SetPriorityGrouping+0x44>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e02:	4a04      	ldr	r2, [pc, #16]	; (8003e14 <__NVIC_SetPriorityGrouping+0x40>)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	60d3      	str	r3, [r2, #12]
}
 8003e08:	bf00      	nop
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	e000ed00 	.word	0xe000ed00
 8003e18:	05fa0000 	.word	0x05fa0000

08003e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e20:	4b04      	ldr	r3, [pc, #16]	; (8003e34 <__NVIC_GetPriorityGrouping+0x18>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	0a1b      	lsrs	r3, r3, #8
 8003e26:	f003 0307 	and.w	r3, r3, #7
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	e000ed00 	.word	0xe000ed00

08003e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	db0b      	blt.n	8003e62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	f003 021f 	and.w	r2, r3, #31
 8003e50:	4907      	ldr	r1, [pc, #28]	; (8003e70 <__NVIC_EnableIRQ+0x38>)
 8003e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	2001      	movs	r0, #1
 8003e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	e000e100 	.word	0xe000e100

08003e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	6039      	str	r1, [r7, #0]
 8003e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	db0a      	blt.n	8003e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	490c      	ldr	r1, [pc, #48]	; (8003ec0 <__NVIC_SetPriority+0x4c>)
 8003e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e92:	0112      	lsls	r2, r2, #4
 8003e94:	b2d2      	uxtb	r2, r2
 8003e96:	440b      	add	r3, r1
 8003e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e9c:	e00a      	b.n	8003eb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	4908      	ldr	r1, [pc, #32]	; (8003ec4 <__NVIC_SetPriority+0x50>)
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	3b04      	subs	r3, #4
 8003eac:	0112      	lsls	r2, r2, #4
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	761a      	strb	r2, [r3, #24]
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	e000e100 	.word	0xe000e100
 8003ec4:	e000ed00 	.word	0xe000ed00

08003ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b089      	sub	sp, #36	; 0x24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f1c3 0307 	rsb	r3, r3, #7
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	bf28      	it	cs
 8003ee6:	2304      	movcs	r3, #4
 8003ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	3304      	adds	r3, #4
 8003eee:	2b06      	cmp	r3, #6
 8003ef0:	d902      	bls.n	8003ef8 <NVIC_EncodePriority+0x30>
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	3b03      	subs	r3, #3
 8003ef6:	e000      	b.n	8003efa <NVIC_EncodePriority+0x32>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003efc:	f04f 32ff 	mov.w	r2, #4294967295
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	43da      	mvns	r2, r3
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	401a      	ands	r2, r3
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f10:	f04f 31ff 	mov.w	r1, #4294967295
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1a:	43d9      	mvns	r1, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f20:	4313      	orrs	r3, r2
         );
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3724      	adds	r7, #36	; 0x24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b082      	sub	sp, #8
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff ff4c 	bl	8003dd4 <__NVIC_SetPriorityGrouping>
}
 8003f3c:	bf00      	nop
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
 8003f50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f52:	2300      	movs	r3, #0
 8003f54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f56:	f7ff ff61 	bl	8003e1c <__NVIC_GetPriorityGrouping>
 8003f5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	68b9      	ldr	r1, [r7, #8]
 8003f60:	6978      	ldr	r0, [r7, #20]
 8003f62:	f7ff ffb1 	bl	8003ec8 <NVIC_EncodePriority>
 8003f66:	4602      	mov	r2, r0
 8003f68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff ff80 	bl	8003e74 <__NVIC_SetPriority>
}
 8003f74:	bf00      	nop
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	4603      	mov	r3, r0
 8003f84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff ff54 	bl	8003e38 <__NVIC_EnableIRQ>
}
 8003f90:	bf00      	nop
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b089      	sub	sp, #36	; 0x24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003faa:	2300      	movs	r3, #0
 8003fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	61fb      	str	r3, [r7, #28]
 8003fb6:	e175      	b.n	80042a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003fb8:	2201      	movs	r2, #1
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	f040 8164 	bne.w	800429e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d00b      	beq.n	8003ff6 <HAL_GPIO_Init+0x5e>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d007      	beq.n	8003ff6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fea:	2b11      	cmp	r3, #17
 8003fec:	d003      	beq.n	8003ff6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b12      	cmp	r3, #18
 8003ff4:	d130      	bne.n	8004058 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	2203      	movs	r2, #3
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	43db      	mvns	r3, r3
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	4013      	ands	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	4313      	orrs	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800402c:	2201      	movs	r2, #1
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	43db      	mvns	r3, r3
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	4013      	ands	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	091b      	lsrs	r3, r3, #4
 8004042:	f003 0201 	and.w	r2, r3, #1
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4313      	orrs	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	2203      	movs	r2, #3
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	43db      	mvns	r3, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4013      	ands	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4313      	orrs	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2b02      	cmp	r3, #2
 800408e:	d003      	beq.n	8004098 <HAL_GPIO_Init+0x100>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	2b12      	cmp	r3, #18
 8004096:	d123      	bne.n	80040e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	08da      	lsrs	r2, r3, #3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3208      	adds	r2, #8
 80040a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	220f      	movs	r2, #15
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	43db      	mvns	r3, r3
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4013      	ands	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	08da      	lsrs	r2, r3, #3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3208      	adds	r2, #8
 80040da:	69b9      	ldr	r1, [r7, #24]
 80040dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	2203      	movs	r2, #3
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	43db      	mvns	r3, r3
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	4013      	ands	r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f003 0203 	and.w	r2, r3, #3
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	4313      	orrs	r3, r2
 800410c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 80be 	beq.w	800429e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004122:	4b65      	ldr	r3, [pc, #404]	; (80042b8 <HAL_GPIO_Init+0x320>)
 8004124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004126:	4a64      	ldr	r2, [pc, #400]	; (80042b8 <HAL_GPIO_Init+0x320>)
 8004128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800412c:	6453      	str	r3, [r2, #68]	; 0x44
 800412e:	4b62      	ldr	r3, [pc, #392]	; (80042b8 <HAL_GPIO_Init+0x320>)
 8004130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800413a:	4a60      	ldr	r2, [pc, #384]	; (80042bc <HAL_GPIO_Init+0x324>)
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	089b      	lsrs	r3, r3, #2
 8004140:	3302      	adds	r3, #2
 8004142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004146:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	220f      	movs	r2, #15
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	43db      	mvns	r3, r3
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	4013      	ands	r3, r2
 800415c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a57      	ldr	r2, [pc, #348]	; (80042c0 <HAL_GPIO_Init+0x328>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d037      	beq.n	80041d6 <HAL_GPIO_Init+0x23e>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a56      	ldr	r2, [pc, #344]	; (80042c4 <HAL_GPIO_Init+0x32c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d031      	beq.n	80041d2 <HAL_GPIO_Init+0x23a>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a55      	ldr	r2, [pc, #340]	; (80042c8 <HAL_GPIO_Init+0x330>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d02b      	beq.n	80041ce <HAL_GPIO_Init+0x236>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a54      	ldr	r2, [pc, #336]	; (80042cc <HAL_GPIO_Init+0x334>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d025      	beq.n	80041ca <HAL_GPIO_Init+0x232>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a53      	ldr	r2, [pc, #332]	; (80042d0 <HAL_GPIO_Init+0x338>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d01f      	beq.n	80041c6 <HAL_GPIO_Init+0x22e>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a52      	ldr	r2, [pc, #328]	; (80042d4 <HAL_GPIO_Init+0x33c>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d019      	beq.n	80041c2 <HAL_GPIO_Init+0x22a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a51      	ldr	r2, [pc, #324]	; (80042d8 <HAL_GPIO_Init+0x340>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d013      	beq.n	80041be <HAL_GPIO_Init+0x226>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a50      	ldr	r2, [pc, #320]	; (80042dc <HAL_GPIO_Init+0x344>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00d      	beq.n	80041ba <HAL_GPIO_Init+0x222>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a4f      	ldr	r2, [pc, #316]	; (80042e0 <HAL_GPIO_Init+0x348>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d007      	beq.n	80041b6 <HAL_GPIO_Init+0x21e>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a4e      	ldr	r2, [pc, #312]	; (80042e4 <HAL_GPIO_Init+0x34c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d101      	bne.n	80041b2 <HAL_GPIO_Init+0x21a>
 80041ae:	2309      	movs	r3, #9
 80041b0:	e012      	b.n	80041d8 <HAL_GPIO_Init+0x240>
 80041b2:	230a      	movs	r3, #10
 80041b4:	e010      	b.n	80041d8 <HAL_GPIO_Init+0x240>
 80041b6:	2308      	movs	r3, #8
 80041b8:	e00e      	b.n	80041d8 <HAL_GPIO_Init+0x240>
 80041ba:	2307      	movs	r3, #7
 80041bc:	e00c      	b.n	80041d8 <HAL_GPIO_Init+0x240>
 80041be:	2306      	movs	r3, #6
 80041c0:	e00a      	b.n	80041d8 <HAL_GPIO_Init+0x240>
 80041c2:	2305      	movs	r3, #5
 80041c4:	e008      	b.n	80041d8 <HAL_GPIO_Init+0x240>
 80041c6:	2304      	movs	r3, #4
 80041c8:	e006      	b.n	80041d8 <HAL_GPIO_Init+0x240>
 80041ca:	2303      	movs	r3, #3
 80041cc:	e004      	b.n	80041d8 <HAL_GPIO_Init+0x240>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e002      	b.n	80041d8 <HAL_GPIO_Init+0x240>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <HAL_GPIO_Init+0x240>
 80041d6:	2300      	movs	r3, #0
 80041d8:	69fa      	ldr	r2, [r7, #28]
 80041da:	f002 0203 	and.w	r2, r2, #3
 80041de:	0092      	lsls	r2, r2, #2
 80041e0:	4093      	lsls	r3, r2
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80041e8:	4934      	ldr	r1, [pc, #208]	; (80042bc <HAL_GPIO_Init+0x324>)
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	089b      	lsrs	r3, r3, #2
 80041ee:	3302      	adds	r3, #2
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041f6:	4b3c      	ldr	r3, [pc, #240]	; (80042e8 <HAL_GPIO_Init+0x350>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	43db      	mvns	r3, r3
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	4013      	ands	r3, r2
 8004204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800421a:	4a33      	ldr	r2, [pc, #204]	; (80042e8 <HAL_GPIO_Init+0x350>)
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004220:	4b31      	ldr	r3, [pc, #196]	; (80042e8 <HAL_GPIO_Init+0x350>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	43db      	mvns	r3, r3
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4013      	ands	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004244:	4a28      	ldr	r2, [pc, #160]	; (80042e8 <HAL_GPIO_Init+0x350>)
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800424a:	4b27      	ldr	r3, [pc, #156]	; (80042e8 <HAL_GPIO_Init+0x350>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	43db      	mvns	r3, r3
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	4013      	ands	r3, r2
 8004258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	4313      	orrs	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800426e:	4a1e      	ldr	r2, [pc, #120]	; (80042e8 <HAL_GPIO_Init+0x350>)
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004274:	4b1c      	ldr	r3, [pc, #112]	; (80042e8 <HAL_GPIO_Init+0x350>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	43db      	mvns	r3, r3
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	4013      	ands	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004298:	4a13      	ldr	r2, [pc, #76]	; (80042e8 <HAL_GPIO_Init+0x350>)
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	3301      	adds	r3, #1
 80042a2:	61fb      	str	r3, [r7, #28]
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	2b0f      	cmp	r3, #15
 80042a8:	f67f ae86 	bls.w	8003fb8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80042ac:	bf00      	nop
 80042ae:	3724      	adds	r7, #36	; 0x24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	40023800 	.word	0x40023800
 80042bc:	40013800 	.word	0x40013800
 80042c0:	40020000 	.word	0x40020000
 80042c4:	40020400 	.word	0x40020400
 80042c8:	40020800 	.word	0x40020800
 80042cc:	40020c00 	.word	0x40020c00
 80042d0:	40021000 	.word	0x40021000
 80042d4:	40021400 	.word	0x40021400
 80042d8:	40021800 	.word	0x40021800
 80042dc:	40021c00 	.word	0x40021c00
 80042e0:	40022000 	.word	0x40022000
 80042e4:	40022400 	.word	0x40022400
 80042e8:	40013c00 	.word	0x40013c00

080042ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80042f6:	4b23      	ldr	r3, [pc, #140]	; (8004384 <HAL_PWREx_EnableOverDrive+0x98>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	4a22      	ldr	r2, [pc, #136]	; (8004384 <HAL_PWREx_EnableOverDrive+0x98>)
 80042fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004300:	6413      	str	r3, [r2, #64]	; 0x40
 8004302:	4b20      	ldr	r3, [pc, #128]	; (8004384 <HAL_PWREx_EnableOverDrive+0x98>)
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800430e:	4b1e      	ldr	r3, [pc, #120]	; (8004388 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a1d      	ldr	r2, [pc, #116]	; (8004388 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004318:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800431a:	f7ff fd4f 	bl	8003dbc <HAL_GetTick>
 800431e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004320:	e009      	b.n	8004336 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004322:	f7ff fd4b 	bl	8003dbc <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004330:	d901      	bls.n	8004336 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e022      	b.n	800437c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004336:	4b14      	ldr	r3, [pc, #80]	; (8004388 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800433e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004342:	d1ee      	bne.n	8004322 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004344:	4b10      	ldr	r3, [pc, #64]	; (8004388 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a0f      	ldr	r2, [pc, #60]	; (8004388 <HAL_PWREx_EnableOverDrive+0x9c>)
 800434a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800434e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004350:	f7ff fd34 	bl	8003dbc <HAL_GetTick>
 8004354:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004356:	e009      	b.n	800436c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004358:	f7ff fd30 	bl	8003dbc <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004366:	d901      	bls.n	800436c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e007      	b.n	800437c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800436c:	4b06      	ldr	r3, [pc, #24]	; (8004388 <HAL_PWREx_EnableOverDrive+0x9c>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004374:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004378:	d1ee      	bne.n	8004358 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40023800 	.word	0x40023800
 8004388:	40007000 	.word	0x40007000

0800438c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004394:	2300      	movs	r3, #0
 8004396:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e29b      	b.n	80048da <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 8087 	beq.w	80044be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043b0:	4b96      	ldr	r3, [pc, #600]	; (800460c <HAL_RCC_OscConfig+0x280>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f003 030c 	and.w	r3, r3, #12
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d00c      	beq.n	80043d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043bc:	4b93      	ldr	r3, [pc, #588]	; (800460c <HAL_RCC_OscConfig+0x280>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 030c 	and.w	r3, r3, #12
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d112      	bne.n	80043ee <HAL_RCC_OscConfig+0x62>
 80043c8:	4b90      	ldr	r3, [pc, #576]	; (800460c <HAL_RCC_OscConfig+0x280>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043d4:	d10b      	bne.n	80043ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d6:	4b8d      	ldr	r3, [pc, #564]	; (800460c <HAL_RCC_OscConfig+0x280>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d06c      	beq.n	80044bc <HAL_RCC_OscConfig+0x130>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d168      	bne.n	80044bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e275      	b.n	80048da <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f6:	d106      	bne.n	8004406 <HAL_RCC_OscConfig+0x7a>
 80043f8:	4b84      	ldr	r3, [pc, #528]	; (800460c <HAL_RCC_OscConfig+0x280>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a83      	ldr	r2, [pc, #524]	; (800460c <HAL_RCC_OscConfig+0x280>)
 80043fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	e02e      	b.n	8004464 <HAL_RCC_OscConfig+0xd8>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10c      	bne.n	8004428 <HAL_RCC_OscConfig+0x9c>
 800440e:	4b7f      	ldr	r3, [pc, #508]	; (800460c <HAL_RCC_OscConfig+0x280>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a7e      	ldr	r2, [pc, #504]	; (800460c <HAL_RCC_OscConfig+0x280>)
 8004414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	4b7c      	ldr	r3, [pc, #496]	; (800460c <HAL_RCC_OscConfig+0x280>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a7b      	ldr	r2, [pc, #492]	; (800460c <HAL_RCC_OscConfig+0x280>)
 8004420:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	e01d      	b.n	8004464 <HAL_RCC_OscConfig+0xd8>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004430:	d10c      	bne.n	800444c <HAL_RCC_OscConfig+0xc0>
 8004432:	4b76      	ldr	r3, [pc, #472]	; (800460c <HAL_RCC_OscConfig+0x280>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a75      	ldr	r2, [pc, #468]	; (800460c <HAL_RCC_OscConfig+0x280>)
 8004438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	4b73      	ldr	r3, [pc, #460]	; (800460c <HAL_RCC_OscConfig+0x280>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a72      	ldr	r2, [pc, #456]	; (800460c <HAL_RCC_OscConfig+0x280>)
 8004444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004448:	6013      	str	r3, [r2, #0]
 800444a:	e00b      	b.n	8004464 <HAL_RCC_OscConfig+0xd8>
 800444c:	4b6f      	ldr	r3, [pc, #444]	; (800460c <HAL_RCC_OscConfig+0x280>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a6e      	ldr	r2, [pc, #440]	; (800460c <HAL_RCC_OscConfig+0x280>)
 8004452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004456:	6013      	str	r3, [r2, #0]
 8004458:	4b6c      	ldr	r3, [pc, #432]	; (800460c <HAL_RCC_OscConfig+0x280>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a6b      	ldr	r2, [pc, #428]	; (800460c <HAL_RCC_OscConfig+0x280>)
 800445e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d013      	beq.n	8004494 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446c:	f7ff fca6 	bl	8003dbc <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004474:	f7ff fca2 	bl	8003dbc <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b64      	cmp	r3, #100	; 0x64
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e229      	b.n	80048da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004486:	4b61      	ldr	r3, [pc, #388]	; (800460c <HAL_RCC_OscConfig+0x280>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0f0      	beq.n	8004474 <HAL_RCC_OscConfig+0xe8>
 8004492:	e014      	b.n	80044be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004494:	f7ff fc92 	bl	8003dbc <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800449c:	f7ff fc8e 	bl	8003dbc <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b64      	cmp	r3, #100	; 0x64
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e215      	b.n	80048da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ae:	4b57      	ldr	r3, [pc, #348]	; (800460c <HAL_RCC_OscConfig+0x280>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f0      	bne.n	800449c <HAL_RCC_OscConfig+0x110>
 80044ba:	e000      	b.n	80044be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d069      	beq.n	800459e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044ca:	4b50      	ldr	r3, [pc, #320]	; (800460c <HAL_RCC_OscConfig+0x280>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 030c 	and.w	r3, r3, #12
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00b      	beq.n	80044ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044d6:	4b4d      	ldr	r3, [pc, #308]	; (800460c <HAL_RCC_OscConfig+0x280>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 030c 	and.w	r3, r3, #12
 80044de:	2b08      	cmp	r3, #8
 80044e0:	d11c      	bne.n	800451c <HAL_RCC_OscConfig+0x190>
 80044e2:	4b4a      	ldr	r3, [pc, #296]	; (800460c <HAL_RCC_OscConfig+0x280>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d116      	bne.n	800451c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ee:	4b47      	ldr	r3, [pc, #284]	; (800460c <HAL_RCC_OscConfig+0x280>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d005      	beq.n	8004506 <HAL_RCC_OscConfig+0x17a>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d001      	beq.n	8004506 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e1e9      	b.n	80048da <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004506:	4b41      	ldr	r3, [pc, #260]	; (800460c <HAL_RCC_OscConfig+0x280>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	493d      	ldr	r1, [pc, #244]	; (800460c <HAL_RCC_OscConfig+0x280>)
 8004516:	4313      	orrs	r3, r2
 8004518:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800451a:	e040      	b.n	800459e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d023      	beq.n	800456c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004524:	4b39      	ldr	r3, [pc, #228]	; (800460c <HAL_RCC_OscConfig+0x280>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a38      	ldr	r2, [pc, #224]	; (800460c <HAL_RCC_OscConfig+0x280>)
 800452a:	f043 0301 	orr.w	r3, r3, #1
 800452e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004530:	f7ff fc44 	bl	8003dbc <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004538:	f7ff fc40 	bl	8003dbc <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e1c7      	b.n	80048da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800454a:	4b30      	ldr	r3, [pc, #192]	; (800460c <HAL_RCC_OscConfig+0x280>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0f0      	beq.n	8004538 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004556:	4b2d      	ldr	r3, [pc, #180]	; (800460c <HAL_RCC_OscConfig+0x280>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	4929      	ldr	r1, [pc, #164]	; (800460c <HAL_RCC_OscConfig+0x280>)
 8004566:	4313      	orrs	r3, r2
 8004568:	600b      	str	r3, [r1, #0]
 800456a:	e018      	b.n	800459e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800456c:	4b27      	ldr	r3, [pc, #156]	; (800460c <HAL_RCC_OscConfig+0x280>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a26      	ldr	r2, [pc, #152]	; (800460c <HAL_RCC_OscConfig+0x280>)
 8004572:	f023 0301 	bic.w	r3, r3, #1
 8004576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004578:	f7ff fc20 	bl	8003dbc <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004580:	f7ff fc1c 	bl	8003dbc <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e1a3      	b.n	80048da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004592:	4b1e      	ldr	r3, [pc, #120]	; (800460c <HAL_RCC_OscConfig+0x280>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f0      	bne.n	8004580 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0308 	and.w	r3, r3, #8
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d038      	beq.n	800461c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d019      	beq.n	80045e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045b2:	4b16      	ldr	r3, [pc, #88]	; (800460c <HAL_RCC_OscConfig+0x280>)
 80045b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b6:	4a15      	ldr	r2, [pc, #84]	; (800460c <HAL_RCC_OscConfig+0x280>)
 80045b8:	f043 0301 	orr.w	r3, r3, #1
 80045bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045be:	f7ff fbfd 	bl	8003dbc <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045c6:	f7ff fbf9 	bl	8003dbc <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e180      	b.n	80048da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045d8:	4b0c      	ldr	r3, [pc, #48]	; (800460c <HAL_RCC_OscConfig+0x280>)
 80045da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0f0      	beq.n	80045c6 <HAL_RCC_OscConfig+0x23a>
 80045e4:	e01a      	b.n	800461c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045e6:	4b09      	ldr	r3, [pc, #36]	; (800460c <HAL_RCC_OscConfig+0x280>)
 80045e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ea:	4a08      	ldr	r2, [pc, #32]	; (800460c <HAL_RCC_OscConfig+0x280>)
 80045ec:	f023 0301 	bic.w	r3, r3, #1
 80045f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f2:	f7ff fbe3 	bl	8003dbc <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f8:	e00a      	b.n	8004610 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045fa:	f7ff fbdf 	bl	8003dbc <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d903      	bls.n	8004610 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e166      	b.n	80048da <HAL_RCC_OscConfig+0x54e>
 800460c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004610:	4b92      	ldr	r3, [pc, #584]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 8004612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1ee      	bne.n	80045fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 80a4 	beq.w	8004772 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800462a:	4b8c      	ldr	r3, [pc, #560]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10d      	bne.n	8004652 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004636:	4b89      	ldr	r3, [pc, #548]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	4a88      	ldr	r2, [pc, #544]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 800463c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004640:	6413      	str	r3, [r2, #64]	; 0x40
 8004642:	4b86      	ldr	r3, [pc, #536]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464a:	60bb      	str	r3, [r7, #8]
 800464c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800464e:	2301      	movs	r3, #1
 8004650:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004652:	4b83      	ldr	r3, [pc, #524]	; (8004860 <HAL_RCC_OscConfig+0x4d4>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465a:	2b00      	cmp	r3, #0
 800465c:	d118      	bne.n	8004690 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800465e:	4b80      	ldr	r3, [pc, #512]	; (8004860 <HAL_RCC_OscConfig+0x4d4>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a7f      	ldr	r2, [pc, #508]	; (8004860 <HAL_RCC_OscConfig+0x4d4>)
 8004664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800466a:	f7ff fba7 	bl	8003dbc <HAL_GetTick>
 800466e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004670:	e008      	b.n	8004684 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004672:	f7ff fba3 	bl	8003dbc <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b64      	cmp	r3, #100	; 0x64
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e12a      	b.n	80048da <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004684:	4b76      	ldr	r3, [pc, #472]	; (8004860 <HAL_RCC_OscConfig+0x4d4>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0f0      	beq.n	8004672 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d106      	bne.n	80046a6 <HAL_RCC_OscConfig+0x31a>
 8004698:	4b70      	ldr	r3, [pc, #448]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 800469a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469c:	4a6f      	ldr	r2, [pc, #444]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 800469e:	f043 0301 	orr.w	r3, r3, #1
 80046a2:	6713      	str	r3, [r2, #112]	; 0x70
 80046a4:	e02d      	b.n	8004702 <HAL_RCC_OscConfig+0x376>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10c      	bne.n	80046c8 <HAL_RCC_OscConfig+0x33c>
 80046ae:	4b6b      	ldr	r3, [pc, #428]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 80046b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b2:	4a6a      	ldr	r2, [pc, #424]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 80046b4:	f023 0301 	bic.w	r3, r3, #1
 80046b8:	6713      	str	r3, [r2, #112]	; 0x70
 80046ba:	4b68      	ldr	r3, [pc, #416]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 80046bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046be:	4a67      	ldr	r2, [pc, #412]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 80046c0:	f023 0304 	bic.w	r3, r3, #4
 80046c4:	6713      	str	r3, [r2, #112]	; 0x70
 80046c6:	e01c      	b.n	8004702 <HAL_RCC_OscConfig+0x376>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	2b05      	cmp	r3, #5
 80046ce:	d10c      	bne.n	80046ea <HAL_RCC_OscConfig+0x35e>
 80046d0:	4b62      	ldr	r3, [pc, #392]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 80046d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d4:	4a61      	ldr	r2, [pc, #388]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 80046d6:	f043 0304 	orr.w	r3, r3, #4
 80046da:	6713      	str	r3, [r2, #112]	; 0x70
 80046dc:	4b5f      	ldr	r3, [pc, #380]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 80046de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e0:	4a5e      	ldr	r2, [pc, #376]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 80046e2:	f043 0301 	orr.w	r3, r3, #1
 80046e6:	6713      	str	r3, [r2, #112]	; 0x70
 80046e8:	e00b      	b.n	8004702 <HAL_RCC_OscConfig+0x376>
 80046ea:	4b5c      	ldr	r3, [pc, #368]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	4a5b      	ldr	r2, [pc, #364]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 80046f0:	f023 0301 	bic.w	r3, r3, #1
 80046f4:	6713      	str	r3, [r2, #112]	; 0x70
 80046f6:	4b59      	ldr	r3, [pc, #356]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 80046f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fa:	4a58      	ldr	r2, [pc, #352]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 80046fc:	f023 0304 	bic.w	r3, r3, #4
 8004700:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d015      	beq.n	8004736 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470a:	f7ff fb57 	bl	8003dbc <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004710:	e00a      	b.n	8004728 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004712:	f7ff fb53 	bl	8003dbc <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004720:	4293      	cmp	r3, r2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e0d8      	b.n	80048da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004728:	4b4c      	ldr	r3, [pc, #304]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 800472a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0ee      	beq.n	8004712 <HAL_RCC_OscConfig+0x386>
 8004734:	e014      	b.n	8004760 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004736:	f7ff fb41 	bl	8003dbc <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800473c:	e00a      	b.n	8004754 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800473e:	f7ff fb3d 	bl	8003dbc <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	f241 3288 	movw	r2, #5000	; 0x1388
 800474c:	4293      	cmp	r3, r2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e0c2      	b.n	80048da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004754:	4b41      	ldr	r3, [pc, #260]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 8004756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1ee      	bne.n	800473e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004760:	7dfb      	ldrb	r3, [r7, #23]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d105      	bne.n	8004772 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004766:	4b3d      	ldr	r3, [pc, #244]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	4a3c      	ldr	r2, [pc, #240]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 800476c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004770:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 80ae 	beq.w	80048d8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800477c:	4b37      	ldr	r3, [pc, #220]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 030c 	and.w	r3, r3, #12
 8004784:	2b08      	cmp	r3, #8
 8004786:	d06d      	beq.n	8004864 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	2b02      	cmp	r3, #2
 800478e:	d14b      	bne.n	8004828 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004790:	4b32      	ldr	r3, [pc, #200]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a31      	ldr	r2, [pc, #196]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 8004796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800479a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479c:	f7ff fb0e 	bl	8003dbc <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a4:	f7ff fb0a 	bl	8003dbc <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e091      	b.n	80048da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b6:	4b29      	ldr	r3, [pc, #164]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f0      	bne.n	80047a4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69da      	ldr	r2, [r3, #28]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	019b      	lsls	r3, r3, #6
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	085b      	lsrs	r3, r3, #1
 80047da:	3b01      	subs	r3, #1
 80047dc:	041b      	lsls	r3, r3, #16
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e4:	061b      	lsls	r3, r3, #24
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ec:	071b      	lsls	r3, r3, #28
 80047ee:	491b      	ldr	r1, [pc, #108]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047f4:	4b19      	ldr	r3, [pc, #100]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a18      	ldr	r2, [pc, #96]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 80047fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004800:	f7ff fadc 	bl	8003dbc <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004808:	f7ff fad8 	bl	8003dbc <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e05f      	b.n	80048da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800481a:	4b10      	ldr	r3, [pc, #64]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0f0      	beq.n	8004808 <HAL_RCC_OscConfig+0x47c>
 8004826:	e057      	b.n	80048d8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004828:	4b0c      	ldr	r3, [pc, #48]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a0b      	ldr	r2, [pc, #44]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 800482e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004834:	f7ff fac2 	bl	8003dbc <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800483c:	f7ff fabe 	bl	8003dbc <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e045      	b.n	80048da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484e:	4b03      	ldr	r3, [pc, #12]	; (800485c <HAL_RCC_OscConfig+0x4d0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1f0      	bne.n	800483c <HAL_RCC_OscConfig+0x4b0>
 800485a:	e03d      	b.n	80048d8 <HAL_RCC_OscConfig+0x54c>
 800485c:	40023800 	.word	0x40023800
 8004860:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004864:	4b1f      	ldr	r3, [pc, #124]	; (80048e4 <HAL_RCC_OscConfig+0x558>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d030      	beq.n	80048d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800487c:	429a      	cmp	r2, r3
 800487e:	d129      	bne.n	80048d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800488a:	429a      	cmp	r2, r3
 800488c:	d122      	bne.n	80048d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004894:	4013      	ands	r3, r2
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800489a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800489c:	4293      	cmp	r3, r2
 800489e:	d119      	bne.n	80048d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048aa:	085b      	lsrs	r3, r3, #1
 80048ac:	3b01      	subs	r3, #1
 80048ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d10f      	bne.n	80048d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d107      	bne.n	80048d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ce:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d001      	beq.n	80048d8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e000      	b.n	80048da <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	40023800 	.word	0x40023800

080048e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e0d0      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004900:	4b6a      	ldr	r3, [pc, #424]	; (8004aac <HAL_RCC_ClockConfig+0x1c4>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d910      	bls.n	8004930 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800490e:	4b67      	ldr	r3, [pc, #412]	; (8004aac <HAL_RCC_ClockConfig+0x1c4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f023 020f 	bic.w	r2, r3, #15
 8004916:	4965      	ldr	r1, [pc, #404]	; (8004aac <HAL_RCC_ClockConfig+0x1c4>)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	4313      	orrs	r3, r2
 800491c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800491e:	4b63      	ldr	r3, [pc, #396]	; (8004aac <HAL_RCC_ClockConfig+0x1c4>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	d001      	beq.n	8004930 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e0b8      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d020      	beq.n	800497e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b00      	cmp	r3, #0
 8004946:	d005      	beq.n	8004954 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004948:	4b59      	ldr	r3, [pc, #356]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c8>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	4a58      	ldr	r2, [pc, #352]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c8>)
 800494e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004952:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0308 	and.w	r3, r3, #8
 800495c:	2b00      	cmp	r3, #0
 800495e:	d005      	beq.n	800496c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004960:	4b53      	ldr	r3, [pc, #332]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	4a52      	ldr	r2, [pc, #328]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8004966:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800496a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800496c:	4b50      	ldr	r3, [pc, #320]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c8>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	494d      	ldr	r1, [pc, #308]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c8>)
 800497a:	4313      	orrs	r3, r2
 800497c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d040      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d107      	bne.n	80049a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004992:	4b47      	ldr	r3, [pc, #284]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d115      	bne.n	80049ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e07f      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d107      	bne.n	80049ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049aa:	4b41      	ldr	r3, [pc, #260]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d109      	bne.n	80049ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e073      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ba:	4b3d      	ldr	r3, [pc, #244]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e06b      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ca:	4b39      	ldr	r3, [pc, #228]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f023 0203 	bic.w	r2, r3, #3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	4936      	ldr	r1, [pc, #216]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049dc:	f7ff f9ee 	bl	8003dbc <HAL_GetTick>
 80049e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e2:	e00a      	b.n	80049fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049e4:	f7ff f9ea 	bl	8003dbc <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e053      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049fa:	4b2d      	ldr	r3, [pc, #180]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 020c 	and.w	r2, r3, #12
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d1eb      	bne.n	80049e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a0c:	4b27      	ldr	r3, [pc, #156]	; (8004aac <HAL_RCC_ClockConfig+0x1c4>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 030f 	and.w	r3, r3, #15
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d210      	bcs.n	8004a3c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a1a:	4b24      	ldr	r3, [pc, #144]	; (8004aac <HAL_RCC_ClockConfig+0x1c4>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f023 020f 	bic.w	r2, r3, #15
 8004a22:	4922      	ldr	r1, [pc, #136]	; (8004aac <HAL_RCC_ClockConfig+0x1c4>)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2a:	4b20      	ldr	r3, [pc, #128]	; (8004aac <HAL_RCC_ClockConfig+0x1c4>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d001      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e032      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d008      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a48:	4b19      	ldr	r3, [pc, #100]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	4916      	ldr	r1, [pc, #88]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d009      	beq.n	8004a7a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a66:	4b12      	ldr	r3, [pc, #72]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	490e      	ldr	r1, [pc, #56]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a7a:	f000 f821 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8004a7e:	4601      	mov	r1, r0
 8004a80:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	091b      	lsrs	r3, r3, #4
 8004a86:	f003 030f 	and.w	r3, r3, #15
 8004a8a:	4a0a      	ldr	r2, [pc, #40]	; (8004ab4 <HAL_RCC_ClockConfig+0x1cc>)
 8004a8c:	5cd3      	ldrb	r3, [r2, r3]
 8004a8e:	fa21 f303 	lsr.w	r3, r1, r3
 8004a92:	4a09      	ldr	r2, [pc, #36]	; (8004ab8 <HAL_RCC_ClockConfig+0x1d0>)
 8004a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a96:	4b09      	ldr	r3, [pc, #36]	; (8004abc <HAL_RCC_ClockConfig+0x1d4>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff f818 	bl	8003ad0 <HAL_InitTick>

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40023c00 	.word	0x40023c00
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	08008830 	.word	0x08008830
 8004ab8:	20008dbc 	.word	0x20008dbc
 8004abc:	20008dc0 	.word	0x20008dc0

08004ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	607b      	str	r3, [r7, #4]
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	2300      	movs	r3, #0
 8004ad0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ad6:	4b63      	ldr	r3, [pc, #396]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 030c 	and.w	r3, r3, #12
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d007      	beq.n	8004af2 <HAL_RCC_GetSysClockFreq+0x32>
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	d008      	beq.n	8004af8 <HAL_RCC_GetSysClockFreq+0x38>
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f040 80b4 	bne.w	8004c54 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004aec:	4b5e      	ldr	r3, [pc, #376]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004aee:	60bb      	str	r3, [r7, #8]
      break;
 8004af0:	e0b3      	b.n	8004c5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004af2:	4b5d      	ldr	r3, [pc, #372]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004af4:	60bb      	str	r3, [r7, #8]
      break;
 8004af6:	e0b0      	b.n	8004c5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004af8:	4b5a      	ldr	r3, [pc, #360]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b00:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004b02:	4b58      	ldr	r3, [pc, #352]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d04a      	beq.n	8004ba4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b0e:	4b55      	ldr	r3, [pc, #340]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	099b      	lsrs	r3, r3, #6
 8004b14:	f04f 0400 	mov.w	r4, #0
 8004b18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	ea03 0501 	and.w	r5, r3, r1
 8004b24:	ea04 0602 	and.w	r6, r4, r2
 8004b28:	4629      	mov	r1, r5
 8004b2a:	4632      	mov	r2, r6
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	f04f 0400 	mov.w	r4, #0
 8004b34:	0154      	lsls	r4, r2, #5
 8004b36:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b3a:	014b      	lsls	r3, r1, #5
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4622      	mov	r2, r4
 8004b40:	1b49      	subs	r1, r1, r5
 8004b42:	eb62 0206 	sbc.w	r2, r2, r6
 8004b46:	f04f 0300 	mov.w	r3, #0
 8004b4a:	f04f 0400 	mov.w	r4, #0
 8004b4e:	0194      	lsls	r4, r2, #6
 8004b50:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b54:	018b      	lsls	r3, r1, #6
 8004b56:	1a5b      	subs	r3, r3, r1
 8004b58:	eb64 0402 	sbc.w	r4, r4, r2
 8004b5c:	f04f 0100 	mov.w	r1, #0
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	00e2      	lsls	r2, r4, #3
 8004b66:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b6a:	00d9      	lsls	r1, r3, #3
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4614      	mov	r4, r2
 8004b70:	195b      	adds	r3, r3, r5
 8004b72:	eb44 0406 	adc.w	r4, r4, r6
 8004b76:	f04f 0100 	mov.w	r1, #0
 8004b7a:	f04f 0200 	mov.w	r2, #0
 8004b7e:	02a2      	lsls	r2, r4, #10
 8004b80:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b84:	0299      	lsls	r1, r3, #10
 8004b86:	460b      	mov	r3, r1
 8004b88:	4614      	mov	r4, r2
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	4621      	mov	r1, r4
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f04f 0400 	mov.w	r4, #0
 8004b94:	461a      	mov	r2, r3
 8004b96:	4623      	mov	r3, r4
 8004b98:	f7fb fba2 	bl	80002e0 <__aeabi_uldivmod>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	460c      	mov	r4, r1
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	e049      	b.n	8004c38 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ba4:	4b2f      	ldr	r3, [pc, #188]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	099b      	lsrs	r3, r3, #6
 8004baa:	f04f 0400 	mov.w	r4, #0
 8004bae:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	ea03 0501 	and.w	r5, r3, r1
 8004bba:	ea04 0602 	and.w	r6, r4, r2
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	4632      	mov	r2, r6
 8004bc2:	f04f 0300 	mov.w	r3, #0
 8004bc6:	f04f 0400 	mov.w	r4, #0
 8004bca:	0154      	lsls	r4, r2, #5
 8004bcc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004bd0:	014b      	lsls	r3, r1, #5
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	4622      	mov	r2, r4
 8004bd6:	1b49      	subs	r1, r1, r5
 8004bd8:	eb62 0206 	sbc.w	r2, r2, r6
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	f04f 0400 	mov.w	r4, #0
 8004be4:	0194      	lsls	r4, r2, #6
 8004be6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004bea:	018b      	lsls	r3, r1, #6
 8004bec:	1a5b      	subs	r3, r3, r1
 8004bee:	eb64 0402 	sbc.w	r4, r4, r2
 8004bf2:	f04f 0100 	mov.w	r1, #0
 8004bf6:	f04f 0200 	mov.w	r2, #0
 8004bfa:	00e2      	lsls	r2, r4, #3
 8004bfc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c00:	00d9      	lsls	r1, r3, #3
 8004c02:	460b      	mov	r3, r1
 8004c04:	4614      	mov	r4, r2
 8004c06:	195b      	adds	r3, r3, r5
 8004c08:	eb44 0406 	adc.w	r4, r4, r6
 8004c0c:	f04f 0100 	mov.w	r1, #0
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	02a2      	lsls	r2, r4, #10
 8004c16:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004c1a:	0299      	lsls	r1, r3, #10
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4614      	mov	r4, r2
 8004c20:	4618      	mov	r0, r3
 8004c22:	4621      	mov	r1, r4
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f04f 0400 	mov.w	r4, #0
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	4623      	mov	r3, r4
 8004c2e:	f7fb fb57 	bl	80002e0 <__aeabi_uldivmod>
 8004c32:	4603      	mov	r3, r0
 8004c34:	460c      	mov	r4, r1
 8004c36:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004c38:	4b0a      	ldr	r3, [pc, #40]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	0c1b      	lsrs	r3, r3, #16
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	3301      	adds	r3, #1
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c50:	60bb      	str	r3, [r7, #8]
      break;
 8004c52:	e002      	b.n	8004c5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c54:	4b04      	ldr	r3, [pc, #16]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004c56:	60bb      	str	r3, [r7, #8]
      break;
 8004c58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c5a:	68bb      	ldr	r3, [r7, #8]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c64:	40023800 	.word	0x40023800
 8004c68:	00f42400 	.word	0x00f42400

08004c6c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c70:	4b03      	ldr	r3, [pc, #12]	; (8004c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c72:	681b      	ldr	r3, [r3, #0]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	20008dbc 	.word	0x20008dbc

08004c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c88:	f7ff fff0 	bl	8004c6c <HAL_RCC_GetHCLKFreq>
 8004c8c:	4601      	mov	r1, r0
 8004c8e:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	0a9b      	lsrs	r3, r3, #10
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	4a03      	ldr	r2, [pc, #12]	; (8004ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c9a:	5cd3      	ldrb	r3, [r2, r3]
 8004c9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	08008840 	.word	0x08008840

08004cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cb0:	f7ff ffdc 	bl	8004c6c <HAL_RCC_GetHCLKFreq>
 8004cb4:	4601      	mov	r1, r0
 8004cb6:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	0b5b      	lsrs	r3, r3, #13
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	4a03      	ldr	r2, [pc, #12]	; (8004cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cc2:	5cd3      	ldrb	r3, [r2, r3]
 8004cc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	08008840 	.word	0x08008840

08004cd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	220f      	movs	r2, #15
 8004ce2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ce4:	4b12      	ldr	r3, [pc, #72]	; (8004d30 <HAL_RCC_GetClockConfig+0x5c>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f003 0203 	and.w	r2, r3, #3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004cf0:	4b0f      	ldr	r3, [pc, #60]	; (8004d30 <HAL_RCC_GetClockConfig+0x5c>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004cfc:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <HAL_RCC_GetClockConfig+0x5c>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004d08:	4b09      	ldr	r3, [pc, #36]	; (8004d30 <HAL_RCC_GetClockConfig+0x5c>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	08db      	lsrs	r3, r3, #3
 8004d0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d16:	4b07      	ldr	r3, [pc, #28]	; (8004d34 <HAL_RCC_GetClockConfig+0x60>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 020f 	and.w	r2, r3, #15
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	601a      	str	r2, [r3, #0]
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40023800 	.word	0x40023800
 8004d34:	40023c00 	.word	0x40023c00

08004d38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b088      	sub	sp, #32
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004d40:	2300      	movs	r3, #0
 8004d42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004d44:	2300      	movs	r3, #0
 8004d46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d012      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d60:	4b69      	ldr	r3, [pc, #420]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	4a68      	ldr	r2, [pc, #416]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d66:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004d6a:	6093      	str	r3, [r2, #8]
 8004d6c:	4b66      	ldr	r3, [pc, #408]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d74:	4964      	ldr	r1, [pc, #400]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004d82:	2301      	movs	r3, #1
 8004d84:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d017      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d92:	4b5d      	ldr	r3, [pc, #372]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da0:	4959      	ldr	r1, [pc, #356]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004db0:	d101      	bne.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004db2:	2301      	movs	r3, #1
 8004db4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d017      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004dce:	4b4e      	ldr	r3, [pc, #312]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ddc:	494a      	ldr	r1, [pc, #296]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dec:	d101      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004dee:	2301      	movs	r3, #1
 8004df0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 808b 	beq.w	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e1c:	4b3a      	ldr	r3, [pc, #232]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e20:	4a39      	ldr	r2, [pc, #228]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e26:	6413      	str	r3, [r2, #64]	; 0x40
 8004e28:	4b37      	ldr	r3, [pc, #220]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e30:	60bb      	str	r3, [r7, #8]
 8004e32:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e34:	4b35      	ldr	r3, [pc, #212]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a34      	ldr	r2, [pc, #208]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e40:	f7fe ffbc 	bl	8003dbc <HAL_GetTick>
 8004e44:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e46:	e008      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e48:	f7fe ffb8 	bl	8003dbc <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b64      	cmp	r3, #100	; 0x64
 8004e54:	d901      	bls.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e38d      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e5a:	4b2c      	ldr	r3, [pc, #176]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0f0      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e66:	4b28      	ldr	r3, [pc, #160]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e6e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d035      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d02e      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e84:	4b20      	ldr	r3, [pc, #128]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e8c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e8e:	4b1e      	ldr	r3, [pc, #120]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e92:	4a1d      	ldr	r2, [pc, #116]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e98:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e9a:	4b1b      	ldr	r3, [pc, #108]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9e:	4a1a      	ldr	r2, [pc, #104]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ea4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004ea6:	4a18      	ldr	r2, [pc, #96]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004eac:	4b16      	ldr	r3, [pc, #88]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d114      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb8:	f7fe ff80 	bl	8003dbc <HAL_GetTick>
 8004ebc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ebe:	e00a      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ec0:	f7fe ff7c 	bl	8003dbc <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e34f      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed6:	4b0c      	ldr	r3, [pc, #48]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0ee      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eee:	d111      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004ef0:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004efc:	4b04      	ldr	r3, [pc, #16]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004efe:	400b      	ands	r3, r1
 8004f00:	4901      	ldr	r1, [pc, #4]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	608b      	str	r3, [r1, #8]
 8004f06:	e00b      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004f08:	40023800 	.word	0x40023800
 8004f0c:	40007000 	.word	0x40007000
 8004f10:	0ffffcff 	.word	0x0ffffcff
 8004f14:	4bb3      	ldr	r3, [pc, #716]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	4ab2      	ldr	r2, [pc, #712]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f1e:	6093      	str	r3, [r2, #8]
 8004f20:	4bb0      	ldr	r3, [pc, #704]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f2c:	49ad      	ldr	r1, [pc, #692]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0310 	and.w	r3, r3, #16
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d010      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f3e:	4ba9      	ldr	r3, [pc, #676]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f44:	4aa7      	ldr	r2, [pc, #668]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004f4e:	4ba5      	ldr	r3, [pc, #660]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f50:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f58:	49a2      	ldr	r1, [pc, #648]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00a      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f6c:	4b9d      	ldr	r3, [pc, #628]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f7a:	499a      	ldr	r1, [pc, #616]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f8e:	4b95      	ldr	r3, [pc, #596]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f9c:	4991      	ldr	r1, [pc, #580]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00a      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fb0:	4b8c      	ldr	r3, [pc, #560]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fbe:	4989      	ldr	r1, [pc, #548]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004fd2:	4b84      	ldr	r3, [pc, #528]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe0:	4980      	ldr	r1, [pc, #512]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ff4:	4b7b      	ldr	r3, [pc, #492]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffa:	f023 0203 	bic.w	r2, r3, #3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005002:	4978      	ldr	r1, [pc, #480]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005004:	4313      	orrs	r3, r2
 8005006:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005016:	4b73      	ldr	r3, [pc, #460]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501c:	f023 020c 	bic.w	r2, r3, #12
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005024:	496f      	ldr	r1, [pc, #444]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005026:	4313      	orrs	r3, r2
 8005028:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005038:	4b6a      	ldr	r3, [pc, #424]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800503a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005046:	4967      	ldr	r1, [pc, #412]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005048:	4313      	orrs	r3, r2
 800504a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800505a:	4b62      	ldr	r3, [pc, #392]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800505c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005060:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005068:	495e      	ldr	r1, [pc, #376]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800506a:	4313      	orrs	r3, r2
 800506c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800507c:	4b59      	ldr	r3, [pc, #356]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800507e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005082:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508a:	4956      	ldr	r1, [pc, #344]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800509e:	4b51      	ldr	r3, [pc, #324]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ac:	494d      	ldr	r1, [pc, #308]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00a      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80050c0:	4b48      	ldr	r3, [pc, #288]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ce:	4945      	ldr	r1, [pc, #276]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80050e2:	4b40      	ldr	r3, [pc, #256]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f0:	493c      	ldr	r1, [pc, #240]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00a      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005104:	4b37      	ldr	r3, [pc, #220]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005112:	4934      	ldr	r1, [pc, #208]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d011      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005126:	4b2f      	ldr	r3, [pc, #188]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005134:	492b      	ldr	r1, [pc, #172]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005140:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005144:	d101      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005146:	2301      	movs	r3, #1
 8005148:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0308 	and.w	r3, r3, #8
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005156:	2301      	movs	r3, #1
 8005158:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005166:	4b1f      	ldr	r3, [pc, #124]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005174:	491b      	ldr	r1, [pc, #108]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005176:	4313      	orrs	r3, r2
 8005178:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00b      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005188:	4b16      	ldr	r3, [pc, #88]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800518a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005198:	4912      	ldr	r1, [pc, #72]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800519a:	4313      	orrs	r3, r2
 800519c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00b      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80051ac:	4b0d      	ldr	r3, [pc, #52]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051bc:	4909      	ldr	r1, [pc, #36]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00f      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051d0:	4b04      	ldr	r3, [pc, #16]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e0:	e002      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80051e2:	bf00      	nop
 80051e4:	40023800 	.word	0x40023800
 80051e8:	4985      	ldr	r1, [pc, #532]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00b      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80051fc:	4b80      	ldr	r3, [pc, #512]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80051fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005202:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800520c:	497c      	ldr	r1, [pc, #496]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800520e:	4313      	orrs	r3, r2
 8005210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d005      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005222:	f040 80d6 	bne.w	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005226:	4b76      	ldr	r3, [pc, #472]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a75      	ldr	r2, [pc, #468]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800522c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005230:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005232:	f7fe fdc3 	bl	8003dbc <HAL_GetTick>
 8005236:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005238:	e008      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800523a:	f7fe fdbf 	bl	8003dbc <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b64      	cmp	r3, #100	; 0x64
 8005246:	d901      	bls.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e194      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800524c:	4b6c      	ldr	r3, [pc, #432]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1f0      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d021      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005268:	2b00      	cmp	r3, #0
 800526a:	d11d      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800526c:	4b64      	ldr	r3, [pc, #400]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800526e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005272:	0c1b      	lsrs	r3, r3, #16
 8005274:	f003 0303 	and.w	r3, r3, #3
 8005278:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800527a:	4b61      	ldr	r3, [pc, #388]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800527c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005280:	0e1b      	lsrs	r3, r3, #24
 8005282:	f003 030f 	and.w	r3, r3, #15
 8005286:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	019a      	lsls	r2, r3, #6
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	041b      	lsls	r3, r3, #16
 8005292:	431a      	orrs	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	061b      	lsls	r3, r3, #24
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	071b      	lsls	r3, r3, #28
 80052a0:	4957      	ldr	r1, [pc, #348]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d004      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x586>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052bc:	d00a      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d02e      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052d2:	d129      	bne.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052d4:	4b4a      	ldr	r3, [pc, #296]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052da:	0c1b      	lsrs	r3, r3, #16
 80052dc:	f003 0303 	and.w	r3, r3, #3
 80052e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052e2:	4b47      	ldr	r3, [pc, #284]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052e8:	0f1b      	lsrs	r3, r3, #28
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	019a      	lsls	r2, r3, #6
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	041b      	lsls	r3, r3, #16
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	061b      	lsls	r3, r3, #24
 8005302:	431a      	orrs	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	071b      	lsls	r3, r3, #28
 8005308:	493d      	ldr	r1, [pc, #244]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800530a:	4313      	orrs	r3, r2
 800530c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005310:	4b3b      	ldr	r3, [pc, #236]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005312:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005316:	f023 021f 	bic.w	r2, r3, #31
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531e:	3b01      	subs	r3, #1
 8005320:	4937      	ldr	r1, [pc, #220]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005322:	4313      	orrs	r3, r2
 8005324:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01d      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005334:	4b32      	ldr	r3, [pc, #200]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800533a:	0e1b      	lsrs	r3, r3, #24
 800533c:	f003 030f 	and.w	r3, r3, #15
 8005340:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005342:	4b2f      	ldr	r3, [pc, #188]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005348:	0f1b      	lsrs	r3, r3, #28
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	019a      	lsls	r2, r3, #6
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	041b      	lsls	r3, r3, #16
 800535c:	431a      	orrs	r2, r3
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	061b      	lsls	r3, r3, #24
 8005362:	431a      	orrs	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	071b      	lsls	r3, r3, #28
 8005368:	4925      	ldr	r1, [pc, #148]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800536a:	4313      	orrs	r3, r2
 800536c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d011      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	019a      	lsls	r2, r3, #6
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	041b      	lsls	r3, r3, #16
 8005388:	431a      	orrs	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	061b      	lsls	r3, r3, #24
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	071b      	lsls	r3, r3, #28
 8005398:	4919      	ldr	r1, [pc, #100]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800539a:	4313      	orrs	r3, r2
 800539c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053a0:	4b17      	ldr	r3, [pc, #92]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a16      	ldr	r2, [pc, #88]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80053a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053ac:	f7fe fd06 	bl	8003dbc <HAL_GetTick>
 80053b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053b2:	e008      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053b4:	f7fe fd02 	bl	8003dbc <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b64      	cmp	r3, #100	; 0x64
 80053c0:	d901      	bls.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e0d7      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053c6:	4b0e      	ldr	r3, [pc, #56]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0f0      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	f040 80cd 	bne.w	8005574 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80053da:	4b09      	ldr	r3, [pc, #36]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a08      	ldr	r2, [pc, #32]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80053e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053e6:	f7fe fce9 	bl	8003dbc <HAL_GetTick>
 80053ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80053ec:	e00a      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80053ee:	f7fe fce5 	bl	8003dbc <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b64      	cmp	r3, #100	; 0x64
 80053fa:	d903      	bls.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e0ba      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8005400:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005404:	4b5e      	ldr	r3, [pc, #376]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800540c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005410:	d0ed      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005422:	2b00      	cmp	r3, #0
 8005424:	d009      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800542e:	2b00      	cmp	r3, #0
 8005430:	d02e      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005436:	2b00      	cmp	r3, #0
 8005438:	d12a      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800543a:	4b51      	ldr	r3, [pc, #324]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800543c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005440:	0c1b      	lsrs	r3, r3, #16
 8005442:	f003 0303 	and.w	r3, r3, #3
 8005446:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005448:	4b4d      	ldr	r3, [pc, #308]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800544a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800544e:	0f1b      	lsrs	r3, r3, #28
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	019a      	lsls	r2, r3, #6
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	041b      	lsls	r3, r3, #16
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	061b      	lsls	r3, r3, #24
 8005468:	431a      	orrs	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	071b      	lsls	r3, r3, #28
 800546e:	4944      	ldr	r1, [pc, #272]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005470:	4313      	orrs	r3, r2
 8005472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005476:	4b42      	ldr	r3, [pc, #264]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800547c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005484:	3b01      	subs	r3, #1
 8005486:	021b      	lsls	r3, r3, #8
 8005488:	493d      	ldr	r1, [pc, #244]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800548a:	4313      	orrs	r3, r2
 800548c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d022      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054a4:	d11d      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054a6:	4b36      	ldr	r3, [pc, #216]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ac:	0e1b      	lsrs	r3, r3, #24
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054b4:	4b32      	ldr	r3, [pc, #200]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ba:	0f1b      	lsrs	r3, r3, #28
 80054bc:	f003 0307 	and.w	r3, r3, #7
 80054c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	019a      	lsls	r2, r3, #6
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	041b      	lsls	r3, r3, #16
 80054ce:	431a      	orrs	r2, r3
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	061b      	lsls	r3, r3, #24
 80054d4:	431a      	orrs	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	071b      	lsls	r3, r3, #28
 80054da:	4929      	ldr	r1, [pc, #164]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d028      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054ee:	4b24      	ldr	r3, [pc, #144]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f4:	0e1b      	lsrs	r3, r3, #24
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80054fc:	4b20      	ldr	r3, [pc, #128]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005502:	0c1b      	lsrs	r3, r3, #16
 8005504:	f003 0303 	and.w	r3, r3, #3
 8005508:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	019a      	lsls	r2, r3, #6
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	041b      	lsls	r3, r3, #16
 8005514:	431a      	orrs	r2, r3
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	061b      	lsls	r3, r3, #24
 800551a:	431a      	orrs	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	69db      	ldr	r3, [r3, #28]
 8005520:	071b      	lsls	r3, r3, #28
 8005522:	4917      	ldr	r1, [pc, #92]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005524:	4313      	orrs	r3, r2
 8005526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800552a:	4b15      	ldr	r3, [pc, #84]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800552c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005530:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005538:	4911      	ldr	r1, [pc, #68]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800553a:	4313      	orrs	r3, r2
 800553c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005540:	4b0f      	ldr	r3, [pc, #60]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a0e      	ldr	r2, [pc, #56]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800554a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800554c:	f7fe fc36 	bl	8003dbc <HAL_GetTick>
 8005550:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005552:	e008      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005554:	f7fe fc32 	bl	8003dbc <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b64      	cmp	r3, #100	; 0x64
 8005560:	d901      	bls.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e007      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005566:	4b06      	ldr	r3, [pc, #24]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800556e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005572:	d1ef      	bne.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3720      	adds	r7, #32
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	40023800 	.word	0x40023800

08005584 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e01d      	b.n	80055d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f815 	bl	80055da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3304      	adds	r3, #4
 80055c0:	4619      	mov	r1, r3
 80055c2:	4610      	mov	r0, r2
 80055c4:	f000 f986 	bl	80058d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80055e2:	bf00      	nop
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
	...

080055f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68da      	ldr	r2, [r3, #12]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0201 	orr.w	r2, r2, #1
 8005606:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689a      	ldr	r2, [r3, #8]
 800560e:	4b0c      	ldr	r3, [pc, #48]	; (8005640 <HAL_TIM_Base_Start_IT+0x50>)
 8005610:	4013      	ands	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b06      	cmp	r3, #6
 8005618:	d00b      	beq.n	8005632 <HAL_TIM_Base_Start_IT+0x42>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005620:	d007      	beq.n	8005632 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f042 0201 	orr.w	r2, r2, #1
 8005630:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	00010007 	.word	0x00010007

08005644 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b02      	cmp	r3, #2
 8005658:	d122      	bne.n	80056a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b02      	cmp	r3, #2
 8005666:	d11b      	bne.n	80056a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f06f 0202 	mvn.w	r2, #2
 8005670:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f905 	bl	8005896 <HAL_TIM_IC_CaptureCallback>
 800568c:	e005      	b.n	800569a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f8f7 	bl	8005882 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f908 	bl	80058aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f003 0304 	and.w	r3, r3, #4
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	d122      	bne.n	80056f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f003 0304 	and.w	r3, r3, #4
 80056b8:	2b04      	cmp	r3, #4
 80056ba:	d11b      	bne.n	80056f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f06f 0204 	mvn.w	r2, #4
 80056c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2202      	movs	r2, #2
 80056ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f8db 	bl	8005896 <HAL_TIM_IC_CaptureCallback>
 80056e0:	e005      	b.n	80056ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f8cd 	bl	8005882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f8de 	bl	80058aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f003 0308 	and.w	r3, r3, #8
 80056fe:	2b08      	cmp	r3, #8
 8005700:	d122      	bne.n	8005748 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f003 0308 	and.w	r3, r3, #8
 800570c:	2b08      	cmp	r3, #8
 800570e:	d11b      	bne.n	8005748 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f06f 0208 	mvn.w	r2, #8
 8005718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2204      	movs	r2, #4
 800571e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	f003 0303 	and.w	r3, r3, #3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f8b1 	bl	8005896 <HAL_TIM_IC_CaptureCallback>
 8005734:	e005      	b.n	8005742 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f8a3 	bl	8005882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f8b4 	bl	80058aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	f003 0310 	and.w	r3, r3, #16
 8005752:	2b10      	cmp	r3, #16
 8005754:	d122      	bne.n	800579c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f003 0310 	and.w	r3, r3, #16
 8005760:	2b10      	cmp	r3, #16
 8005762:	d11b      	bne.n	800579c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f06f 0210 	mvn.w	r2, #16
 800576c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2208      	movs	r2, #8
 8005772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f887 	bl	8005896 <HAL_TIM_IC_CaptureCallback>
 8005788:	e005      	b.n	8005796 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f879 	bl	8005882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f88a 	bl	80058aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d10e      	bne.n	80057c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d107      	bne.n	80057c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0201 	mvn.w	r2, #1
 80057c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7fe f902 	bl	80039cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d2:	2b80      	cmp	r3, #128	; 0x80
 80057d4:	d10e      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e0:	2b80      	cmp	r3, #128	; 0x80
 80057e2:	d107      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f91a 	bl	8005a28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005802:	d10e      	bne.n	8005822 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800580e:	2b80      	cmp	r3, #128	; 0x80
 8005810:	d107      	bne.n	8005822 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800581a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f90d 	bl	8005a3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582c:	2b40      	cmp	r3, #64	; 0x40
 800582e:	d10e      	bne.n	800584e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583a:	2b40      	cmp	r3, #64	; 0x40
 800583c:	d107      	bne.n	800584e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f838 	bl	80058be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	f003 0320 	and.w	r3, r3, #32
 8005858:	2b20      	cmp	r3, #32
 800585a:	d10e      	bne.n	800587a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f003 0320 	and.w	r3, r3, #32
 8005866:	2b20      	cmp	r3, #32
 8005868:	d107      	bne.n	800587a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f06f 0220 	mvn.w	r2, #32
 8005872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f8cd 	bl	8005a14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800587a:	bf00      	nop
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800588a:	bf00      	nop
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005896:	b480      	push	{r7}
 8005898:	b083      	sub	sp, #12
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800589e:	bf00      	nop
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058b2:	bf00      	nop
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058be:	b480      	push	{r7}
 80058c0:	b083      	sub	sp, #12
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058c6:	bf00      	nop
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
	...

080058d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a40      	ldr	r2, [pc, #256]	; (80059e8 <TIM_Base_SetConfig+0x114>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d013      	beq.n	8005914 <TIM_Base_SetConfig+0x40>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f2:	d00f      	beq.n	8005914 <TIM_Base_SetConfig+0x40>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a3d      	ldr	r2, [pc, #244]	; (80059ec <TIM_Base_SetConfig+0x118>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d00b      	beq.n	8005914 <TIM_Base_SetConfig+0x40>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a3c      	ldr	r2, [pc, #240]	; (80059f0 <TIM_Base_SetConfig+0x11c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d007      	beq.n	8005914 <TIM_Base_SetConfig+0x40>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a3b      	ldr	r2, [pc, #236]	; (80059f4 <TIM_Base_SetConfig+0x120>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d003      	beq.n	8005914 <TIM_Base_SetConfig+0x40>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a3a      	ldr	r2, [pc, #232]	; (80059f8 <TIM_Base_SetConfig+0x124>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d108      	bne.n	8005926 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a2f      	ldr	r2, [pc, #188]	; (80059e8 <TIM_Base_SetConfig+0x114>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d02b      	beq.n	8005986 <TIM_Base_SetConfig+0xb2>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005934:	d027      	beq.n	8005986 <TIM_Base_SetConfig+0xb2>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a2c      	ldr	r2, [pc, #176]	; (80059ec <TIM_Base_SetConfig+0x118>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d023      	beq.n	8005986 <TIM_Base_SetConfig+0xb2>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a2b      	ldr	r2, [pc, #172]	; (80059f0 <TIM_Base_SetConfig+0x11c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d01f      	beq.n	8005986 <TIM_Base_SetConfig+0xb2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a2a      	ldr	r2, [pc, #168]	; (80059f4 <TIM_Base_SetConfig+0x120>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d01b      	beq.n	8005986 <TIM_Base_SetConfig+0xb2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a29      	ldr	r2, [pc, #164]	; (80059f8 <TIM_Base_SetConfig+0x124>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d017      	beq.n	8005986 <TIM_Base_SetConfig+0xb2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a28      	ldr	r2, [pc, #160]	; (80059fc <TIM_Base_SetConfig+0x128>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d013      	beq.n	8005986 <TIM_Base_SetConfig+0xb2>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a27      	ldr	r2, [pc, #156]	; (8005a00 <TIM_Base_SetConfig+0x12c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d00f      	beq.n	8005986 <TIM_Base_SetConfig+0xb2>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a26      	ldr	r2, [pc, #152]	; (8005a04 <TIM_Base_SetConfig+0x130>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d00b      	beq.n	8005986 <TIM_Base_SetConfig+0xb2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a25      	ldr	r2, [pc, #148]	; (8005a08 <TIM_Base_SetConfig+0x134>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d007      	beq.n	8005986 <TIM_Base_SetConfig+0xb2>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a24      	ldr	r2, [pc, #144]	; (8005a0c <TIM_Base_SetConfig+0x138>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d003      	beq.n	8005986 <TIM_Base_SetConfig+0xb2>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a23      	ldr	r2, [pc, #140]	; (8005a10 <TIM_Base_SetConfig+0x13c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d108      	bne.n	8005998 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800598c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4313      	orrs	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	689a      	ldr	r2, [r3, #8]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a0a      	ldr	r2, [pc, #40]	; (80059e8 <TIM_Base_SetConfig+0x114>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d003      	beq.n	80059cc <TIM_Base_SetConfig+0xf8>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a0c      	ldr	r2, [pc, #48]	; (80059f8 <TIM_Base_SetConfig+0x124>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d103      	bne.n	80059d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	615a      	str	r2, [r3, #20]
}
 80059da:	bf00      	nop
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	40010000 	.word	0x40010000
 80059ec:	40000400 	.word	0x40000400
 80059f0:	40000800 	.word	0x40000800
 80059f4:	40000c00 	.word	0x40000c00
 80059f8:	40010400 	.word	0x40010400
 80059fc:	40014000 	.word	0x40014000
 8005a00:	40014400 	.word	0x40014400
 8005a04:	40014800 	.word	0x40014800
 8005a08:	40001800 	.word	0x40001800
 8005a0c:	40001c00 	.word	0x40001c00
 8005a10:	40002000 	.word	0x40002000

08005a14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d101      	bne.n	8005a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e040      	b.n	8005ae4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d106      	bne.n	8005a78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7fd ffe8 	bl	8003a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2224      	movs	r2, #36	; 0x24
 8005a7c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0201 	bic.w	r2, r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f8be 	bl	8005c10 <UART_SetConfig>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d101      	bne.n	8005a9e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e022      	b.n	8005ae4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fb5c 	bl	8006164 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005aba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689a      	ldr	r2, [r3, #8]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005aca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f042 0201 	orr.w	r2, r2, #1
 8005ada:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 fbe3 	bl	80062a8 <UART_CheckIdleState>
 8005ae2:	4603      	mov	r3, r0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3708      	adds	r7, #8
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b08a      	sub	sp, #40	; 0x28
 8005af0:	af02      	add	r7, sp, #8
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	603b      	str	r3, [r7, #0]
 8005af8:	4613      	mov	r3, r2
 8005afa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b00:	2b20      	cmp	r3, #32
 8005b02:	d17f      	bne.n	8005c04 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <HAL_UART_Transmit+0x24>
 8005b0a:	88fb      	ldrh	r3, [r7, #6]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e078      	b.n	8005c06 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d101      	bne.n	8005b22 <HAL_UART_Transmit+0x36>
 8005b1e:	2302      	movs	r3, #2
 8005b20:	e071      	b.n	8005c06 <HAL_UART_Transmit+0x11a>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2221      	movs	r2, #33	; 0x21
 8005b34:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005b36:	f7fe f941 	bl	8003dbc <HAL_GetTick>
 8005b3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	88fa      	ldrh	r2, [r7, #6]
 8005b40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	88fa      	ldrh	r2, [r7, #6]
 8005b48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b54:	d108      	bne.n	8005b68 <HAL_UART_Transmit+0x7c>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d104      	bne.n	8005b68 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	61bb      	str	r3, [r7, #24]
 8005b66:	e003      	b.n	8005b70 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005b78:	e02c      	b.n	8005bd4 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2200      	movs	r2, #0
 8005b82:	2180      	movs	r1, #128	; 0x80
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 fbd4 	bl	8006332 <UART_WaitOnFlagUntilTimeout>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e038      	b.n	8005c06 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10b      	bne.n	8005bb2 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ba8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	3302      	adds	r3, #2
 8005bae:	61bb      	str	r3, [r7, #24]
 8005bb0:	e007      	b.n	8005bc2 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	781a      	ldrb	r2, [r3, #0]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1cc      	bne.n	8005b7a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	2200      	movs	r2, #0
 8005be8:	2140      	movs	r1, #64	; 0x40
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 fba1 	bl	8006332 <UART_WaitOnFlagUntilTimeout>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e005      	b.n	8005c06 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	e000      	b.n	8005c06 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8005c04:	2302      	movs	r3, #2
  }
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3720      	adds	r7, #32
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b088      	sub	sp, #32
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	4bb1      	ldr	r3, [pc, #708]	; (8005f04 <UART_SetConfig+0x2f4>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6812      	ldr	r2, [r2, #0]
 8005c46:	6939      	ldr	r1, [r7, #16]
 8005c48:	430b      	orrs	r3, r1
 8005c4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a9f      	ldr	r2, [pc, #636]	; (8005f08 <UART_SetConfig+0x2f8>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d121      	bne.n	8005cd4 <UART_SetConfig+0xc4>
 8005c90:	4b9e      	ldr	r3, [pc, #632]	; (8005f0c <UART_SetConfig+0x2fc>)
 8005c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c96:	f003 0303 	and.w	r3, r3, #3
 8005c9a:	2b03      	cmp	r3, #3
 8005c9c:	d816      	bhi.n	8005ccc <UART_SetConfig+0xbc>
 8005c9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ca4 <UART_SetConfig+0x94>)
 8005ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca4:	08005cb5 	.word	0x08005cb5
 8005ca8:	08005cc1 	.word	0x08005cc1
 8005cac:	08005cbb 	.word	0x08005cbb
 8005cb0:	08005cc7 	.word	0x08005cc7
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	77fb      	strb	r3, [r7, #31]
 8005cb8:	e151      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	77fb      	strb	r3, [r7, #31]
 8005cbe:	e14e      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005cc0:	2304      	movs	r3, #4
 8005cc2:	77fb      	strb	r3, [r7, #31]
 8005cc4:	e14b      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005cc6:	2308      	movs	r3, #8
 8005cc8:	77fb      	strb	r3, [r7, #31]
 8005cca:	e148      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005ccc:	2310      	movs	r3, #16
 8005cce:	77fb      	strb	r3, [r7, #31]
 8005cd0:	bf00      	nop
 8005cd2:	e144      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a8d      	ldr	r2, [pc, #564]	; (8005f10 <UART_SetConfig+0x300>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d134      	bne.n	8005d48 <UART_SetConfig+0x138>
 8005cde:	4b8b      	ldr	r3, [pc, #556]	; (8005f0c <UART_SetConfig+0x2fc>)
 8005ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce4:	f003 030c 	and.w	r3, r3, #12
 8005ce8:	2b0c      	cmp	r3, #12
 8005cea:	d829      	bhi.n	8005d40 <UART_SetConfig+0x130>
 8005cec:	a201      	add	r2, pc, #4	; (adr r2, 8005cf4 <UART_SetConfig+0xe4>)
 8005cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf2:	bf00      	nop
 8005cf4:	08005d29 	.word	0x08005d29
 8005cf8:	08005d41 	.word	0x08005d41
 8005cfc:	08005d41 	.word	0x08005d41
 8005d00:	08005d41 	.word	0x08005d41
 8005d04:	08005d35 	.word	0x08005d35
 8005d08:	08005d41 	.word	0x08005d41
 8005d0c:	08005d41 	.word	0x08005d41
 8005d10:	08005d41 	.word	0x08005d41
 8005d14:	08005d2f 	.word	0x08005d2f
 8005d18:	08005d41 	.word	0x08005d41
 8005d1c:	08005d41 	.word	0x08005d41
 8005d20:	08005d41 	.word	0x08005d41
 8005d24:	08005d3b 	.word	0x08005d3b
 8005d28:	2300      	movs	r3, #0
 8005d2a:	77fb      	strb	r3, [r7, #31]
 8005d2c:	e117      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005d2e:	2302      	movs	r3, #2
 8005d30:	77fb      	strb	r3, [r7, #31]
 8005d32:	e114      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005d34:	2304      	movs	r3, #4
 8005d36:	77fb      	strb	r3, [r7, #31]
 8005d38:	e111      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005d3a:	2308      	movs	r3, #8
 8005d3c:	77fb      	strb	r3, [r7, #31]
 8005d3e:	e10e      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005d40:	2310      	movs	r3, #16
 8005d42:	77fb      	strb	r3, [r7, #31]
 8005d44:	bf00      	nop
 8005d46:	e10a      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a71      	ldr	r2, [pc, #452]	; (8005f14 <UART_SetConfig+0x304>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d120      	bne.n	8005d94 <UART_SetConfig+0x184>
 8005d52:	4b6e      	ldr	r3, [pc, #440]	; (8005f0c <UART_SetConfig+0x2fc>)
 8005d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d5c:	2b10      	cmp	r3, #16
 8005d5e:	d00f      	beq.n	8005d80 <UART_SetConfig+0x170>
 8005d60:	2b10      	cmp	r3, #16
 8005d62:	d802      	bhi.n	8005d6a <UART_SetConfig+0x15a>
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d005      	beq.n	8005d74 <UART_SetConfig+0x164>
 8005d68:	e010      	b.n	8005d8c <UART_SetConfig+0x17c>
 8005d6a:	2b20      	cmp	r3, #32
 8005d6c:	d005      	beq.n	8005d7a <UART_SetConfig+0x16a>
 8005d6e:	2b30      	cmp	r3, #48	; 0x30
 8005d70:	d009      	beq.n	8005d86 <UART_SetConfig+0x176>
 8005d72:	e00b      	b.n	8005d8c <UART_SetConfig+0x17c>
 8005d74:	2300      	movs	r3, #0
 8005d76:	77fb      	strb	r3, [r7, #31]
 8005d78:	e0f1      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	77fb      	strb	r3, [r7, #31]
 8005d7e:	e0ee      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005d80:	2304      	movs	r3, #4
 8005d82:	77fb      	strb	r3, [r7, #31]
 8005d84:	e0eb      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005d86:	2308      	movs	r3, #8
 8005d88:	77fb      	strb	r3, [r7, #31]
 8005d8a:	e0e8      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005d8c:	2310      	movs	r3, #16
 8005d8e:	77fb      	strb	r3, [r7, #31]
 8005d90:	bf00      	nop
 8005d92:	e0e4      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a5f      	ldr	r2, [pc, #380]	; (8005f18 <UART_SetConfig+0x308>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d120      	bne.n	8005de0 <UART_SetConfig+0x1d0>
 8005d9e:	4b5b      	ldr	r3, [pc, #364]	; (8005f0c <UART_SetConfig+0x2fc>)
 8005da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005da8:	2b40      	cmp	r3, #64	; 0x40
 8005daa:	d00f      	beq.n	8005dcc <UART_SetConfig+0x1bc>
 8005dac:	2b40      	cmp	r3, #64	; 0x40
 8005dae:	d802      	bhi.n	8005db6 <UART_SetConfig+0x1a6>
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d005      	beq.n	8005dc0 <UART_SetConfig+0x1b0>
 8005db4:	e010      	b.n	8005dd8 <UART_SetConfig+0x1c8>
 8005db6:	2b80      	cmp	r3, #128	; 0x80
 8005db8:	d005      	beq.n	8005dc6 <UART_SetConfig+0x1b6>
 8005dba:	2bc0      	cmp	r3, #192	; 0xc0
 8005dbc:	d009      	beq.n	8005dd2 <UART_SetConfig+0x1c2>
 8005dbe:	e00b      	b.n	8005dd8 <UART_SetConfig+0x1c8>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	77fb      	strb	r3, [r7, #31]
 8005dc4:	e0cb      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	77fb      	strb	r3, [r7, #31]
 8005dca:	e0c8      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005dcc:	2304      	movs	r3, #4
 8005dce:	77fb      	strb	r3, [r7, #31]
 8005dd0:	e0c5      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005dd2:	2308      	movs	r3, #8
 8005dd4:	77fb      	strb	r3, [r7, #31]
 8005dd6:	e0c2      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005dd8:	2310      	movs	r3, #16
 8005dda:	77fb      	strb	r3, [r7, #31]
 8005ddc:	bf00      	nop
 8005dde:	e0be      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a4d      	ldr	r2, [pc, #308]	; (8005f1c <UART_SetConfig+0x30c>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d124      	bne.n	8005e34 <UART_SetConfig+0x224>
 8005dea:	4b48      	ldr	r3, [pc, #288]	; (8005f0c <UART_SetConfig+0x2fc>)
 8005dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df8:	d012      	beq.n	8005e20 <UART_SetConfig+0x210>
 8005dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dfe:	d802      	bhi.n	8005e06 <UART_SetConfig+0x1f6>
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d007      	beq.n	8005e14 <UART_SetConfig+0x204>
 8005e04:	e012      	b.n	8005e2c <UART_SetConfig+0x21c>
 8005e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e0a:	d006      	beq.n	8005e1a <UART_SetConfig+0x20a>
 8005e0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e10:	d009      	beq.n	8005e26 <UART_SetConfig+0x216>
 8005e12:	e00b      	b.n	8005e2c <UART_SetConfig+0x21c>
 8005e14:	2300      	movs	r3, #0
 8005e16:	77fb      	strb	r3, [r7, #31]
 8005e18:	e0a1      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	77fb      	strb	r3, [r7, #31]
 8005e1e:	e09e      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005e20:	2304      	movs	r3, #4
 8005e22:	77fb      	strb	r3, [r7, #31]
 8005e24:	e09b      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005e26:	2308      	movs	r3, #8
 8005e28:	77fb      	strb	r3, [r7, #31]
 8005e2a:	e098      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005e2c:	2310      	movs	r3, #16
 8005e2e:	77fb      	strb	r3, [r7, #31]
 8005e30:	bf00      	nop
 8005e32:	e094      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a39      	ldr	r2, [pc, #228]	; (8005f20 <UART_SetConfig+0x310>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d124      	bne.n	8005e88 <UART_SetConfig+0x278>
 8005e3e:	4b33      	ldr	r3, [pc, #204]	; (8005f0c <UART_SetConfig+0x2fc>)
 8005e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e4c:	d012      	beq.n	8005e74 <UART_SetConfig+0x264>
 8005e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e52:	d802      	bhi.n	8005e5a <UART_SetConfig+0x24a>
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d007      	beq.n	8005e68 <UART_SetConfig+0x258>
 8005e58:	e012      	b.n	8005e80 <UART_SetConfig+0x270>
 8005e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e5e:	d006      	beq.n	8005e6e <UART_SetConfig+0x25e>
 8005e60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e64:	d009      	beq.n	8005e7a <UART_SetConfig+0x26a>
 8005e66:	e00b      	b.n	8005e80 <UART_SetConfig+0x270>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	77fb      	strb	r3, [r7, #31]
 8005e6c:	e077      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005e6e:	2302      	movs	r3, #2
 8005e70:	77fb      	strb	r3, [r7, #31]
 8005e72:	e074      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005e74:	2304      	movs	r3, #4
 8005e76:	77fb      	strb	r3, [r7, #31]
 8005e78:	e071      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005e7a:	2308      	movs	r3, #8
 8005e7c:	77fb      	strb	r3, [r7, #31]
 8005e7e:	e06e      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005e80:	2310      	movs	r3, #16
 8005e82:	77fb      	strb	r3, [r7, #31]
 8005e84:	bf00      	nop
 8005e86:	e06a      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a25      	ldr	r2, [pc, #148]	; (8005f24 <UART_SetConfig+0x314>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d124      	bne.n	8005edc <UART_SetConfig+0x2cc>
 8005e92:	4b1e      	ldr	r3, [pc, #120]	; (8005f0c <UART_SetConfig+0x2fc>)
 8005e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e98:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ea0:	d012      	beq.n	8005ec8 <UART_SetConfig+0x2b8>
 8005ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ea6:	d802      	bhi.n	8005eae <UART_SetConfig+0x29e>
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d007      	beq.n	8005ebc <UART_SetConfig+0x2ac>
 8005eac:	e012      	b.n	8005ed4 <UART_SetConfig+0x2c4>
 8005eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eb2:	d006      	beq.n	8005ec2 <UART_SetConfig+0x2b2>
 8005eb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005eb8:	d009      	beq.n	8005ece <UART_SetConfig+0x2be>
 8005eba:	e00b      	b.n	8005ed4 <UART_SetConfig+0x2c4>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	77fb      	strb	r3, [r7, #31]
 8005ec0:	e04d      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	77fb      	strb	r3, [r7, #31]
 8005ec6:	e04a      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005ec8:	2304      	movs	r3, #4
 8005eca:	77fb      	strb	r3, [r7, #31]
 8005ecc:	e047      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005ece:	2308      	movs	r3, #8
 8005ed0:	77fb      	strb	r3, [r7, #31]
 8005ed2:	e044      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005ed4:	2310      	movs	r3, #16
 8005ed6:	77fb      	strb	r3, [r7, #31]
 8005ed8:	bf00      	nop
 8005eda:	e040      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a11      	ldr	r2, [pc, #68]	; (8005f28 <UART_SetConfig+0x318>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d139      	bne.n	8005f5a <UART_SetConfig+0x34a>
 8005ee6:	4b09      	ldr	r3, [pc, #36]	; (8005f0c <UART_SetConfig+0x2fc>)
 8005ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005ef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ef4:	d027      	beq.n	8005f46 <UART_SetConfig+0x336>
 8005ef6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005efa:	d817      	bhi.n	8005f2c <UART_SetConfig+0x31c>
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01c      	beq.n	8005f3a <UART_SetConfig+0x32a>
 8005f00:	e027      	b.n	8005f52 <UART_SetConfig+0x342>
 8005f02:	bf00      	nop
 8005f04:	efff69f3 	.word	0xefff69f3
 8005f08:	40011000 	.word	0x40011000
 8005f0c:	40023800 	.word	0x40023800
 8005f10:	40004400 	.word	0x40004400
 8005f14:	40004800 	.word	0x40004800
 8005f18:	40004c00 	.word	0x40004c00
 8005f1c:	40005000 	.word	0x40005000
 8005f20:	40011400 	.word	0x40011400
 8005f24:	40007800 	.word	0x40007800
 8005f28:	40007c00 	.word	0x40007c00
 8005f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f30:	d006      	beq.n	8005f40 <UART_SetConfig+0x330>
 8005f32:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f36:	d009      	beq.n	8005f4c <UART_SetConfig+0x33c>
 8005f38:	e00b      	b.n	8005f52 <UART_SetConfig+0x342>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	77fb      	strb	r3, [r7, #31]
 8005f3e:	e00e      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005f40:	2302      	movs	r3, #2
 8005f42:	77fb      	strb	r3, [r7, #31]
 8005f44:	e00b      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005f46:	2304      	movs	r3, #4
 8005f48:	77fb      	strb	r3, [r7, #31]
 8005f4a:	e008      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005f4c:	2308      	movs	r3, #8
 8005f4e:	77fb      	strb	r3, [r7, #31]
 8005f50:	e005      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005f52:	2310      	movs	r3, #16
 8005f54:	77fb      	strb	r3, [r7, #31]
 8005f56:	bf00      	nop
 8005f58:	e001      	b.n	8005f5e <UART_SetConfig+0x34e>
 8005f5a:	2310      	movs	r3, #16
 8005f5c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f66:	d17f      	bne.n	8006068 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8005f68:	7ffb      	ldrb	r3, [r7, #31]
 8005f6a:	2b08      	cmp	r3, #8
 8005f6c:	d85c      	bhi.n	8006028 <UART_SetConfig+0x418>
 8005f6e:	a201      	add	r2, pc, #4	; (adr r2, 8005f74 <UART_SetConfig+0x364>)
 8005f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f74:	08005f99 	.word	0x08005f99
 8005f78:	08005fb9 	.word	0x08005fb9
 8005f7c:	08005fd9 	.word	0x08005fd9
 8005f80:	08006029 	.word	0x08006029
 8005f84:	08005ff1 	.word	0x08005ff1
 8005f88:	08006029 	.word	0x08006029
 8005f8c:	08006029 	.word	0x08006029
 8005f90:	08006029 	.word	0x08006029
 8005f94:	08006011 	.word	0x08006011
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f98:	f7fe fe74 	bl	8004c84 <HAL_RCC_GetPCLK1Freq>
 8005f9c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	005a      	lsls	r2, r3, #1
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	085b      	lsrs	r3, r3, #1
 8005fa8:	441a      	add	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	61bb      	str	r3, [r7, #24]
        break;
 8005fb6:	e03a      	b.n	800602e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fb8:	f7fe fe78 	bl	8004cac <HAL_RCC_GetPCLK2Freq>
 8005fbc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	005a      	lsls	r2, r3, #1
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	085b      	lsrs	r3, r3, #1
 8005fc8:	441a      	add	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	61bb      	str	r3, [r7, #24]
        break;
 8005fd6:	e02a      	b.n	800602e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	085a      	lsrs	r2, r3, #1
 8005fde:	4b5f      	ldr	r3, [pc, #380]	; (800615c <UART_SetConfig+0x54c>)
 8005fe0:	4413      	add	r3, r2
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	6852      	ldr	r2, [r2, #4]
 8005fe6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	61bb      	str	r3, [r7, #24]
        break;
 8005fee:	e01e      	b.n	800602e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ff0:	f7fe fd66 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8005ff4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	005a      	lsls	r2, r3, #1
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	085b      	lsrs	r3, r3, #1
 8006000:	441a      	add	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	fbb2 f3f3 	udiv	r3, r2, r3
 800600a:	b29b      	uxth	r3, r3
 800600c:	61bb      	str	r3, [r7, #24]
        break;
 800600e:	e00e      	b.n	800602e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	085b      	lsrs	r3, r3, #1
 8006016:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006022:	b29b      	uxth	r3, r3
 8006024:	61bb      	str	r3, [r7, #24]
        break;
 8006026:	e002      	b.n	800602e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	75fb      	strb	r3, [r7, #23]
        break;
 800602c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	2b0f      	cmp	r3, #15
 8006032:	d916      	bls.n	8006062 <UART_SetConfig+0x452>
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800603a:	d212      	bcs.n	8006062 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	b29b      	uxth	r3, r3
 8006040:	f023 030f 	bic.w	r3, r3, #15
 8006044:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	085b      	lsrs	r3, r3, #1
 800604a:	b29b      	uxth	r3, r3
 800604c:	f003 0307 	and.w	r3, r3, #7
 8006050:	b29a      	uxth	r2, r3
 8006052:	897b      	ldrh	r3, [r7, #10]
 8006054:	4313      	orrs	r3, r2
 8006056:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	897a      	ldrh	r2, [r7, #10]
 800605e:	60da      	str	r2, [r3, #12]
 8006060:	e070      	b.n	8006144 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	75fb      	strb	r3, [r7, #23]
 8006066:	e06d      	b.n	8006144 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8006068:	7ffb      	ldrb	r3, [r7, #31]
 800606a:	2b08      	cmp	r3, #8
 800606c:	d859      	bhi.n	8006122 <UART_SetConfig+0x512>
 800606e:	a201      	add	r2, pc, #4	; (adr r2, 8006074 <UART_SetConfig+0x464>)
 8006070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006074:	08006099 	.word	0x08006099
 8006078:	080060b7 	.word	0x080060b7
 800607c:	080060d5 	.word	0x080060d5
 8006080:	08006123 	.word	0x08006123
 8006084:	080060ed 	.word	0x080060ed
 8006088:	08006123 	.word	0x08006123
 800608c:	08006123 	.word	0x08006123
 8006090:	08006123 	.word	0x08006123
 8006094:	0800610b 	.word	0x0800610b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006098:	f7fe fdf4 	bl	8004c84 <HAL_RCC_GetPCLK1Freq>
 800609c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	085a      	lsrs	r2, r3, #1
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	441a      	add	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	61bb      	str	r3, [r7, #24]
        break;
 80060b4:	e038      	b.n	8006128 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060b6:	f7fe fdf9 	bl	8004cac <HAL_RCC_GetPCLK2Freq>
 80060ba:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	085a      	lsrs	r2, r3, #1
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	441a      	add	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	61bb      	str	r3, [r7, #24]
        break;
 80060d2:	e029      	b.n	8006128 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	085a      	lsrs	r2, r3, #1
 80060da:	4b21      	ldr	r3, [pc, #132]	; (8006160 <UART_SetConfig+0x550>)
 80060dc:	4413      	add	r3, r2
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	6852      	ldr	r2, [r2, #4]
 80060e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	61bb      	str	r3, [r7, #24]
        break;
 80060ea:	e01d      	b.n	8006128 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ec:	f7fe fce8 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 80060f0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	085a      	lsrs	r2, r3, #1
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	441a      	add	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	fbb2 f3f3 	udiv	r3, r2, r3
 8006104:	b29b      	uxth	r3, r3
 8006106:	61bb      	str	r3, [r7, #24]
        break;
 8006108:	e00e      	b.n	8006128 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	085b      	lsrs	r3, r3, #1
 8006110:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	fbb2 f3f3 	udiv	r3, r2, r3
 800611c:	b29b      	uxth	r3, r3
 800611e:	61bb      	str	r3, [r7, #24]
        break;
 8006120:	e002      	b.n	8006128 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	75fb      	strb	r3, [r7, #23]
        break;
 8006126:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	2b0f      	cmp	r3, #15
 800612c:	d908      	bls.n	8006140 <UART_SetConfig+0x530>
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006134:	d204      	bcs.n	8006140 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	60da      	str	r2, [r3, #12]
 800613e:	e001      	b.n	8006144 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006150:	7dfb      	ldrb	r3, [r7, #23]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3720      	adds	r7, #32
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	01e84800 	.word	0x01e84800
 8006160:	00f42400 	.word	0x00f42400

08006164 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00a      	beq.n	800618e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00a      	beq.n	80061d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	f003 0308 	and.w	r3, r3, #8
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00a      	beq.n	80061f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	f003 0310 	and.w	r3, r3, #16
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	f003 0320 	and.w	r3, r3, #32
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01a      	beq.n	800627a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006262:	d10a      	bne.n	800627a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00a      	beq.n	800629c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	605a      	str	r2, [r3, #4]
  }
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80062b6:	f7fd fd81 	bl	8003dbc <HAL_GetTick>
 80062ba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0308 	and.w	r3, r3, #8
 80062c6:	2b08      	cmp	r3, #8
 80062c8:	d10e      	bne.n	80062e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f82a 	bl	8006332 <UART_WaitOnFlagUntilTimeout>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e020      	b.n	800632a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0304 	and.w	r3, r3, #4
 80062f2:	2b04      	cmp	r3, #4
 80062f4:	d10e      	bne.n	8006314 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f814 	bl	8006332 <UART_WaitOnFlagUntilTimeout>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e00a      	b.n	800632a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2220      	movs	r2, #32
 8006318:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2220      	movs	r2, #32
 800631e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b084      	sub	sp, #16
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	603b      	str	r3, [r7, #0]
 800633e:	4613      	mov	r3, r2
 8006340:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006342:	e05d      	b.n	8006400 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634a:	d059      	beq.n	8006400 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800634c:	f7fd fd36 	bl	8003dbc <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	429a      	cmp	r2, r3
 800635a:	d302      	bcc.n	8006362 <UART_WaitOnFlagUntilTimeout+0x30>
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d11b      	bne.n	800639a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006370:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 0201 	bic.w	r2, r2, #1
 8006380:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2220      	movs	r2, #32
 8006386:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2220      	movs	r2, #32
 800638c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e042      	b.n	8006420 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0304 	and.w	r3, r3, #4
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d02b      	beq.n	8006400 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063b6:	d123      	bne.n	8006400 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063c0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063d0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	689a      	ldr	r2, [r3, #8]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 0201 	bic.w	r2, r2, #1
 80063e0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2220      	movs	r2, #32
 80063e6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2220      	movs	r2, #32
 80063ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2220      	movs	r2, #32
 80063f2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e00f      	b.n	8006420 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	69da      	ldr	r2, [r3, #28]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	4013      	ands	r3, r2
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	429a      	cmp	r2, r3
 800640e:	bf0c      	ite	eq
 8006410:	2301      	moveq	r3, #1
 8006412:	2300      	movne	r3, #0
 8006414:	b2db      	uxtb	r3, r3
 8006416:	461a      	mov	r2, r3
 8006418:	79fb      	ldrb	r3, [r7, #7]
 800641a:	429a      	cmp	r2, r3
 800641c:	d092      	beq.n	8006344 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	4603      	mov	r3, r0
 8006430:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006432:	2300      	movs	r3, #0
 8006434:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006436:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800643a:	2b84      	cmp	r3, #132	; 0x84
 800643c:	d005      	beq.n	800644a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800643e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	4413      	add	r3, r2
 8006446:	3303      	adds	r3, #3
 8006448:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800644a:	68fb      	ldr	r3, [r7, #12]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800645c:	f000 fae4 	bl	8006a28 <vTaskStartScheduler>
  
  return osOK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	bd80      	pop	{r7, pc}

08006466 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006466:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006468:	b089      	sub	sp, #36	; 0x24
 800646a:	af04      	add	r7, sp, #16
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d020      	beq.n	80064ba <osThreadCreate+0x54>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d01c      	beq.n	80064ba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685c      	ldr	r4, [r3, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681d      	ldr	r5, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	691e      	ldr	r6, [r3, #16]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006492:	4618      	mov	r0, r3
 8006494:	f7ff ffc8 	bl	8006428 <makeFreeRtosPriority>
 8006498:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80064a2:	9202      	str	r2, [sp, #8]
 80064a4:	9301      	str	r3, [sp, #4]
 80064a6:	9100      	str	r1, [sp, #0]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	4632      	mov	r2, r6
 80064ac:	4629      	mov	r1, r5
 80064ae:	4620      	mov	r0, r4
 80064b0:	f000 f8ed 	bl	800668e <xTaskCreateStatic>
 80064b4:	4603      	mov	r3, r0
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	e01c      	b.n	80064f4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685c      	ldr	r4, [r3, #4]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80064c6:	b29e      	uxth	r6, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7ff ffaa 	bl	8006428 <makeFreeRtosPriority>
 80064d4:	4602      	mov	r2, r0
 80064d6:	f107 030c 	add.w	r3, r7, #12
 80064da:	9301      	str	r3, [sp, #4]
 80064dc:	9200      	str	r2, [sp, #0]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	4632      	mov	r2, r6
 80064e2:	4629      	mov	r1, r5
 80064e4:	4620      	mov	r0, r4
 80064e6:	f000 f932 	bl	800674e <xTaskCreate>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d001      	beq.n	80064f4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80064f0:	2300      	movs	r3, #0
 80064f2:	e000      	b.n	80064f6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80064f4:	68fb      	ldr	r3, [r7, #12]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3714      	adds	r7, #20
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080064fe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b084      	sub	sp, #16
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <osDelay+0x16>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	e000      	b.n	8006516 <osDelay+0x18>
 8006514:	2301      	movs	r3, #1
 8006516:	4618      	mov	r0, r3
 8006518:	f000 fa50 	bl	80069bc <vTaskDelay>
  
  return osOK;
 800651c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f103 0208 	add.w	r2, r3, #8
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f04f 32ff 	mov.w	r2, #4294967295
 800653e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f103 0208 	add.w	r2, r3, #8
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f103 0208 	add.w	r2, r3, #8
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800655a:	bf00      	nop
 800655c:	370c      	adds	r7, #12
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006566:	b480      	push	{r7}
 8006568:	b083      	sub	sp, #12
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	689a      	ldr	r2, [r3, #8]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	1c5a      	adds	r2, r3, #1
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	601a      	str	r2, [r3, #0]
}
 80065bc:	bf00      	nop
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065de:	d103      	bne.n	80065e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	e00c      	b.n	8006602 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3308      	adds	r3, #8
 80065ec:	60fb      	str	r3, [r7, #12]
 80065ee:	e002      	b.n	80065f6 <vListInsert+0x2e>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	60fb      	str	r3, [r7, #12]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d2f6      	bcs.n	80065f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	1c5a      	adds	r2, r3, #1
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	601a      	str	r2, [r3, #0]
}
 800662e:	bf00      	nop
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800663a:	b480      	push	{r7}
 800663c:	b085      	sub	sp, #20
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6892      	ldr	r2, [r2, #8]
 8006650:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	6852      	ldr	r2, [r2, #4]
 800665a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	429a      	cmp	r2, r3
 8006664:	d103      	bne.n	800666e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689a      	ldr	r2, [r3, #8]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	1e5a      	subs	r2, r3, #1
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800668e:	b580      	push	{r7, lr}
 8006690:	b08e      	sub	sp, #56	; 0x38
 8006692:	af04      	add	r7, sp, #16
 8006694:	60f8      	str	r0, [r7, #12]
 8006696:	60b9      	str	r1, [r7, #8]
 8006698:	607a      	str	r2, [r7, #4]
 800669a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800669c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10b      	bne.n	80066ba <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80066a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a6:	b672      	cpsid	i
 80066a8:	f383 8811 	msr	BASEPRI, r3
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	b662      	cpsie	i
 80066b6:	623b      	str	r3, [r7, #32]
 80066b8:	e7fe      	b.n	80066b8 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80066ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10b      	bne.n	80066d8 <xTaskCreateStatic+0x4a>
 80066c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c4:	b672      	cpsid	i
 80066c6:	f383 8811 	msr	BASEPRI, r3
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	b662      	cpsie	i
 80066d4:	61fb      	str	r3, [r7, #28]
 80066d6:	e7fe      	b.n	80066d6 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80066d8:	2354      	movs	r3, #84	; 0x54
 80066da:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	2b54      	cmp	r3, #84	; 0x54
 80066e0:	d00b      	beq.n	80066fa <xTaskCreateStatic+0x6c>
 80066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e6:	b672      	cpsid	i
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	b662      	cpsie	i
 80066f6:	61bb      	str	r3, [r7, #24]
 80066f8:	e7fe      	b.n	80066f8 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80066fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80066fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d01e      	beq.n	8006740 <xTaskCreateStatic+0xb2>
 8006702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006704:	2b00      	cmp	r3, #0
 8006706:	d01b      	beq.n	8006740 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006710:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	2202      	movs	r2, #2
 8006716:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800671a:	2300      	movs	r3, #0
 800671c:	9303      	str	r3, [sp, #12]
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	9302      	str	r3, [sp, #8]
 8006722:	f107 0314 	add.w	r3, r7, #20
 8006726:	9301      	str	r3, [sp, #4]
 8006728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	68b9      	ldr	r1, [r7, #8]
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f000 f850 	bl	80067d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006738:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800673a:	f000 f8d5 	bl	80068e8 <prvAddNewTaskToReadyList>
 800673e:	e001      	b.n	8006744 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006740:	2300      	movs	r3, #0
 8006742:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006744:	697b      	ldr	r3, [r7, #20]
	}
 8006746:	4618      	mov	r0, r3
 8006748:	3728      	adds	r7, #40	; 0x28
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800674e:	b580      	push	{r7, lr}
 8006750:	b08c      	sub	sp, #48	; 0x30
 8006752:	af04      	add	r7, sp, #16
 8006754:	60f8      	str	r0, [r7, #12]
 8006756:	60b9      	str	r1, [r7, #8]
 8006758:	603b      	str	r3, [r7, #0]
 800675a:	4613      	mov	r3, r2
 800675c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800675e:	88fb      	ldrh	r3, [r7, #6]
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4618      	mov	r0, r3
 8006764:	f000 fea8 	bl	80074b8 <pvPortMalloc>
 8006768:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00e      	beq.n	800678e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006770:	2054      	movs	r0, #84	; 0x54
 8006772:	f000 fea1 	bl	80074b8 <pvPortMalloc>
 8006776:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	631a      	str	r2, [r3, #48]	; 0x30
 8006784:	e005      	b.n	8006792 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006786:	6978      	ldr	r0, [r7, #20]
 8006788:	f000 ff5e 	bl	8007648 <vPortFree>
 800678c:	e001      	b.n	8006792 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800678e:	2300      	movs	r3, #0
 8006790:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d017      	beq.n	80067c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80067a0:	88fa      	ldrh	r2, [r7, #6]
 80067a2:	2300      	movs	r3, #0
 80067a4:	9303      	str	r3, [sp, #12]
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	9302      	str	r3, [sp, #8]
 80067aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ac:	9301      	str	r3, [sp, #4]
 80067ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	68b9      	ldr	r1, [r7, #8]
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 f80e 	bl	80067d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067bc:	69f8      	ldr	r0, [r7, #28]
 80067be:	f000 f893 	bl	80068e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80067c2:	2301      	movs	r3, #1
 80067c4:	61bb      	str	r3, [r7, #24]
 80067c6:	e002      	b.n	80067ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80067c8:	f04f 33ff 	mov.w	r3, #4294967295
 80067cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80067ce:	69bb      	ldr	r3, [r7, #24]
	}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3720      	adds	r7, #32
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b088      	sub	sp, #32
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
 80067e4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80067e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80067f0:	440b      	add	r3, r1
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	f023 0307 	bic.w	r3, r3, #7
 80067fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	f003 0307 	and.w	r3, r3, #7
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00b      	beq.n	8006822 <prvInitialiseNewTask+0x4a>
 800680a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680e:	b672      	cpsid	i
 8006810:	f383 8811 	msr	BASEPRI, r3
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	b662      	cpsie	i
 800681e:	617b      	str	r3, [r7, #20]
 8006820:	e7fe      	b.n	8006820 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d01f      	beq.n	8006868 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006828:	2300      	movs	r3, #0
 800682a:	61fb      	str	r3, [r7, #28]
 800682c:	e012      	b.n	8006854 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	4413      	add	r3, r2
 8006834:	7819      	ldrb	r1, [r3, #0]
 8006836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	4413      	add	r3, r2
 800683c:	3334      	adds	r3, #52	; 0x34
 800683e:	460a      	mov	r2, r1
 8006840:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	4413      	add	r3, r2
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d006      	beq.n	800685c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	3301      	adds	r3, #1
 8006852:	61fb      	str	r3, [r7, #28]
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	2b0f      	cmp	r3, #15
 8006858:	d9e9      	bls.n	800682e <prvInitialiseNewTask+0x56>
 800685a:	e000      	b.n	800685e <prvInitialiseNewTask+0x86>
			{
				break;
 800685c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006860:	2200      	movs	r2, #0
 8006862:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006866:	e003      	b.n	8006870 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006872:	2b06      	cmp	r3, #6
 8006874:	d901      	bls.n	800687a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006876:	2306      	movs	r3, #6
 8006878:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800687e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006884:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006888:	2200      	movs	r2, #0
 800688a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800688c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688e:	3304      	adds	r3, #4
 8006890:	4618      	mov	r0, r3
 8006892:	f7ff fe68 	bl	8006566 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006898:	3318      	adds	r3, #24
 800689a:	4618      	mov	r0, r3
 800689c:	f7ff fe63 	bl	8006566 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80068a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a8:	f1c3 0207 	rsb	r2, r3, #7
 80068ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80068b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068b4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	2200      	movs	r2, #0
 80068ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068c4:	683a      	ldr	r2, [r7, #0]
 80068c6:	68f9      	ldr	r1, [r7, #12]
 80068c8:	69b8      	ldr	r0, [r7, #24]
 80068ca:	f000 fc0b 	bl	80070e4 <pxPortInitialiseStack>
 80068ce:	4602      	mov	r2, r0
 80068d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80068d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068e0:	bf00      	nop
 80068e2:	3720      	adds	r7, #32
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80068f0:	f000 fd02 	bl	80072f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80068f4:	4b2a      	ldr	r3, [pc, #168]	; (80069a0 <prvAddNewTaskToReadyList+0xb8>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	3301      	adds	r3, #1
 80068fa:	4a29      	ldr	r2, [pc, #164]	; (80069a0 <prvAddNewTaskToReadyList+0xb8>)
 80068fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80068fe:	4b29      	ldr	r3, [pc, #164]	; (80069a4 <prvAddNewTaskToReadyList+0xbc>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d109      	bne.n	800691a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006906:	4a27      	ldr	r2, [pc, #156]	; (80069a4 <prvAddNewTaskToReadyList+0xbc>)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800690c:	4b24      	ldr	r3, [pc, #144]	; (80069a0 <prvAddNewTaskToReadyList+0xb8>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d110      	bne.n	8006936 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006914:	f000 fac4 	bl	8006ea0 <prvInitialiseTaskLists>
 8006918:	e00d      	b.n	8006936 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800691a:	4b23      	ldr	r3, [pc, #140]	; (80069a8 <prvAddNewTaskToReadyList+0xc0>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d109      	bne.n	8006936 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006922:	4b20      	ldr	r3, [pc, #128]	; (80069a4 <prvAddNewTaskToReadyList+0xbc>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692c:	429a      	cmp	r2, r3
 800692e:	d802      	bhi.n	8006936 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006930:	4a1c      	ldr	r2, [pc, #112]	; (80069a4 <prvAddNewTaskToReadyList+0xbc>)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006936:	4b1d      	ldr	r3, [pc, #116]	; (80069ac <prvAddNewTaskToReadyList+0xc4>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3301      	adds	r3, #1
 800693c:	4a1b      	ldr	r2, [pc, #108]	; (80069ac <prvAddNewTaskToReadyList+0xc4>)
 800693e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006944:	2201      	movs	r2, #1
 8006946:	409a      	lsls	r2, r3
 8006948:	4b19      	ldr	r3, [pc, #100]	; (80069b0 <prvAddNewTaskToReadyList+0xc8>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4313      	orrs	r3, r2
 800694e:	4a18      	ldr	r2, [pc, #96]	; (80069b0 <prvAddNewTaskToReadyList+0xc8>)
 8006950:	6013      	str	r3, [r2, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006956:	4613      	mov	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4a15      	ldr	r2, [pc, #84]	; (80069b4 <prvAddNewTaskToReadyList+0xcc>)
 8006960:	441a      	add	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	3304      	adds	r3, #4
 8006966:	4619      	mov	r1, r3
 8006968:	4610      	mov	r0, r2
 800696a:	f7ff fe09 	bl	8006580 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800696e:	f000 fcf5 	bl	800735c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006972:	4b0d      	ldr	r3, [pc, #52]	; (80069a8 <prvAddNewTaskToReadyList+0xc0>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00e      	beq.n	8006998 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800697a:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <prvAddNewTaskToReadyList+0xbc>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006984:	429a      	cmp	r2, r3
 8006986:	d207      	bcs.n	8006998 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006988:	4b0b      	ldr	r3, [pc, #44]	; (80069b8 <prvAddNewTaskToReadyList+0xd0>)
 800698a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006998:	bf00      	nop
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	200091a4 	.word	0x200091a4
 80069a4:	200090a4 	.word	0x200090a4
 80069a8:	200091b0 	.word	0x200091b0
 80069ac:	200091c0 	.word	0x200091c0
 80069b0:	200091ac 	.word	0x200091ac
 80069b4:	200090a8 	.word	0x200090a8
 80069b8:	e000ed04 	.word	0xe000ed04

080069bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80069c4:	2300      	movs	r3, #0
 80069c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d018      	beq.n	8006a00 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80069ce:	4b14      	ldr	r3, [pc, #80]	; (8006a20 <vTaskDelay+0x64>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00b      	beq.n	80069ee <vTaskDelay+0x32>
 80069d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069da:	b672      	cpsid	i
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	b662      	cpsie	i
 80069ea:	60bb      	str	r3, [r7, #8]
 80069ec:	e7fe      	b.n	80069ec <vTaskDelay+0x30>
			vTaskSuspendAll();
 80069ee:	f000 f87d 	bl	8006aec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80069f2:	2100      	movs	r1, #0
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 fb0f 	bl	8007018 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80069fa:	f000 f885 	bl	8006b08 <xTaskResumeAll>
 80069fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d107      	bne.n	8006a16 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006a06:	4b07      	ldr	r3, [pc, #28]	; (8006a24 <vTaskDelay+0x68>)
 8006a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a16:	bf00      	nop
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	200091cc 	.word	0x200091cc
 8006a24:	e000ed04 	.word	0xe000ed04

08006a28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08a      	sub	sp, #40	; 0x28
 8006a2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a32:	2300      	movs	r3, #0
 8006a34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a36:	463a      	mov	r2, r7
 8006a38:	1d39      	adds	r1, r7, #4
 8006a3a:	f107 0308 	add.w	r3, r7, #8
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fc fd34 	bl	80034ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	9202      	str	r2, [sp, #8]
 8006a4c:	9301      	str	r3, [sp, #4]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	2300      	movs	r3, #0
 8006a54:	460a      	mov	r2, r1
 8006a56:	491f      	ldr	r1, [pc, #124]	; (8006ad4 <vTaskStartScheduler+0xac>)
 8006a58:	481f      	ldr	r0, [pc, #124]	; (8006ad8 <vTaskStartScheduler+0xb0>)
 8006a5a:	f7ff fe18 	bl	800668e <xTaskCreateStatic>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	4b1e      	ldr	r3, [pc, #120]	; (8006adc <vTaskStartScheduler+0xb4>)
 8006a62:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a64:	4b1d      	ldr	r3, [pc, #116]	; (8006adc <vTaskStartScheduler+0xb4>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d002      	beq.n	8006a72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	617b      	str	r3, [r7, #20]
 8006a70:	e001      	b.n	8006a76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a72:	2300      	movs	r3, #0
 8006a74:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d117      	bne.n	8006aac <vTaskStartScheduler+0x84>
 8006a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a80:	b672      	cpsid	i
 8006a82:	f383 8811 	msr	BASEPRI, r3
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	b662      	cpsie	i
 8006a90:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a92:	4b13      	ldr	r3, [pc, #76]	; (8006ae0 <vTaskStartScheduler+0xb8>)
 8006a94:	f04f 32ff 	mov.w	r2, #4294967295
 8006a98:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a9a:	4b12      	ldr	r3, [pc, #72]	; (8006ae4 <vTaskStartScheduler+0xbc>)
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006aa0:	4b11      	ldr	r3, [pc, #68]	; (8006ae8 <vTaskStartScheduler+0xc0>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006aa6:	f000 fbab 	bl	8007200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006aaa:	e00f      	b.n	8006acc <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab2:	d10b      	bne.n	8006acc <vTaskStartScheduler+0xa4>
 8006ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab8:	b672      	cpsid	i
 8006aba:	f383 8811 	msr	BASEPRI, r3
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	b662      	cpsie	i
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	e7fe      	b.n	8006aca <vTaskStartScheduler+0xa2>
}
 8006acc:	bf00      	nop
 8006ace:	3718      	adds	r7, #24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	08008828 	.word	0x08008828
 8006ad8:	08006e71 	.word	0x08006e71
 8006adc:	200091c8 	.word	0x200091c8
 8006ae0:	200091c4 	.word	0x200091c4
 8006ae4:	200091b0 	.word	0x200091b0
 8006ae8:	200091a8 	.word	0x200091a8

08006aec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006aec:	b480      	push	{r7}
 8006aee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006af0:	4b04      	ldr	r3, [pc, #16]	; (8006b04 <vTaskSuspendAll+0x18>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	3301      	adds	r3, #1
 8006af6:	4a03      	ldr	r2, [pc, #12]	; (8006b04 <vTaskSuspendAll+0x18>)
 8006af8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006afa:	bf00      	nop
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr
 8006b04:	200091cc 	.word	0x200091cc

08006b08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b12:	2300      	movs	r3, #0
 8006b14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b16:	4b42      	ldr	r3, [pc, #264]	; (8006c20 <xTaskResumeAll+0x118>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10b      	bne.n	8006b36 <xTaskResumeAll+0x2e>
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	b672      	cpsid	i
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	b662      	cpsie	i
 8006b32:	603b      	str	r3, [r7, #0]
 8006b34:	e7fe      	b.n	8006b34 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b36:	f000 fbdf 	bl	80072f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b3a:	4b39      	ldr	r3, [pc, #228]	; (8006c20 <xTaskResumeAll+0x118>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	4a37      	ldr	r2, [pc, #220]	; (8006c20 <xTaskResumeAll+0x118>)
 8006b42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b44:	4b36      	ldr	r3, [pc, #216]	; (8006c20 <xTaskResumeAll+0x118>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d161      	bne.n	8006c10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b4c:	4b35      	ldr	r3, [pc, #212]	; (8006c24 <xTaskResumeAll+0x11c>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d05d      	beq.n	8006c10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b54:	e02e      	b.n	8006bb4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b56:	4b34      	ldr	r3, [pc, #208]	; (8006c28 <xTaskResumeAll+0x120>)
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	3318      	adds	r3, #24
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7ff fd69 	bl	800663a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7ff fd64 	bl	800663a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b76:	2201      	movs	r2, #1
 8006b78:	409a      	lsls	r2, r3
 8006b7a:	4b2c      	ldr	r3, [pc, #176]	; (8006c2c <xTaskResumeAll+0x124>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	4a2a      	ldr	r2, [pc, #168]	; (8006c2c <xTaskResumeAll+0x124>)
 8006b82:	6013      	str	r3, [r2, #0]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b88:	4613      	mov	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4a27      	ldr	r2, [pc, #156]	; (8006c30 <xTaskResumeAll+0x128>)
 8006b92:	441a      	add	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	3304      	adds	r3, #4
 8006b98:	4619      	mov	r1, r3
 8006b9a:	4610      	mov	r0, r2
 8006b9c:	f7ff fcf0 	bl	8006580 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba4:	4b23      	ldr	r3, [pc, #140]	; (8006c34 <xTaskResumeAll+0x12c>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d302      	bcc.n	8006bb4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006bae:	4b22      	ldr	r3, [pc, #136]	; (8006c38 <xTaskResumeAll+0x130>)
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bb4:	4b1c      	ldr	r3, [pc, #112]	; (8006c28 <xTaskResumeAll+0x120>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1cc      	bne.n	8006b56 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d001      	beq.n	8006bc6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006bc2:	f000 fa09 	bl	8006fd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006bc6:	4b1d      	ldr	r3, [pc, #116]	; (8006c3c <xTaskResumeAll+0x134>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d010      	beq.n	8006bf4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006bd2:	f000 f837 	bl	8006c44 <xTaskIncrementTick>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006bdc:	4b16      	ldr	r3, [pc, #88]	; (8006c38 <xTaskResumeAll+0x130>)
 8006bde:	2201      	movs	r2, #1
 8006be0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	3b01      	subs	r3, #1
 8006be6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1f1      	bne.n	8006bd2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006bee:	4b13      	ldr	r3, [pc, #76]	; (8006c3c <xTaskResumeAll+0x134>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006bf4:	4b10      	ldr	r3, [pc, #64]	; (8006c38 <xTaskResumeAll+0x130>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d009      	beq.n	8006c10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c00:	4b0f      	ldr	r3, [pc, #60]	; (8006c40 <xTaskResumeAll+0x138>)
 8006c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c06:	601a      	str	r2, [r3, #0]
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c10:	f000 fba4 	bl	800735c <vPortExitCritical>

	return xAlreadyYielded;
 8006c14:	68bb      	ldr	r3, [r7, #8]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	200091cc 	.word	0x200091cc
 8006c24:	200091a4 	.word	0x200091a4
 8006c28:	20009164 	.word	0x20009164
 8006c2c:	200091ac 	.word	0x200091ac
 8006c30:	200090a8 	.word	0x200090a8
 8006c34:	200090a4 	.word	0x200090a4
 8006c38:	200091b8 	.word	0x200091b8
 8006c3c:	200091b4 	.word	0x200091b4
 8006c40:	e000ed04 	.word	0xe000ed04

08006c44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c4e:	4b4f      	ldr	r3, [pc, #316]	; (8006d8c <xTaskIncrementTick+0x148>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f040 8089 	bne.w	8006d6a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c58:	4b4d      	ldr	r3, [pc, #308]	; (8006d90 <xTaskIncrementTick+0x14c>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c60:	4a4b      	ldr	r2, [pc, #300]	; (8006d90 <xTaskIncrementTick+0x14c>)
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d121      	bne.n	8006cb0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c6c:	4b49      	ldr	r3, [pc, #292]	; (8006d94 <xTaskIncrementTick+0x150>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00b      	beq.n	8006c8e <xTaskIncrementTick+0x4a>
 8006c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7a:	b672      	cpsid	i
 8006c7c:	f383 8811 	msr	BASEPRI, r3
 8006c80:	f3bf 8f6f 	isb	sy
 8006c84:	f3bf 8f4f 	dsb	sy
 8006c88:	b662      	cpsie	i
 8006c8a:	603b      	str	r3, [r7, #0]
 8006c8c:	e7fe      	b.n	8006c8c <xTaskIncrementTick+0x48>
 8006c8e:	4b41      	ldr	r3, [pc, #260]	; (8006d94 <xTaskIncrementTick+0x150>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	4b40      	ldr	r3, [pc, #256]	; (8006d98 <xTaskIncrementTick+0x154>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a3e      	ldr	r2, [pc, #248]	; (8006d94 <xTaskIncrementTick+0x150>)
 8006c9a:	6013      	str	r3, [r2, #0]
 8006c9c:	4a3e      	ldr	r2, [pc, #248]	; (8006d98 <xTaskIncrementTick+0x154>)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6013      	str	r3, [r2, #0]
 8006ca2:	4b3e      	ldr	r3, [pc, #248]	; (8006d9c <xTaskIncrementTick+0x158>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	4a3c      	ldr	r2, [pc, #240]	; (8006d9c <xTaskIncrementTick+0x158>)
 8006caa:	6013      	str	r3, [r2, #0]
 8006cac:	f000 f994 	bl	8006fd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006cb0:	4b3b      	ldr	r3, [pc, #236]	; (8006da0 <xTaskIncrementTick+0x15c>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d348      	bcc.n	8006d4c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cba:	4b36      	ldr	r3, [pc, #216]	; (8006d94 <xTaskIncrementTick+0x150>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d104      	bne.n	8006cce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cc4:	4b36      	ldr	r3, [pc, #216]	; (8006da0 <xTaskIncrementTick+0x15c>)
 8006cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cca:	601a      	str	r2, [r3, #0]
					break;
 8006ccc:	e03e      	b.n	8006d4c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cce:	4b31      	ldr	r3, [pc, #196]	; (8006d94 <xTaskIncrementTick+0x150>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d203      	bcs.n	8006cee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ce6:	4a2e      	ldr	r2, [pc, #184]	; (8006da0 <xTaskIncrementTick+0x15c>)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006cec:	e02e      	b.n	8006d4c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7ff fca1 	bl	800663a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d004      	beq.n	8006d0a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	3318      	adds	r3, #24
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7ff fc98 	bl	800663a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0e:	2201      	movs	r2, #1
 8006d10:	409a      	lsls	r2, r3
 8006d12:	4b24      	ldr	r3, [pc, #144]	; (8006da4 <xTaskIncrementTick+0x160>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	4a22      	ldr	r2, [pc, #136]	; (8006da4 <xTaskIncrementTick+0x160>)
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d20:	4613      	mov	r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4413      	add	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4a1f      	ldr	r2, [pc, #124]	; (8006da8 <xTaskIncrementTick+0x164>)
 8006d2a:	441a      	add	r2, r3
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	3304      	adds	r3, #4
 8006d30:	4619      	mov	r1, r3
 8006d32:	4610      	mov	r0, r2
 8006d34:	f7ff fc24 	bl	8006580 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d3c:	4b1b      	ldr	r3, [pc, #108]	; (8006dac <xTaskIncrementTick+0x168>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d3b9      	bcc.n	8006cba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006d46:	2301      	movs	r3, #1
 8006d48:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d4a:	e7b6      	b.n	8006cba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d4c:	4b17      	ldr	r3, [pc, #92]	; (8006dac <xTaskIncrementTick+0x168>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d52:	4915      	ldr	r1, [pc, #84]	; (8006da8 <xTaskIncrementTick+0x164>)
 8006d54:	4613      	mov	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	440b      	add	r3, r1
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d907      	bls.n	8006d74 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8006d64:	2301      	movs	r3, #1
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	e004      	b.n	8006d74 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006d6a:	4b11      	ldr	r3, [pc, #68]	; (8006db0 <xTaskIncrementTick+0x16c>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	4a0f      	ldr	r2, [pc, #60]	; (8006db0 <xTaskIncrementTick+0x16c>)
 8006d72:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006d74:	4b0f      	ldr	r3, [pc, #60]	; (8006db4 <xTaskIncrementTick+0x170>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006d80:	697b      	ldr	r3, [r7, #20]
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3718      	adds	r7, #24
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	200091cc 	.word	0x200091cc
 8006d90:	200091a8 	.word	0x200091a8
 8006d94:	2000915c 	.word	0x2000915c
 8006d98:	20009160 	.word	0x20009160
 8006d9c:	200091bc 	.word	0x200091bc
 8006da0:	200091c4 	.word	0x200091c4
 8006da4:	200091ac 	.word	0x200091ac
 8006da8:	200090a8 	.word	0x200090a8
 8006dac:	200090a4 	.word	0x200090a4
 8006db0:	200091b4 	.word	0x200091b4
 8006db4:	200091b8 	.word	0x200091b8

08006db8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006dbe:	4b27      	ldr	r3, [pc, #156]	; (8006e5c <vTaskSwitchContext+0xa4>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d003      	beq.n	8006dce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006dc6:	4b26      	ldr	r3, [pc, #152]	; (8006e60 <vTaskSwitchContext+0xa8>)
 8006dc8:	2201      	movs	r2, #1
 8006dca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006dcc:	e040      	b.n	8006e50 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006dce:	4b24      	ldr	r3, [pc, #144]	; (8006e60 <vTaskSwitchContext+0xa8>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dd4:	4b23      	ldr	r3, [pc, #140]	; (8006e64 <vTaskSwitchContext+0xac>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	fab3 f383 	clz	r3, r3
 8006de0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006de2:	7afb      	ldrb	r3, [r7, #11]
 8006de4:	f1c3 031f 	rsb	r3, r3, #31
 8006de8:	617b      	str	r3, [r7, #20]
 8006dea:	491f      	ldr	r1, [pc, #124]	; (8006e68 <vTaskSwitchContext+0xb0>)
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	4613      	mov	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	440b      	add	r3, r1
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10b      	bne.n	8006e16 <vTaskSwitchContext+0x5e>
	__asm volatile
 8006dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e02:	b672      	cpsid	i
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	b662      	cpsie	i
 8006e12:	607b      	str	r3, [r7, #4]
 8006e14:	e7fe      	b.n	8006e14 <vTaskSwitchContext+0x5c>
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4a11      	ldr	r2, [pc, #68]	; (8006e68 <vTaskSwitchContext+0xb0>)
 8006e22:	4413      	add	r3, r2
 8006e24:	613b      	str	r3, [r7, #16]
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	605a      	str	r2, [r3, #4]
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	685a      	ldr	r2, [r3, #4]
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	3308      	adds	r3, #8
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d104      	bne.n	8006e46 <vTaskSwitchContext+0x8e>
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	605a      	str	r2, [r3, #4]
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	4a07      	ldr	r2, [pc, #28]	; (8006e6c <vTaskSwitchContext+0xb4>)
 8006e4e:	6013      	str	r3, [r2, #0]
}
 8006e50:	bf00      	nop
 8006e52:	371c      	adds	r7, #28
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	200091cc 	.word	0x200091cc
 8006e60:	200091b8 	.word	0x200091b8
 8006e64:	200091ac 	.word	0x200091ac
 8006e68:	200090a8 	.word	0x200090a8
 8006e6c:	200090a4 	.word	0x200090a4

08006e70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e78:	f000 f852 	bl	8006f20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e7c:	4b06      	ldr	r3, [pc, #24]	; (8006e98 <prvIdleTask+0x28>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d9f9      	bls.n	8006e78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e84:	4b05      	ldr	r3, [pc, #20]	; (8006e9c <prvIdleTask+0x2c>)
 8006e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e8a:	601a      	str	r2, [r3, #0]
 8006e8c:	f3bf 8f4f 	dsb	sy
 8006e90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e94:	e7f0      	b.n	8006e78 <prvIdleTask+0x8>
 8006e96:	bf00      	nop
 8006e98:	200090a8 	.word	0x200090a8
 8006e9c:	e000ed04 	.word	0xe000ed04

08006ea0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	607b      	str	r3, [r7, #4]
 8006eaa:	e00c      	b.n	8006ec6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4a12      	ldr	r2, [pc, #72]	; (8006f00 <prvInitialiseTaskLists+0x60>)
 8006eb8:	4413      	add	r3, r2
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7ff fb33 	bl	8006526 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	607b      	str	r3, [r7, #4]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b06      	cmp	r3, #6
 8006eca:	d9ef      	bls.n	8006eac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ecc:	480d      	ldr	r0, [pc, #52]	; (8006f04 <prvInitialiseTaskLists+0x64>)
 8006ece:	f7ff fb2a 	bl	8006526 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ed2:	480d      	ldr	r0, [pc, #52]	; (8006f08 <prvInitialiseTaskLists+0x68>)
 8006ed4:	f7ff fb27 	bl	8006526 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ed8:	480c      	ldr	r0, [pc, #48]	; (8006f0c <prvInitialiseTaskLists+0x6c>)
 8006eda:	f7ff fb24 	bl	8006526 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ede:	480c      	ldr	r0, [pc, #48]	; (8006f10 <prvInitialiseTaskLists+0x70>)
 8006ee0:	f7ff fb21 	bl	8006526 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ee4:	480b      	ldr	r0, [pc, #44]	; (8006f14 <prvInitialiseTaskLists+0x74>)
 8006ee6:	f7ff fb1e 	bl	8006526 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006eea:	4b0b      	ldr	r3, [pc, #44]	; (8006f18 <prvInitialiseTaskLists+0x78>)
 8006eec:	4a05      	ldr	r2, [pc, #20]	; (8006f04 <prvInitialiseTaskLists+0x64>)
 8006eee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ef0:	4b0a      	ldr	r3, [pc, #40]	; (8006f1c <prvInitialiseTaskLists+0x7c>)
 8006ef2:	4a05      	ldr	r2, [pc, #20]	; (8006f08 <prvInitialiseTaskLists+0x68>)
 8006ef4:	601a      	str	r2, [r3, #0]
}
 8006ef6:	bf00      	nop
 8006ef8:	3708      	adds	r7, #8
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	200090a8 	.word	0x200090a8
 8006f04:	20009134 	.word	0x20009134
 8006f08:	20009148 	.word	0x20009148
 8006f0c:	20009164 	.word	0x20009164
 8006f10:	20009178 	.word	0x20009178
 8006f14:	20009190 	.word	0x20009190
 8006f18:	2000915c 	.word	0x2000915c
 8006f1c:	20009160 	.word	0x20009160

08006f20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f26:	e019      	b.n	8006f5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f28:	f000 f9e6 	bl	80072f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f2c:	4b0f      	ldr	r3, [pc, #60]	; (8006f6c <prvCheckTasksWaitingTermination+0x4c>)
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	3304      	adds	r3, #4
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7ff fb7e 	bl	800663a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f3e:	4b0c      	ldr	r3, [pc, #48]	; (8006f70 <prvCheckTasksWaitingTermination+0x50>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	4a0a      	ldr	r2, [pc, #40]	; (8006f70 <prvCheckTasksWaitingTermination+0x50>)
 8006f46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f48:	4b0a      	ldr	r3, [pc, #40]	; (8006f74 <prvCheckTasksWaitingTermination+0x54>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	4a09      	ldr	r2, [pc, #36]	; (8006f74 <prvCheckTasksWaitingTermination+0x54>)
 8006f50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f52:	f000 fa03 	bl	800735c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f80e 	bl	8006f78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f5c:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <prvCheckTasksWaitingTermination+0x54>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e1      	bne.n	8006f28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f64:	bf00      	nop
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	20009178 	.word	0x20009178
 8006f70:	200091a4 	.word	0x200091a4
 8006f74:	2000918c 	.word	0x2000918c

08006f78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d108      	bne.n	8006f9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 fb5a 	bl	8007648 <vPortFree>
				vPortFree( pxTCB );
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fb57 	bl	8007648 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f9a:	e019      	b.n	8006fd0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d103      	bne.n	8006fae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fb4e 	bl	8007648 <vPortFree>
	}
 8006fac:	e010      	b.n	8006fd0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d00b      	beq.n	8006fd0 <prvDeleteTCB+0x58>
 8006fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbc:	b672      	cpsid	i
 8006fbe:	f383 8811 	msr	BASEPRI, r3
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	b662      	cpsie	i
 8006fcc:	60fb      	str	r3, [r7, #12]
 8006fce:	e7fe      	b.n	8006fce <prvDeleteTCB+0x56>
	}
 8006fd0:	bf00      	nop
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fde:	4b0c      	ldr	r3, [pc, #48]	; (8007010 <prvResetNextTaskUnblockTime+0x38>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d104      	bne.n	8006ff2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006fe8:	4b0a      	ldr	r3, [pc, #40]	; (8007014 <prvResetNextTaskUnblockTime+0x3c>)
 8006fea:	f04f 32ff 	mov.w	r2, #4294967295
 8006fee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ff0:	e008      	b.n	8007004 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ff2:	4b07      	ldr	r3, [pc, #28]	; (8007010 <prvResetNextTaskUnblockTime+0x38>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	4a04      	ldr	r2, [pc, #16]	; (8007014 <prvResetNextTaskUnblockTime+0x3c>)
 8007002:	6013      	str	r3, [r2, #0]
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	2000915c 	.word	0x2000915c
 8007014:	200091c4 	.word	0x200091c4

08007018 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007022:	4b29      	ldr	r3, [pc, #164]	; (80070c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007028:	4b28      	ldr	r3, [pc, #160]	; (80070cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	3304      	adds	r3, #4
 800702e:	4618      	mov	r0, r3
 8007030:	f7ff fb03 	bl	800663a <uxListRemove>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10b      	bne.n	8007052 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800703a:	4b24      	ldr	r3, [pc, #144]	; (80070cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007040:	2201      	movs	r2, #1
 8007042:	fa02 f303 	lsl.w	r3, r2, r3
 8007046:	43da      	mvns	r2, r3
 8007048:	4b21      	ldr	r3, [pc, #132]	; (80070d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4013      	ands	r3, r2
 800704e:	4a20      	ldr	r2, [pc, #128]	; (80070d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007050:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007058:	d10a      	bne.n	8007070 <prvAddCurrentTaskToDelayedList+0x58>
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d007      	beq.n	8007070 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007060:	4b1a      	ldr	r3, [pc, #104]	; (80070cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3304      	adds	r3, #4
 8007066:	4619      	mov	r1, r3
 8007068:	481a      	ldr	r0, [pc, #104]	; (80070d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800706a:	f7ff fa89 	bl	8006580 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800706e:	e026      	b.n	80070be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4413      	add	r3, r2
 8007076:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007078:	4b14      	ldr	r3, [pc, #80]	; (80070cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	429a      	cmp	r2, r3
 8007086:	d209      	bcs.n	800709c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007088:	4b13      	ldr	r3, [pc, #76]	; (80070d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	4b0f      	ldr	r3, [pc, #60]	; (80070cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3304      	adds	r3, #4
 8007092:	4619      	mov	r1, r3
 8007094:	4610      	mov	r0, r2
 8007096:	f7ff fa97 	bl	80065c8 <vListInsert>
}
 800709a:	e010      	b.n	80070be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800709c:	4b0f      	ldr	r3, [pc, #60]	; (80070dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	4b0a      	ldr	r3, [pc, #40]	; (80070cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	3304      	adds	r3, #4
 80070a6:	4619      	mov	r1, r3
 80070a8:	4610      	mov	r0, r2
 80070aa:	f7ff fa8d 	bl	80065c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80070ae:	4b0c      	ldr	r3, [pc, #48]	; (80070e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d202      	bcs.n	80070be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80070b8:	4a09      	ldr	r2, [pc, #36]	; (80070e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	6013      	str	r3, [r2, #0]
}
 80070be:	bf00      	nop
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	200091a8 	.word	0x200091a8
 80070cc:	200090a4 	.word	0x200090a4
 80070d0:	200091ac 	.word	0x200091ac
 80070d4:	20009190 	.word	0x20009190
 80070d8:	20009160 	.word	0x20009160
 80070dc:	2000915c 	.word	0x2000915c
 80070e0:	200091c4 	.word	0x200091c4

080070e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	3b04      	subs	r3, #4
 80070f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80070fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	3b04      	subs	r3, #4
 8007102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	f023 0201 	bic.w	r2, r3, #1
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	3b04      	subs	r3, #4
 8007112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007114:	4a0c      	ldr	r2, [pc, #48]	; (8007148 <pxPortInitialiseStack+0x64>)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	3b14      	subs	r3, #20
 800711e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	3b04      	subs	r3, #4
 800712a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f06f 0202 	mvn.w	r2, #2
 8007132:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	3b20      	subs	r3, #32
 8007138:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800713a:	68fb      	ldr	r3, [r7, #12]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3714      	adds	r7, #20
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	0800714d 	.word	0x0800714d

0800714c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007152:	2300      	movs	r3, #0
 8007154:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007156:	4b13      	ldr	r3, [pc, #76]	; (80071a4 <prvTaskExitError+0x58>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800715e:	d00b      	beq.n	8007178 <prvTaskExitError+0x2c>
 8007160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007164:	b672      	cpsid	i
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	b662      	cpsie	i
 8007174:	60fb      	str	r3, [r7, #12]
 8007176:	e7fe      	b.n	8007176 <prvTaskExitError+0x2a>
 8007178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717c:	b672      	cpsid	i
 800717e:	f383 8811 	msr	BASEPRI, r3
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	f3bf 8f4f 	dsb	sy
 800718a:	b662      	cpsie	i
 800718c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800718e:	bf00      	nop
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d0fc      	beq.n	8007190 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007196:	bf00      	nop
 8007198:	3714      	adds	r7, #20
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	20008dc8 	.word	0x20008dc8
	...

080071b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80071b0:	4b07      	ldr	r3, [pc, #28]	; (80071d0 <pxCurrentTCBConst2>)
 80071b2:	6819      	ldr	r1, [r3, #0]
 80071b4:	6808      	ldr	r0, [r1, #0]
 80071b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ba:	f380 8809 	msr	PSP, r0
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f04f 0000 	mov.w	r0, #0
 80071c6:	f380 8811 	msr	BASEPRI, r0
 80071ca:	4770      	bx	lr
 80071cc:	f3af 8000 	nop.w

080071d0 <pxCurrentTCBConst2>:
 80071d0:	200090a4 	.word	0x200090a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80071d4:	bf00      	nop
 80071d6:	bf00      	nop

080071d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80071d8:	4808      	ldr	r0, [pc, #32]	; (80071fc <prvPortStartFirstTask+0x24>)
 80071da:	6800      	ldr	r0, [r0, #0]
 80071dc:	6800      	ldr	r0, [r0, #0]
 80071de:	f380 8808 	msr	MSP, r0
 80071e2:	f04f 0000 	mov.w	r0, #0
 80071e6:	f380 8814 	msr	CONTROL, r0
 80071ea:	b662      	cpsie	i
 80071ec:	b661      	cpsie	f
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	df00      	svc	0
 80071f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80071fa:	bf00      	nop
 80071fc:	e000ed08 	.word	0xe000ed08

08007200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007206:	4b36      	ldr	r3, [pc, #216]	; (80072e0 <xPortStartScheduler+0xe0>)
 8007208:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	b2db      	uxtb	r3, r3
 8007210:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	22ff      	movs	r2, #255	; 0xff
 8007216:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	b2db      	uxtb	r3, r3
 800721e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007220:	78fb      	ldrb	r3, [r7, #3]
 8007222:	b2db      	uxtb	r3, r3
 8007224:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007228:	b2da      	uxtb	r2, r3
 800722a:	4b2e      	ldr	r3, [pc, #184]	; (80072e4 <xPortStartScheduler+0xe4>)
 800722c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800722e:	4b2e      	ldr	r3, [pc, #184]	; (80072e8 <xPortStartScheduler+0xe8>)
 8007230:	2207      	movs	r2, #7
 8007232:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007234:	e009      	b.n	800724a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007236:	4b2c      	ldr	r3, [pc, #176]	; (80072e8 <xPortStartScheduler+0xe8>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	3b01      	subs	r3, #1
 800723c:	4a2a      	ldr	r2, [pc, #168]	; (80072e8 <xPortStartScheduler+0xe8>)
 800723e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007240:	78fb      	ldrb	r3, [r7, #3]
 8007242:	b2db      	uxtb	r3, r3
 8007244:	005b      	lsls	r3, r3, #1
 8007246:	b2db      	uxtb	r3, r3
 8007248:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800724a:	78fb      	ldrb	r3, [r7, #3]
 800724c:	b2db      	uxtb	r3, r3
 800724e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007252:	2b80      	cmp	r3, #128	; 0x80
 8007254:	d0ef      	beq.n	8007236 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007256:	4b24      	ldr	r3, [pc, #144]	; (80072e8 <xPortStartScheduler+0xe8>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f1c3 0307 	rsb	r3, r3, #7
 800725e:	2b04      	cmp	r3, #4
 8007260:	d00b      	beq.n	800727a <xPortStartScheduler+0x7a>
 8007262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007266:	b672      	cpsid	i
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	b662      	cpsie	i
 8007276:	60bb      	str	r3, [r7, #8]
 8007278:	e7fe      	b.n	8007278 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800727a:	4b1b      	ldr	r3, [pc, #108]	; (80072e8 <xPortStartScheduler+0xe8>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	021b      	lsls	r3, r3, #8
 8007280:	4a19      	ldr	r2, [pc, #100]	; (80072e8 <xPortStartScheduler+0xe8>)
 8007282:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007284:	4b18      	ldr	r3, [pc, #96]	; (80072e8 <xPortStartScheduler+0xe8>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800728c:	4a16      	ldr	r2, [pc, #88]	; (80072e8 <xPortStartScheduler+0xe8>)
 800728e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	b2da      	uxtb	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007298:	4b14      	ldr	r3, [pc, #80]	; (80072ec <xPortStartScheduler+0xec>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a13      	ldr	r2, [pc, #76]	; (80072ec <xPortStartScheduler+0xec>)
 800729e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072a2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80072a4:	4b11      	ldr	r3, [pc, #68]	; (80072ec <xPortStartScheduler+0xec>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a10      	ldr	r2, [pc, #64]	; (80072ec <xPortStartScheduler+0xec>)
 80072aa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80072ae:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80072b0:	f000 f8d4 	bl	800745c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80072b4:	4b0e      	ldr	r3, [pc, #56]	; (80072f0 <xPortStartScheduler+0xf0>)
 80072b6:	2200      	movs	r2, #0
 80072b8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80072ba:	f000 f8f3 	bl	80074a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80072be:	4b0d      	ldr	r3, [pc, #52]	; (80072f4 <xPortStartScheduler+0xf4>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a0c      	ldr	r2, [pc, #48]	; (80072f4 <xPortStartScheduler+0xf4>)
 80072c4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80072c8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80072ca:	f7ff ff85 	bl	80071d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80072ce:	f7ff fd73 	bl	8006db8 <vTaskSwitchContext>
	prvTaskExitError();
 80072d2:	f7ff ff3b 	bl	800714c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	e000e400 	.word	0xe000e400
 80072e4:	200091d0 	.word	0x200091d0
 80072e8:	200091d4 	.word	0x200091d4
 80072ec:	e000ed20 	.word	0xe000ed20
 80072f0:	20008dc8 	.word	0x20008dc8
 80072f4:	e000ef34 	.word	0xe000ef34

080072f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	b672      	cpsid	i
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	b662      	cpsie	i
 8007312:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007314:	4b0f      	ldr	r3, [pc, #60]	; (8007354 <vPortEnterCritical+0x5c>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3301      	adds	r3, #1
 800731a:	4a0e      	ldr	r2, [pc, #56]	; (8007354 <vPortEnterCritical+0x5c>)
 800731c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800731e:	4b0d      	ldr	r3, [pc, #52]	; (8007354 <vPortEnterCritical+0x5c>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d110      	bne.n	8007348 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007326:	4b0c      	ldr	r3, [pc, #48]	; (8007358 <vPortEnterCritical+0x60>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00b      	beq.n	8007348 <vPortEnterCritical+0x50>
 8007330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007334:	b672      	cpsid	i
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	b662      	cpsie	i
 8007344:	603b      	str	r3, [r7, #0]
 8007346:	e7fe      	b.n	8007346 <vPortEnterCritical+0x4e>
	}
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	20008dc8 	.word	0x20008dc8
 8007358:	e000ed04 	.word	0xe000ed04

0800735c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007362:	4b12      	ldr	r3, [pc, #72]	; (80073ac <vPortExitCritical+0x50>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10b      	bne.n	8007382 <vPortExitCritical+0x26>
 800736a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736e:	b672      	cpsid	i
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	b662      	cpsie	i
 800737e:	607b      	str	r3, [r7, #4]
 8007380:	e7fe      	b.n	8007380 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8007382:	4b0a      	ldr	r3, [pc, #40]	; (80073ac <vPortExitCritical+0x50>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3b01      	subs	r3, #1
 8007388:	4a08      	ldr	r2, [pc, #32]	; (80073ac <vPortExitCritical+0x50>)
 800738a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800738c:	4b07      	ldr	r3, [pc, #28]	; (80073ac <vPortExitCritical+0x50>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d104      	bne.n	800739e <vPortExitCritical+0x42>
 8007394:	2300      	movs	r3, #0
 8007396:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800739e:	bf00      	nop
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	20008dc8 	.word	0x20008dc8

080073b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80073b0:	f3ef 8009 	mrs	r0, PSP
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	4b15      	ldr	r3, [pc, #84]	; (8007410 <pxCurrentTCBConst>)
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	f01e 0f10 	tst.w	lr, #16
 80073c0:	bf08      	it	eq
 80073c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80073c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ca:	6010      	str	r0, [r2, #0]
 80073cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80073d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80073d4:	b672      	cpsid	i
 80073d6:	f380 8811 	msr	BASEPRI, r0
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	f3bf 8f6f 	isb	sy
 80073e2:	b662      	cpsie	i
 80073e4:	f7ff fce8 	bl	8006db8 <vTaskSwitchContext>
 80073e8:	f04f 0000 	mov.w	r0, #0
 80073ec:	f380 8811 	msr	BASEPRI, r0
 80073f0:	bc09      	pop	{r0, r3}
 80073f2:	6819      	ldr	r1, [r3, #0]
 80073f4:	6808      	ldr	r0, [r1, #0]
 80073f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073fa:	f01e 0f10 	tst.w	lr, #16
 80073fe:	bf08      	it	eq
 8007400:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007404:	f380 8809 	msr	PSP, r0
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop

08007410 <pxCurrentTCBConst>:
 8007410:	200090a4 	.word	0x200090a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007414:	bf00      	nop
 8007416:	bf00      	nop

08007418 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
	__asm volatile
 800741e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007422:	b672      	cpsid	i
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	b662      	cpsie	i
 8007432:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007434:	f7ff fc06 	bl	8006c44 <xTaskIncrementTick>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d003      	beq.n	8007446 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800743e:	4b06      	ldr	r3, [pc, #24]	; (8007458 <SysTick_Handler+0x40>)
 8007440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007444:	601a      	str	r2, [r3, #0]
 8007446:	2300      	movs	r3, #0
 8007448:	603b      	str	r3, [r7, #0]
	__asm volatile
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007450:	bf00      	nop
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	e000ed04 	.word	0xe000ed04

0800745c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800745c:	b480      	push	{r7}
 800745e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007460:	4b0b      	ldr	r3, [pc, #44]	; (8007490 <vPortSetupTimerInterrupt+0x34>)
 8007462:	2200      	movs	r2, #0
 8007464:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007466:	4b0b      	ldr	r3, [pc, #44]	; (8007494 <vPortSetupTimerInterrupt+0x38>)
 8007468:	2200      	movs	r2, #0
 800746a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800746c:	4b0a      	ldr	r3, [pc, #40]	; (8007498 <vPortSetupTimerInterrupt+0x3c>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a0a      	ldr	r2, [pc, #40]	; (800749c <vPortSetupTimerInterrupt+0x40>)
 8007472:	fba2 2303 	umull	r2, r3, r2, r3
 8007476:	099b      	lsrs	r3, r3, #6
 8007478:	4a09      	ldr	r2, [pc, #36]	; (80074a0 <vPortSetupTimerInterrupt+0x44>)
 800747a:	3b01      	subs	r3, #1
 800747c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800747e:	4b04      	ldr	r3, [pc, #16]	; (8007490 <vPortSetupTimerInterrupt+0x34>)
 8007480:	2207      	movs	r2, #7
 8007482:	601a      	str	r2, [r3, #0]
}
 8007484:	bf00      	nop
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	e000e010 	.word	0xe000e010
 8007494:	e000e018 	.word	0xe000e018
 8007498:	20008dbc 	.word	0x20008dbc
 800749c:	10624dd3 	.word	0x10624dd3
 80074a0:	e000e014 	.word	0xe000e014

080074a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80074a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80074b4 <vPortEnableVFP+0x10>
 80074a8:	6801      	ldr	r1, [r0, #0]
 80074aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80074ae:	6001      	str	r1, [r0, #0]
 80074b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80074b2:	bf00      	nop
 80074b4:	e000ed88 	.word	0xe000ed88

080074b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b08a      	sub	sp, #40	; 0x28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80074c0:	2300      	movs	r3, #0
 80074c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80074c4:	f7ff fb12 	bl	8006aec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80074c8:	4b5a      	ldr	r3, [pc, #360]	; (8007634 <pvPortMalloc+0x17c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d101      	bne.n	80074d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80074d0:	f000 f916 	bl	8007700 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074d4:	4b58      	ldr	r3, [pc, #352]	; (8007638 <pvPortMalloc+0x180>)
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4013      	ands	r3, r2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f040 8090 	bne.w	8007602 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d01e      	beq.n	8007526 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80074e8:	2208      	movs	r2, #8
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4413      	add	r3, r2
 80074ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d015      	beq.n	8007526 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f023 0307 	bic.w	r3, r3, #7
 8007500:	3308      	adds	r3, #8
 8007502:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f003 0307 	and.w	r3, r3, #7
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00b      	beq.n	8007526 <pvPortMalloc+0x6e>
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	b672      	cpsid	i
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	b662      	cpsie	i
 8007522:	617b      	str	r3, [r7, #20]
 8007524:	e7fe      	b.n	8007524 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d06a      	beq.n	8007602 <pvPortMalloc+0x14a>
 800752c:	4b43      	ldr	r3, [pc, #268]	; (800763c <pvPortMalloc+0x184>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	429a      	cmp	r2, r3
 8007534:	d865      	bhi.n	8007602 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007536:	4b42      	ldr	r3, [pc, #264]	; (8007640 <pvPortMalloc+0x188>)
 8007538:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800753a:	4b41      	ldr	r3, [pc, #260]	; (8007640 <pvPortMalloc+0x188>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007540:	e004      	b.n	800754c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007544:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	429a      	cmp	r2, r3
 8007554:	d903      	bls.n	800755e <pvPortMalloc+0xa6>
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1f1      	bne.n	8007542 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800755e:	4b35      	ldr	r3, [pc, #212]	; (8007634 <pvPortMalloc+0x17c>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007564:	429a      	cmp	r2, r3
 8007566:	d04c      	beq.n	8007602 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007568:	6a3b      	ldr	r3, [r7, #32]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2208      	movs	r2, #8
 800756e:	4413      	add	r3, r2
 8007570:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800757a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757c:	685a      	ldr	r2, [r3, #4]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	1ad2      	subs	r2, r2, r3
 8007582:	2308      	movs	r3, #8
 8007584:	005b      	lsls	r3, r3, #1
 8007586:	429a      	cmp	r2, r3
 8007588:	d920      	bls.n	80075cc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800758a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4413      	add	r3, r2
 8007590:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	f003 0307 	and.w	r3, r3, #7
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00b      	beq.n	80075b4 <pvPortMalloc+0xfc>
 800759c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a0:	b672      	cpsid	i
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	b662      	cpsie	i
 80075b0:	613b      	str	r3, [r7, #16]
 80075b2:	e7fe      	b.n	80075b2 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	1ad2      	subs	r2, r2, r3
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075c6:	69b8      	ldr	r0, [r7, #24]
 80075c8:	f000 f8fc 	bl	80077c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075cc:	4b1b      	ldr	r3, [pc, #108]	; (800763c <pvPortMalloc+0x184>)
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	4a19      	ldr	r2, [pc, #100]	; (800763c <pvPortMalloc+0x184>)
 80075d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075da:	4b18      	ldr	r3, [pc, #96]	; (800763c <pvPortMalloc+0x184>)
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	4b19      	ldr	r3, [pc, #100]	; (8007644 <pvPortMalloc+0x18c>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d203      	bcs.n	80075ee <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075e6:	4b15      	ldr	r3, [pc, #84]	; (800763c <pvPortMalloc+0x184>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a16      	ldr	r2, [pc, #88]	; (8007644 <pvPortMalloc+0x18c>)
 80075ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80075ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f0:	685a      	ldr	r2, [r3, #4]
 80075f2:	4b11      	ldr	r3, [pc, #68]	; (8007638 <pvPortMalloc+0x180>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	431a      	orrs	r2, r3
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80075fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fe:	2200      	movs	r2, #0
 8007600:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007602:	f7ff fa81 	bl	8006b08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	f003 0307 	and.w	r3, r3, #7
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00b      	beq.n	8007628 <pvPortMalloc+0x170>
 8007610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007614:	b672      	cpsid	i
 8007616:	f383 8811 	msr	BASEPRI, r3
 800761a:	f3bf 8f6f 	isb	sy
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	b662      	cpsie	i
 8007624:	60fb      	str	r3, [r7, #12]
 8007626:	e7fe      	b.n	8007626 <pvPortMalloc+0x16e>
	return pvReturn;
 8007628:	69fb      	ldr	r3, [r7, #28]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3728      	adds	r7, #40	; 0x28
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	2000cde0 	.word	0x2000cde0
 8007638:	2000cdec 	.word	0x2000cdec
 800763c:	2000cde4 	.word	0x2000cde4
 8007640:	2000cdd8 	.word	0x2000cdd8
 8007644:	2000cde8 	.word	0x2000cde8

08007648 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d04a      	beq.n	80076f0 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800765a:	2308      	movs	r3, #8
 800765c:	425b      	negs	r3, r3
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	4413      	add	r3, r2
 8007662:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	4b22      	ldr	r3, [pc, #136]	; (80076f8 <vPortFree+0xb0>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4013      	ands	r3, r2
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10b      	bne.n	800768e <vPortFree+0x46>
 8007676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767a:	b672      	cpsid	i
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	b662      	cpsie	i
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	e7fe      	b.n	800768c <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00b      	beq.n	80076ae <vPortFree+0x66>
 8007696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769a:	b672      	cpsid	i
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	b662      	cpsie	i
 80076aa:	60bb      	str	r3, [r7, #8]
 80076ac:	e7fe      	b.n	80076ac <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	4b11      	ldr	r3, [pc, #68]	; (80076f8 <vPortFree+0xb0>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4013      	ands	r3, r2
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d019      	beq.n	80076f0 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d115      	bne.n	80076f0 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	4b0b      	ldr	r3, [pc, #44]	; (80076f8 <vPortFree+0xb0>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	43db      	mvns	r3, r3
 80076ce:	401a      	ands	r2, r3
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80076d4:	f7ff fa0a 	bl	8006aec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	4b07      	ldr	r3, [pc, #28]	; (80076fc <vPortFree+0xb4>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4413      	add	r3, r2
 80076e2:	4a06      	ldr	r2, [pc, #24]	; (80076fc <vPortFree+0xb4>)
 80076e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076e6:	6938      	ldr	r0, [r7, #16]
 80076e8:	f000 f86c 	bl	80077c4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80076ec:	f7ff fa0c 	bl	8006b08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80076f0:	bf00      	nop
 80076f2:	3718      	adds	r7, #24
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	2000cdec 	.word	0x2000cdec
 80076fc:	2000cde4 	.word	0x2000cde4

08007700 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007706:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800770a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800770c:	4b27      	ldr	r3, [pc, #156]	; (80077ac <prvHeapInit+0xac>)
 800770e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f003 0307 	and.w	r3, r3, #7
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00c      	beq.n	8007734 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	3307      	adds	r3, #7
 800771e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f023 0307 	bic.w	r3, r3, #7
 8007726:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	4a1f      	ldr	r2, [pc, #124]	; (80077ac <prvHeapInit+0xac>)
 8007730:	4413      	add	r3, r2
 8007732:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007738:	4a1d      	ldr	r2, [pc, #116]	; (80077b0 <prvHeapInit+0xb0>)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800773e:	4b1c      	ldr	r3, [pc, #112]	; (80077b0 <prvHeapInit+0xb0>)
 8007740:	2200      	movs	r2, #0
 8007742:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	4413      	add	r3, r2
 800774a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800774c:	2208      	movs	r2, #8
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	1a9b      	subs	r3, r3, r2
 8007752:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f023 0307 	bic.w	r3, r3, #7
 800775a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	4a15      	ldr	r2, [pc, #84]	; (80077b4 <prvHeapInit+0xb4>)
 8007760:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007762:	4b14      	ldr	r3, [pc, #80]	; (80077b4 <prvHeapInit+0xb4>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2200      	movs	r2, #0
 8007768:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800776a:	4b12      	ldr	r3, [pc, #72]	; (80077b4 <prvHeapInit+0xb4>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2200      	movs	r2, #0
 8007770:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	1ad2      	subs	r2, r2, r3
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007780:	4b0c      	ldr	r3, [pc, #48]	; (80077b4 <prvHeapInit+0xb4>)
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	4a0a      	ldr	r2, [pc, #40]	; (80077b8 <prvHeapInit+0xb8>)
 800778e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	4a09      	ldr	r2, [pc, #36]	; (80077bc <prvHeapInit+0xbc>)
 8007796:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007798:	4b09      	ldr	r3, [pc, #36]	; (80077c0 <prvHeapInit+0xc0>)
 800779a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800779e:	601a      	str	r2, [r3, #0]
}
 80077a0:	bf00      	nop
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	200091d8 	.word	0x200091d8
 80077b0:	2000cdd8 	.word	0x2000cdd8
 80077b4:	2000cde0 	.word	0x2000cde0
 80077b8:	2000cde8 	.word	0x2000cde8
 80077bc:	2000cde4 	.word	0x2000cde4
 80077c0:	2000cdec 	.word	0x2000cdec

080077c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077cc:	4b28      	ldr	r3, [pc, #160]	; (8007870 <prvInsertBlockIntoFreeList+0xac>)
 80077ce:	60fb      	str	r3, [r7, #12]
 80077d0:	e002      	b.n	80077d8 <prvInsertBlockIntoFreeList+0x14>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d8f7      	bhi.n	80077d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	4413      	add	r3, r2
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d108      	bne.n	8007806 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	441a      	add	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	441a      	add	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	429a      	cmp	r2, r3
 8007818:	d118      	bne.n	800784c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	4b15      	ldr	r3, [pc, #84]	; (8007874 <prvInsertBlockIntoFreeList+0xb0>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	429a      	cmp	r2, r3
 8007824:	d00d      	beq.n	8007842 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685a      	ldr	r2, [r3, #4]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	441a      	add	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	601a      	str	r2, [r3, #0]
 8007840:	e008      	b.n	8007854 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007842:	4b0c      	ldr	r3, [pc, #48]	; (8007874 <prvInsertBlockIntoFreeList+0xb0>)
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	e003      	b.n	8007854 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	429a      	cmp	r2, r3
 800785a:	d002      	beq.n	8007862 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007862:	bf00      	nop
 8007864:	3714      	adds	r7, #20
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	2000cdd8 	.word	0x2000cdd8
 8007874:	2000cde0 	.word	0x2000cde0

08007878 <__errno>:
 8007878:	4b01      	ldr	r3, [pc, #4]	; (8007880 <__errno+0x8>)
 800787a:	6818      	ldr	r0, [r3, #0]
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	20008dcc 	.word	0x20008dcc

08007884 <__libc_init_array>:
 8007884:	b570      	push	{r4, r5, r6, lr}
 8007886:	4e0d      	ldr	r6, [pc, #52]	; (80078bc <__libc_init_array+0x38>)
 8007888:	4c0d      	ldr	r4, [pc, #52]	; (80078c0 <__libc_init_array+0x3c>)
 800788a:	1ba4      	subs	r4, r4, r6
 800788c:	10a4      	asrs	r4, r4, #2
 800788e:	2500      	movs	r5, #0
 8007890:	42a5      	cmp	r5, r4
 8007892:	d109      	bne.n	80078a8 <__libc_init_array+0x24>
 8007894:	4e0b      	ldr	r6, [pc, #44]	; (80078c4 <__libc_init_array+0x40>)
 8007896:	4c0c      	ldr	r4, [pc, #48]	; (80078c8 <__libc_init_array+0x44>)
 8007898:	f000 ff82 	bl	80087a0 <_init>
 800789c:	1ba4      	subs	r4, r4, r6
 800789e:	10a4      	asrs	r4, r4, #2
 80078a0:	2500      	movs	r5, #0
 80078a2:	42a5      	cmp	r5, r4
 80078a4:	d105      	bne.n	80078b2 <__libc_init_array+0x2e>
 80078a6:	bd70      	pop	{r4, r5, r6, pc}
 80078a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078ac:	4798      	blx	r3
 80078ae:	3501      	adds	r5, #1
 80078b0:	e7ee      	b.n	8007890 <__libc_init_array+0xc>
 80078b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078b6:	4798      	blx	r3
 80078b8:	3501      	adds	r5, #1
 80078ba:	e7f2      	b.n	80078a2 <__libc_init_array+0x1e>
 80078bc:	080088e8 	.word	0x080088e8
 80078c0:	080088e8 	.word	0x080088e8
 80078c4:	080088e8 	.word	0x080088e8
 80078c8:	080088ec 	.word	0x080088ec

080078cc <memmove>:
 80078cc:	4288      	cmp	r0, r1
 80078ce:	b510      	push	{r4, lr}
 80078d0:	eb01 0302 	add.w	r3, r1, r2
 80078d4:	d807      	bhi.n	80078e6 <memmove+0x1a>
 80078d6:	1e42      	subs	r2, r0, #1
 80078d8:	4299      	cmp	r1, r3
 80078da:	d00a      	beq.n	80078f2 <memmove+0x26>
 80078dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078e0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80078e4:	e7f8      	b.n	80078d8 <memmove+0xc>
 80078e6:	4283      	cmp	r3, r0
 80078e8:	d9f5      	bls.n	80078d6 <memmove+0xa>
 80078ea:	1881      	adds	r1, r0, r2
 80078ec:	1ad2      	subs	r2, r2, r3
 80078ee:	42d3      	cmn	r3, r2
 80078f0:	d100      	bne.n	80078f4 <memmove+0x28>
 80078f2:	bd10      	pop	{r4, pc}
 80078f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078f8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80078fc:	e7f7      	b.n	80078ee <memmove+0x22>

080078fe <memset>:
 80078fe:	4402      	add	r2, r0
 8007900:	4603      	mov	r3, r0
 8007902:	4293      	cmp	r3, r2
 8007904:	d100      	bne.n	8007908 <memset+0xa>
 8007906:	4770      	bx	lr
 8007908:	f803 1b01 	strb.w	r1, [r3], #1
 800790c:	e7f9      	b.n	8007902 <memset+0x4>
	...

08007910 <iprintf>:
 8007910:	b40f      	push	{r0, r1, r2, r3}
 8007912:	4b0a      	ldr	r3, [pc, #40]	; (800793c <iprintf+0x2c>)
 8007914:	b513      	push	{r0, r1, r4, lr}
 8007916:	681c      	ldr	r4, [r3, #0]
 8007918:	b124      	cbz	r4, 8007924 <iprintf+0x14>
 800791a:	69a3      	ldr	r3, [r4, #24]
 800791c:	b913      	cbnz	r3, 8007924 <iprintf+0x14>
 800791e:	4620      	mov	r0, r4
 8007920:	f000 fa22 	bl	8007d68 <__sinit>
 8007924:	ab05      	add	r3, sp, #20
 8007926:	9a04      	ldr	r2, [sp, #16]
 8007928:	68a1      	ldr	r1, [r4, #8]
 800792a:	9301      	str	r3, [sp, #4]
 800792c:	4620      	mov	r0, r4
 800792e:	f000 fbdb 	bl	80080e8 <_vfiprintf_r>
 8007932:	b002      	add	sp, #8
 8007934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007938:	b004      	add	sp, #16
 800793a:	4770      	bx	lr
 800793c:	20008dcc 	.word	0x20008dcc

08007940 <_puts_r>:
 8007940:	b570      	push	{r4, r5, r6, lr}
 8007942:	460e      	mov	r6, r1
 8007944:	4605      	mov	r5, r0
 8007946:	b118      	cbz	r0, 8007950 <_puts_r+0x10>
 8007948:	6983      	ldr	r3, [r0, #24]
 800794a:	b90b      	cbnz	r3, 8007950 <_puts_r+0x10>
 800794c:	f000 fa0c 	bl	8007d68 <__sinit>
 8007950:	69ab      	ldr	r3, [r5, #24]
 8007952:	68ac      	ldr	r4, [r5, #8]
 8007954:	b913      	cbnz	r3, 800795c <_puts_r+0x1c>
 8007956:	4628      	mov	r0, r5
 8007958:	f000 fa06 	bl	8007d68 <__sinit>
 800795c:	4b23      	ldr	r3, [pc, #140]	; (80079ec <_puts_r+0xac>)
 800795e:	429c      	cmp	r4, r3
 8007960:	d117      	bne.n	8007992 <_puts_r+0x52>
 8007962:	686c      	ldr	r4, [r5, #4]
 8007964:	89a3      	ldrh	r3, [r4, #12]
 8007966:	071b      	lsls	r3, r3, #28
 8007968:	d51d      	bpl.n	80079a6 <_puts_r+0x66>
 800796a:	6923      	ldr	r3, [r4, #16]
 800796c:	b1db      	cbz	r3, 80079a6 <_puts_r+0x66>
 800796e:	3e01      	subs	r6, #1
 8007970:	68a3      	ldr	r3, [r4, #8]
 8007972:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007976:	3b01      	subs	r3, #1
 8007978:	60a3      	str	r3, [r4, #8]
 800797a:	b9e9      	cbnz	r1, 80079b8 <_puts_r+0x78>
 800797c:	2b00      	cmp	r3, #0
 800797e:	da2e      	bge.n	80079de <_puts_r+0x9e>
 8007980:	4622      	mov	r2, r4
 8007982:	210a      	movs	r1, #10
 8007984:	4628      	mov	r0, r5
 8007986:	f000 f83f 	bl	8007a08 <__swbuf_r>
 800798a:	3001      	adds	r0, #1
 800798c:	d011      	beq.n	80079b2 <_puts_r+0x72>
 800798e:	200a      	movs	r0, #10
 8007990:	e011      	b.n	80079b6 <_puts_r+0x76>
 8007992:	4b17      	ldr	r3, [pc, #92]	; (80079f0 <_puts_r+0xb0>)
 8007994:	429c      	cmp	r4, r3
 8007996:	d101      	bne.n	800799c <_puts_r+0x5c>
 8007998:	68ac      	ldr	r4, [r5, #8]
 800799a:	e7e3      	b.n	8007964 <_puts_r+0x24>
 800799c:	4b15      	ldr	r3, [pc, #84]	; (80079f4 <_puts_r+0xb4>)
 800799e:	429c      	cmp	r4, r3
 80079a0:	bf08      	it	eq
 80079a2:	68ec      	ldreq	r4, [r5, #12]
 80079a4:	e7de      	b.n	8007964 <_puts_r+0x24>
 80079a6:	4621      	mov	r1, r4
 80079a8:	4628      	mov	r0, r5
 80079aa:	f000 f87f 	bl	8007aac <__swsetup_r>
 80079ae:	2800      	cmp	r0, #0
 80079b0:	d0dd      	beq.n	800796e <_puts_r+0x2e>
 80079b2:	f04f 30ff 	mov.w	r0, #4294967295
 80079b6:	bd70      	pop	{r4, r5, r6, pc}
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	da04      	bge.n	80079c6 <_puts_r+0x86>
 80079bc:	69a2      	ldr	r2, [r4, #24]
 80079be:	429a      	cmp	r2, r3
 80079c0:	dc06      	bgt.n	80079d0 <_puts_r+0x90>
 80079c2:	290a      	cmp	r1, #10
 80079c4:	d004      	beq.n	80079d0 <_puts_r+0x90>
 80079c6:	6823      	ldr	r3, [r4, #0]
 80079c8:	1c5a      	adds	r2, r3, #1
 80079ca:	6022      	str	r2, [r4, #0]
 80079cc:	7019      	strb	r1, [r3, #0]
 80079ce:	e7cf      	b.n	8007970 <_puts_r+0x30>
 80079d0:	4622      	mov	r2, r4
 80079d2:	4628      	mov	r0, r5
 80079d4:	f000 f818 	bl	8007a08 <__swbuf_r>
 80079d8:	3001      	adds	r0, #1
 80079da:	d1c9      	bne.n	8007970 <_puts_r+0x30>
 80079dc:	e7e9      	b.n	80079b2 <_puts_r+0x72>
 80079de:	6823      	ldr	r3, [r4, #0]
 80079e0:	200a      	movs	r0, #10
 80079e2:	1c5a      	adds	r2, r3, #1
 80079e4:	6022      	str	r2, [r4, #0]
 80079e6:	7018      	strb	r0, [r3, #0]
 80079e8:	e7e5      	b.n	80079b6 <_puts_r+0x76>
 80079ea:	bf00      	nop
 80079ec:	0800886c 	.word	0x0800886c
 80079f0:	0800888c 	.word	0x0800888c
 80079f4:	0800884c 	.word	0x0800884c

080079f8 <puts>:
 80079f8:	4b02      	ldr	r3, [pc, #8]	; (8007a04 <puts+0xc>)
 80079fa:	4601      	mov	r1, r0
 80079fc:	6818      	ldr	r0, [r3, #0]
 80079fe:	f7ff bf9f 	b.w	8007940 <_puts_r>
 8007a02:	bf00      	nop
 8007a04:	20008dcc 	.word	0x20008dcc

08007a08 <__swbuf_r>:
 8007a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0a:	460e      	mov	r6, r1
 8007a0c:	4614      	mov	r4, r2
 8007a0e:	4605      	mov	r5, r0
 8007a10:	b118      	cbz	r0, 8007a1a <__swbuf_r+0x12>
 8007a12:	6983      	ldr	r3, [r0, #24]
 8007a14:	b90b      	cbnz	r3, 8007a1a <__swbuf_r+0x12>
 8007a16:	f000 f9a7 	bl	8007d68 <__sinit>
 8007a1a:	4b21      	ldr	r3, [pc, #132]	; (8007aa0 <__swbuf_r+0x98>)
 8007a1c:	429c      	cmp	r4, r3
 8007a1e:	d12a      	bne.n	8007a76 <__swbuf_r+0x6e>
 8007a20:	686c      	ldr	r4, [r5, #4]
 8007a22:	69a3      	ldr	r3, [r4, #24]
 8007a24:	60a3      	str	r3, [r4, #8]
 8007a26:	89a3      	ldrh	r3, [r4, #12]
 8007a28:	071a      	lsls	r2, r3, #28
 8007a2a:	d52e      	bpl.n	8007a8a <__swbuf_r+0x82>
 8007a2c:	6923      	ldr	r3, [r4, #16]
 8007a2e:	b363      	cbz	r3, 8007a8a <__swbuf_r+0x82>
 8007a30:	6923      	ldr	r3, [r4, #16]
 8007a32:	6820      	ldr	r0, [r4, #0]
 8007a34:	1ac0      	subs	r0, r0, r3
 8007a36:	6963      	ldr	r3, [r4, #20]
 8007a38:	b2f6      	uxtb	r6, r6
 8007a3a:	4283      	cmp	r3, r0
 8007a3c:	4637      	mov	r7, r6
 8007a3e:	dc04      	bgt.n	8007a4a <__swbuf_r+0x42>
 8007a40:	4621      	mov	r1, r4
 8007a42:	4628      	mov	r0, r5
 8007a44:	f000 f926 	bl	8007c94 <_fflush_r>
 8007a48:	bb28      	cbnz	r0, 8007a96 <__swbuf_r+0x8e>
 8007a4a:	68a3      	ldr	r3, [r4, #8]
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	60a3      	str	r3, [r4, #8]
 8007a50:	6823      	ldr	r3, [r4, #0]
 8007a52:	1c5a      	adds	r2, r3, #1
 8007a54:	6022      	str	r2, [r4, #0]
 8007a56:	701e      	strb	r6, [r3, #0]
 8007a58:	6963      	ldr	r3, [r4, #20]
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	4283      	cmp	r3, r0
 8007a5e:	d004      	beq.n	8007a6a <__swbuf_r+0x62>
 8007a60:	89a3      	ldrh	r3, [r4, #12]
 8007a62:	07db      	lsls	r3, r3, #31
 8007a64:	d519      	bpl.n	8007a9a <__swbuf_r+0x92>
 8007a66:	2e0a      	cmp	r6, #10
 8007a68:	d117      	bne.n	8007a9a <__swbuf_r+0x92>
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	f000 f911 	bl	8007c94 <_fflush_r>
 8007a72:	b190      	cbz	r0, 8007a9a <__swbuf_r+0x92>
 8007a74:	e00f      	b.n	8007a96 <__swbuf_r+0x8e>
 8007a76:	4b0b      	ldr	r3, [pc, #44]	; (8007aa4 <__swbuf_r+0x9c>)
 8007a78:	429c      	cmp	r4, r3
 8007a7a:	d101      	bne.n	8007a80 <__swbuf_r+0x78>
 8007a7c:	68ac      	ldr	r4, [r5, #8]
 8007a7e:	e7d0      	b.n	8007a22 <__swbuf_r+0x1a>
 8007a80:	4b09      	ldr	r3, [pc, #36]	; (8007aa8 <__swbuf_r+0xa0>)
 8007a82:	429c      	cmp	r4, r3
 8007a84:	bf08      	it	eq
 8007a86:	68ec      	ldreq	r4, [r5, #12]
 8007a88:	e7cb      	b.n	8007a22 <__swbuf_r+0x1a>
 8007a8a:	4621      	mov	r1, r4
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	f000 f80d 	bl	8007aac <__swsetup_r>
 8007a92:	2800      	cmp	r0, #0
 8007a94:	d0cc      	beq.n	8007a30 <__swbuf_r+0x28>
 8007a96:	f04f 37ff 	mov.w	r7, #4294967295
 8007a9a:	4638      	mov	r0, r7
 8007a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	0800886c 	.word	0x0800886c
 8007aa4:	0800888c 	.word	0x0800888c
 8007aa8:	0800884c 	.word	0x0800884c

08007aac <__swsetup_r>:
 8007aac:	4b32      	ldr	r3, [pc, #200]	; (8007b78 <__swsetup_r+0xcc>)
 8007aae:	b570      	push	{r4, r5, r6, lr}
 8007ab0:	681d      	ldr	r5, [r3, #0]
 8007ab2:	4606      	mov	r6, r0
 8007ab4:	460c      	mov	r4, r1
 8007ab6:	b125      	cbz	r5, 8007ac2 <__swsetup_r+0x16>
 8007ab8:	69ab      	ldr	r3, [r5, #24]
 8007aba:	b913      	cbnz	r3, 8007ac2 <__swsetup_r+0x16>
 8007abc:	4628      	mov	r0, r5
 8007abe:	f000 f953 	bl	8007d68 <__sinit>
 8007ac2:	4b2e      	ldr	r3, [pc, #184]	; (8007b7c <__swsetup_r+0xd0>)
 8007ac4:	429c      	cmp	r4, r3
 8007ac6:	d10f      	bne.n	8007ae8 <__swsetup_r+0x3c>
 8007ac8:	686c      	ldr	r4, [r5, #4]
 8007aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	0715      	lsls	r5, r2, #28
 8007ad2:	d42c      	bmi.n	8007b2e <__swsetup_r+0x82>
 8007ad4:	06d0      	lsls	r0, r2, #27
 8007ad6:	d411      	bmi.n	8007afc <__swsetup_r+0x50>
 8007ad8:	2209      	movs	r2, #9
 8007ada:	6032      	str	r2, [r6, #0]
 8007adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ae0:	81a3      	strh	r3, [r4, #12]
 8007ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae6:	e03e      	b.n	8007b66 <__swsetup_r+0xba>
 8007ae8:	4b25      	ldr	r3, [pc, #148]	; (8007b80 <__swsetup_r+0xd4>)
 8007aea:	429c      	cmp	r4, r3
 8007aec:	d101      	bne.n	8007af2 <__swsetup_r+0x46>
 8007aee:	68ac      	ldr	r4, [r5, #8]
 8007af0:	e7eb      	b.n	8007aca <__swsetup_r+0x1e>
 8007af2:	4b24      	ldr	r3, [pc, #144]	; (8007b84 <__swsetup_r+0xd8>)
 8007af4:	429c      	cmp	r4, r3
 8007af6:	bf08      	it	eq
 8007af8:	68ec      	ldreq	r4, [r5, #12]
 8007afa:	e7e6      	b.n	8007aca <__swsetup_r+0x1e>
 8007afc:	0751      	lsls	r1, r2, #29
 8007afe:	d512      	bpl.n	8007b26 <__swsetup_r+0x7a>
 8007b00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b02:	b141      	cbz	r1, 8007b16 <__swsetup_r+0x6a>
 8007b04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b08:	4299      	cmp	r1, r3
 8007b0a:	d002      	beq.n	8007b12 <__swsetup_r+0x66>
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	f000 fa19 	bl	8007f44 <_free_r>
 8007b12:	2300      	movs	r3, #0
 8007b14:	6363      	str	r3, [r4, #52]	; 0x34
 8007b16:	89a3      	ldrh	r3, [r4, #12]
 8007b18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b1c:	81a3      	strh	r3, [r4, #12]
 8007b1e:	2300      	movs	r3, #0
 8007b20:	6063      	str	r3, [r4, #4]
 8007b22:	6923      	ldr	r3, [r4, #16]
 8007b24:	6023      	str	r3, [r4, #0]
 8007b26:	89a3      	ldrh	r3, [r4, #12]
 8007b28:	f043 0308 	orr.w	r3, r3, #8
 8007b2c:	81a3      	strh	r3, [r4, #12]
 8007b2e:	6923      	ldr	r3, [r4, #16]
 8007b30:	b94b      	cbnz	r3, 8007b46 <__swsetup_r+0x9a>
 8007b32:	89a3      	ldrh	r3, [r4, #12]
 8007b34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b3c:	d003      	beq.n	8007b46 <__swsetup_r+0x9a>
 8007b3e:	4621      	mov	r1, r4
 8007b40:	4630      	mov	r0, r6
 8007b42:	f000 f9bf 	bl	8007ec4 <__smakebuf_r>
 8007b46:	89a2      	ldrh	r2, [r4, #12]
 8007b48:	f012 0301 	ands.w	r3, r2, #1
 8007b4c:	d00c      	beq.n	8007b68 <__swsetup_r+0xbc>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	60a3      	str	r3, [r4, #8]
 8007b52:	6963      	ldr	r3, [r4, #20]
 8007b54:	425b      	negs	r3, r3
 8007b56:	61a3      	str	r3, [r4, #24]
 8007b58:	6923      	ldr	r3, [r4, #16]
 8007b5a:	b953      	cbnz	r3, 8007b72 <__swsetup_r+0xc6>
 8007b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b60:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007b64:	d1ba      	bne.n	8007adc <__swsetup_r+0x30>
 8007b66:	bd70      	pop	{r4, r5, r6, pc}
 8007b68:	0792      	lsls	r2, r2, #30
 8007b6a:	bf58      	it	pl
 8007b6c:	6963      	ldrpl	r3, [r4, #20]
 8007b6e:	60a3      	str	r3, [r4, #8]
 8007b70:	e7f2      	b.n	8007b58 <__swsetup_r+0xac>
 8007b72:	2000      	movs	r0, #0
 8007b74:	e7f7      	b.n	8007b66 <__swsetup_r+0xba>
 8007b76:	bf00      	nop
 8007b78:	20008dcc 	.word	0x20008dcc
 8007b7c:	0800886c 	.word	0x0800886c
 8007b80:	0800888c 	.word	0x0800888c
 8007b84:	0800884c 	.word	0x0800884c

08007b88 <__sflush_r>:
 8007b88:	898a      	ldrh	r2, [r1, #12]
 8007b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b8e:	4605      	mov	r5, r0
 8007b90:	0710      	lsls	r0, r2, #28
 8007b92:	460c      	mov	r4, r1
 8007b94:	d458      	bmi.n	8007c48 <__sflush_r+0xc0>
 8007b96:	684b      	ldr	r3, [r1, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	dc05      	bgt.n	8007ba8 <__sflush_r+0x20>
 8007b9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	dc02      	bgt.n	8007ba8 <__sflush_r+0x20>
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ba8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007baa:	2e00      	cmp	r6, #0
 8007bac:	d0f9      	beq.n	8007ba2 <__sflush_r+0x1a>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bb4:	682f      	ldr	r7, [r5, #0]
 8007bb6:	6a21      	ldr	r1, [r4, #32]
 8007bb8:	602b      	str	r3, [r5, #0]
 8007bba:	d032      	beq.n	8007c22 <__sflush_r+0x9a>
 8007bbc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bbe:	89a3      	ldrh	r3, [r4, #12]
 8007bc0:	075a      	lsls	r2, r3, #29
 8007bc2:	d505      	bpl.n	8007bd0 <__sflush_r+0x48>
 8007bc4:	6863      	ldr	r3, [r4, #4]
 8007bc6:	1ac0      	subs	r0, r0, r3
 8007bc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bca:	b10b      	cbz	r3, 8007bd0 <__sflush_r+0x48>
 8007bcc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bce:	1ac0      	subs	r0, r0, r3
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bd6:	6a21      	ldr	r1, [r4, #32]
 8007bd8:	4628      	mov	r0, r5
 8007bda:	47b0      	blx	r6
 8007bdc:	1c43      	adds	r3, r0, #1
 8007bde:	89a3      	ldrh	r3, [r4, #12]
 8007be0:	d106      	bne.n	8007bf0 <__sflush_r+0x68>
 8007be2:	6829      	ldr	r1, [r5, #0]
 8007be4:	291d      	cmp	r1, #29
 8007be6:	d848      	bhi.n	8007c7a <__sflush_r+0xf2>
 8007be8:	4a29      	ldr	r2, [pc, #164]	; (8007c90 <__sflush_r+0x108>)
 8007bea:	40ca      	lsrs	r2, r1
 8007bec:	07d6      	lsls	r6, r2, #31
 8007bee:	d544      	bpl.n	8007c7a <__sflush_r+0xf2>
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	6062      	str	r2, [r4, #4]
 8007bf4:	04d9      	lsls	r1, r3, #19
 8007bf6:	6922      	ldr	r2, [r4, #16]
 8007bf8:	6022      	str	r2, [r4, #0]
 8007bfa:	d504      	bpl.n	8007c06 <__sflush_r+0x7e>
 8007bfc:	1c42      	adds	r2, r0, #1
 8007bfe:	d101      	bne.n	8007c04 <__sflush_r+0x7c>
 8007c00:	682b      	ldr	r3, [r5, #0]
 8007c02:	b903      	cbnz	r3, 8007c06 <__sflush_r+0x7e>
 8007c04:	6560      	str	r0, [r4, #84]	; 0x54
 8007c06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c08:	602f      	str	r7, [r5, #0]
 8007c0a:	2900      	cmp	r1, #0
 8007c0c:	d0c9      	beq.n	8007ba2 <__sflush_r+0x1a>
 8007c0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c12:	4299      	cmp	r1, r3
 8007c14:	d002      	beq.n	8007c1c <__sflush_r+0x94>
 8007c16:	4628      	mov	r0, r5
 8007c18:	f000 f994 	bl	8007f44 <_free_r>
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	6360      	str	r0, [r4, #52]	; 0x34
 8007c20:	e7c0      	b.n	8007ba4 <__sflush_r+0x1c>
 8007c22:	2301      	movs	r3, #1
 8007c24:	4628      	mov	r0, r5
 8007c26:	47b0      	blx	r6
 8007c28:	1c41      	adds	r1, r0, #1
 8007c2a:	d1c8      	bne.n	8007bbe <__sflush_r+0x36>
 8007c2c:	682b      	ldr	r3, [r5, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d0c5      	beq.n	8007bbe <__sflush_r+0x36>
 8007c32:	2b1d      	cmp	r3, #29
 8007c34:	d001      	beq.n	8007c3a <__sflush_r+0xb2>
 8007c36:	2b16      	cmp	r3, #22
 8007c38:	d101      	bne.n	8007c3e <__sflush_r+0xb6>
 8007c3a:	602f      	str	r7, [r5, #0]
 8007c3c:	e7b1      	b.n	8007ba2 <__sflush_r+0x1a>
 8007c3e:	89a3      	ldrh	r3, [r4, #12]
 8007c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c44:	81a3      	strh	r3, [r4, #12]
 8007c46:	e7ad      	b.n	8007ba4 <__sflush_r+0x1c>
 8007c48:	690f      	ldr	r7, [r1, #16]
 8007c4a:	2f00      	cmp	r7, #0
 8007c4c:	d0a9      	beq.n	8007ba2 <__sflush_r+0x1a>
 8007c4e:	0793      	lsls	r3, r2, #30
 8007c50:	680e      	ldr	r6, [r1, #0]
 8007c52:	bf08      	it	eq
 8007c54:	694b      	ldreq	r3, [r1, #20]
 8007c56:	600f      	str	r7, [r1, #0]
 8007c58:	bf18      	it	ne
 8007c5a:	2300      	movne	r3, #0
 8007c5c:	eba6 0807 	sub.w	r8, r6, r7
 8007c60:	608b      	str	r3, [r1, #8]
 8007c62:	f1b8 0f00 	cmp.w	r8, #0
 8007c66:	dd9c      	ble.n	8007ba2 <__sflush_r+0x1a>
 8007c68:	4643      	mov	r3, r8
 8007c6a:	463a      	mov	r2, r7
 8007c6c:	6a21      	ldr	r1, [r4, #32]
 8007c6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c70:	4628      	mov	r0, r5
 8007c72:	47b0      	blx	r6
 8007c74:	2800      	cmp	r0, #0
 8007c76:	dc06      	bgt.n	8007c86 <__sflush_r+0xfe>
 8007c78:	89a3      	ldrh	r3, [r4, #12]
 8007c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c7e:	81a3      	strh	r3, [r4, #12]
 8007c80:	f04f 30ff 	mov.w	r0, #4294967295
 8007c84:	e78e      	b.n	8007ba4 <__sflush_r+0x1c>
 8007c86:	4407      	add	r7, r0
 8007c88:	eba8 0800 	sub.w	r8, r8, r0
 8007c8c:	e7e9      	b.n	8007c62 <__sflush_r+0xda>
 8007c8e:	bf00      	nop
 8007c90:	20400001 	.word	0x20400001

08007c94 <_fflush_r>:
 8007c94:	b538      	push	{r3, r4, r5, lr}
 8007c96:	690b      	ldr	r3, [r1, #16]
 8007c98:	4605      	mov	r5, r0
 8007c9a:	460c      	mov	r4, r1
 8007c9c:	b1db      	cbz	r3, 8007cd6 <_fflush_r+0x42>
 8007c9e:	b118      	cbz	r0, 8007ca8 <_fflush_r+0x14>
 8007ca0:	6983      	ldr	r3, [r0, #24]
 8007ca2:	b90b      	cbnz	r3, 8007ca8 <_fflush_r+0x14>
 8007ca4:	f000 f860 	bl	8007d68 <__sinit>
 8007ca8:	4b0c      	ldr	r3, [pc, #48]	; (8007cdc <_fflush_r+0x48>)
 8007caa:	429c      	cmp	r4, r3
 8007cac:	d109      	bne.n	8007cc2 <_fflush_r+0x2e>
 8007cae:	686c      	ldr	r4, [r5, #4]
 8007cb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cb4:	b17b      	cbz	r3, 8007cd6 <_fflush_r+0x42>
 8007cb6:	4621      	mov	r1, r4
 8007cb8:	4628      	mov	r0, r5
 8007cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cbe:	f7ff bf63 	b.w	8007b88 <__sflush_r>
 8007cc2:	4b07      	ldr	r3, [pc, #28]	; (8007ce0 <_fflush_r+0x4c>)
 8007cc4:	429c      	cmp	r4, r3
 8007cc6:	d101      	bne.n	8007ccc <_fflush_r+0x38>
 8007cc8:	68ac      	ldr	r4, [r5, #8]
 8007cca:	e7f1      	b.n	8007cb0 <_fflush_r+0x1c>
 8007ccc:	4b05      	ldr	r3, [pc, #20]	; (8007ce4 <_fflush_r+0x50>)
 8007cce:	429c      	cmp	r4, r3
 8007cd0:	bf08      	it	eq
 8007cd2:	68ec      	ldreq	r4, [r5, #12]
 8007cd4:	e7ec      	b.n	8007cb0 <_fflush_r+0x1c>
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	bd38      	pop	{r3, r4, r5, pc}
 8007cda:	bf00      	nop
 8007cdc:	0800886c 	.word	0x0800886c
 8007ce0:	0800888c 	.word	0x0800888c
 8007ce4:	0800884c 	.word	0x0800884c

08007ce8 <std>:
 8007ce8:	2300      	movs	r3, #0
 8007cea:	b510      	push	{r4, lr}
 8007cec:	4604      	mov	r4, r0
 8007cee:	e9c0 3300 	strd	r3, r3, [r0]
 8007cf2:	6083      	str	r3, [r0, #8]
 8007cf4:	8181      	strh	r1, [r0, #12]
 8007cf6:	6643      	str	r3, [r0, #100]	; 0x64
 8007cf8:	81c2      	strh	r2, [r0, #14]
 8007cfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cfe:	6183      	str	r3, [r0, #24]
 8007d00:	4619      	mov	r1, r3
 8007d02:	2208      	movs	r2, #8
 8007d04:	305c      	adds	r0, #92	; 0x5c
 8007d06:	f7ff fdfa 	bl	80078fe <memset>
 8007d0a:	4b05      	ldr	r3, [pc, #20]	; (8007d20 <std+0x38>)
 8007d0c:	6263      	str	r3, [r4, #36]	; 0x24
 8007d0e:	4b05      	ldr	r3, [pc, #20]	; (8007d24 <std+0x3c>)
 8007d10:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d12:	4b05      	ldr	r3, [pc, #20]	; (8007d28 <std+0x40>)
 8007d14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d16:	4b05      	ldr	r3, [pc, #20]	; (8007d2c <std+0x44>)
 8007d18:	6224      	str	r4, [r4, #32]
 8007d1a:	6323      	str	r3, [r4, #48]	; 0x30
 8007d1c:	bd10      	pop	{r4, pc}
 8007d1e:	bf00      	nop
 8007d20:	08008645 	.word	0x08008645
 8007d24:	08008667 	.word	0x08008667
 8007d28:	0800869f 	.word	0x0800869f
 8007d2c:	080086c3 	.word	0x080086c3

08007d30 <_cleanup_r>:
 8007d30:	4901      	ldr	r1, [pc, #4]	; (8007d38 <_cleanup_r+0x8>)
 8007d32:	f000 b885 	b.w	8007e40 <_fwalk_reent>
 8007d36:	bf00      	nop
 8007d38:	08007c95 	.word	0x08007c95

08007d3c <__sfmoreglue>:
 8007d3c:	b570      	push	{r4, r5, r6, lr}
 8007d3e:	1e4a      	subs	r2, r1, #1
 8007d40:	2568      	movs	r5, #104	; 0x68
 8007d42:	4355      	muls	r5, r2
 8007d44:	460e      	mov	r6, r1
 8007d46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d4a:	f000 f949 	bl	8007fe0 <_malloc_r>
 8007d4e:	4604      	mov	r4, r0
 8007d50:	b140      	cbz	r0, 8007d64 <__sfmoreglue+0x28>
 8007d52:	2100      	movs	r1, #0
 8007d54:	e9c0 1600 	strd	r1, r6, [r0]
 8007d58:	300c      	adds	r0, #12
 8007d5a:	60a0      	str	r0, [r4, #8]
 8007d5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d60:	f7ff fdcd 	bl	80078fe <memset>
 8007d64:	4620      	mov	r0, r4
 8007d66:	bd70      	pop	{r4, r5, r6, pc}

08007d68 <__sinit>:
 8007d68:	6983      	ldr	r3, [r0, #24]
 8007d6a:	b510      	push	{r4, lr}
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	bb33      	cbnz	r3, 8007dbe <__sinit+0x56>
 8007d70:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007d74:	6503      	str	r3, [r0, #80]	; 0x50
 8007d76:	4b12      	ldr	r3, [pc, #72]	; (8007dc0 <__sinit+0x58>)
 8007d78:	4a12      	ldr	r2, [pc, #72]	; (8007dc4 <__sinit+0x5c>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6282      	str	r2, [r0, #40]	; 0x28
 8007d7e:	4298      	cmp	r0, r3
 8007d80:	bf04      	itt	eq
 8007d82:	2301      	moveq	r3, #1
 8007d84:	6183      	streq	r3, [r0, #24]
 8007d86:	f000 f81f 	bl	8007dc8 <__sfp>
 8007d8a:	6060      	str	r0, [r4, #4]
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	f000 f81b 	bl	8007dc8 <__sfp>
 8007d92:	60a0      	str	r0, [r4, #8]
 8007d94:	4620      	mov	r0, r4
 8007d96:	f000 f817 	bl	8007dc8 <__sfp>
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	60e0      	str	r0, [r4, #12]
 8007d9e:	2104      	movs	r1, #4
 8007da0:	6860      	ldr	r0, [r4, #4]
 8007da2:	f7ff ffa1 	bl	8007ce8 <std>
 8007da6:	2201      	movs	r2, #1
 8007da8:	2109      	movs	r1, #9
 8007daa:	68a0      	ldr	r0, [r4, #8]
 8007dac:	f7ff ff9c 	bl	8007ce8 <std>
 8007db0:	2202      	movs	r2, #2
 8007db2:	2112      	movs	r1, #18
 8007db4:	68e0      	ldr	r0, [r4, #12]
 8007db6:	f7ff ff97 	bl	8007ce8 <std>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	61a3      	str	r3, [r4, #24]
 8007dbe:	bd10      	pop	{r4, pc}
 8007dc0:	08008848 	.word	0x08008848
 8007dc4:	08007d31 	.word	0x08007d31

08007dc8 <__sfp>:
 8007dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dca:	4b1b      	ldr	r3, [pc, #108]	; (8007e38 <__sfp+0x70>)
 8007dcc:	681e      	ldr	r6, [r3, #0]
 8007dce:	69b3      	ldr	r3, [r6, #24]
 8007dd0:	4607      	mov	r7, r0
 8007dd2:	b913      	cbnz	r3, 8007dda <__sfp+0x12>
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	f7ff ffc7 	bl	8007d68 <__sinit>
 8007dda:	3648      	adds	r6, #72	; 0x48
 8007ddc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007de0:	3b01      	subs	r3, #1
 8007de2:	d503      	bpl.n	8007dec <__sfp+0x24>
 8007de4:	6833      	ldr	r3, [r6, #0]
 8007de6:	b133      	cbz	r3, 8007df6 <__sfp+0x2e>
 8007de8:	6836      	ldr	r6, [r6, #0]
 8007dea:	e7f7      	b.n	8007ddc <__sfp+0x14>
 8007dec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007df0:	b16d      	cbz	r5, 8007e0e <__sfp+0x46>
 8007df2:	3468      	adds	r4, #104	; 0x68
 8007df4:	e7f4      	b.n	8007de0 <__sfp+0x18>
 8007df6:	2104      	movs	r1, #4
 8007df8:	4638      	mov	r0, r7
 8007dfa:	f7ff ff9f 	bl	8007d3c <__sfmoreglue>
 8007dfe:	6030      	str	r0, [r6, #0]
 8007e00:	2800      	cmp	r0, #0
 8007e02:	d1f1      	bne.n	8007de8 <__sfp+0x20>
 8007e04:	230c      	movs	r3, #12
 8007e06:	603b      	str	r3, [r7, #0]
 8007e08:	4604      	mov	r4, r0
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e0e:	4b0b      	ldr	r3, [pc, #44]	; (8007e3c <__sfp+0x74>)
 8007e10:	6665      	str	r5, [r4, #100]	; 0x64
 8007e12:	e9c4 5500 	strd	r5, r5, [r4]
 8007e16:	60a5      	str	r5, [r4, #8]
 8007e18:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007e1c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007e20:	2208      	movs	r2, #8
 8007e22:	4629      	mov	r1, r5
 8007e24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e28:	f7ff fd69 	bl	80078fe <memset>
 8007e2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e34:	e7e9      	b.n	8007e0a <__sfp+0x42>
 8007e36:	bf00      	nop
 8007e38:	08008848 	.word	0x08008848
 8007e3c:	ffff0001 	.word	0xffff0001

08007e40 <_fwalk_reent>:
 8007e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e44:	4680      	mov	r8, r0
 8007e46:	4689      	mov	r9, r1
 8007e48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e4c:	2600      	movs	r6, #0
 8007e4e:	b914      	cbnz	r4, 8007e56 <_fwalk_reent+0x16>
 8007e50:	4630      	mov	r0, r6
 8007e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e56:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007e5a:	3f01      	subs	r7, #1
 8007e5c:	d501      	bpl.n	8007e62 <_fwalk_reent+0x22>
 8007e5e:	6824      	ldr	r4, [r4, #0]
 8007e60:	e7f5      	b.n	8007e4e <_fwalk_reent+0xe>
 8007e62:	89ab      	ldrh	r3, [r5, #12]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d907      	bls.n	8007e78 <_fwalk_reent+0x38>
 8007e68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	d003      	beq.n	8007e78 <_fwalk_reent+0x38>
 8007e70:	4629      	mov	r1, r5
 8007e72:	4640      	mov	r0, r8
 8007e74:	47c8      	blx	r9
 8007e76:	4306      	orrs	r6, r0
 8007e78:	3568      	adds	r5, #104	; 0x68
 8007e7a:	e7ee      	b.n	8007e5a <_fwalk_reent+0x1a>

08007e7c <__swhatbuf_r>:
 8007e7c:	b570      	push	{r4, r5, r6, lr}
 8007e7e:	460e      	mov	r6, r1
 8007e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e84:	2900      	cmp	r1, #0
 8007e86:	b096      	sub	sp, #88	; 0x58
 8007e88:	4614      	mov	r4, r2
 8007e8a:	461d      	mov	r5, r3
 8007e8c:	da07      	bge.n	8007e9e <__swhatbuf_r+0x22>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	602b      	str	r3, [r5, #0]
 8007e92:	89b3      	ldrh	r3, [r6, #12]
 8007e94:	061a      	lsls	r2, r3, #24
 8007e96:	d410      	bmi.n	8007eba <__swhatbuf_r+0x3e>
 8007e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e9c:	e00e      	b.n	8007ebc <__swhatbuf_r+0x40>
 8007e9e:	466a      	mov	r2, sp
 8007ea0:	f000 fc36 	bl	8008710 <_fstat_r>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	dbf2      	blt.n	8007e8e <__swhatbuf_r+0x12>
 8007ea8:	9a01      	ldr	r2, [sp, #4]
 8007eaa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007eae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007eb2:	425a      	negs	r2, r3
 8007eb4:	415a      	adcs	r2, r3
 8007eb6:	602a      	str	r2, [r5, #0]
 8007eb8:	e7ee      	b.n	8007e98 <__swhatbuf_r+0x1c>
 8007eba:	2340      	movs	r3, #64	; 0x40
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	6023      	str	r3, [r4, #0]
 8007ec0:	b016      	add	sp, #88	; 0x58
 8007ec2:	bd70      	pop	{r4, r5, r6, pc}

08007ec4 <__smakebuf_r>:
 8007ec4:	898b      	ldrh	r3, [r1, #12]
 8007ec6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ec8:	079d      	lsls	r5, r3, #30
 8007eca:	4606      	mov	r6, r0
 8007ecc:	460c      	mov	r4, r1
 8007ece:	d507      	bpl.n	8007ee0 <__smakebuf_r+0x1c>
 8007ed0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ed4:	6023      	str	r3, [r4, #0]
 8007ed6:	6123      	str	r3, [r4, #16]
 8007ed8:	2301      	movs	r3, #1
 8007eda:	6163      	str	r3, [r4, #20]
 8007edc:	b002      	add	sp, #8
 8007ede:	bd70      	pop	{r4, r5, r6, pc}
 8007ee0:	ab01      	add	r3, sp, #4
 8007ee2:	466a      	mov	r2, sp
 8007ee4:	f7ff ffca 	bl	8007e7c <__swhatbuf_r>
 8007ee8:	9900      	ldr	r1, [sp, #0]
 8007eea:	4605      	mov	r5, r0
 8007eec:	4630      	mov	r0, r6
 8007eee:	f000 f877 	bl	8007fe0 <_malloc_r>
 8007ef2:	b948      	cbnz	r0, 8007f08 <__smakebuf_r+0x44>
 8007ef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ef8:	059a      	lsls	r2, r3, #22
 8007efa:	d4ef      	bmi.n	8007edc <__smakebuf_r+0x18>
 8007efc:	f023 0303 	bic.w	r3, r3, #3
 8007f00:	f043 0302 	orr.w	r3, r3, #2
 8007f04:	81a3      	strh	r3, [r4, #12]
 8007f06:	e7e3      	b.n	8007ed0 <__smakebuf_r+0xc>
 8007f08:	4b0d      	ldr	r3, [pc, #52]	; (8007f40 <__smakebuf_r+0x7c>)
 8007f0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f0c:	89a3      	ldrh	r3, [r4, #12]
 8007f0e:	6020      	str	r0, [r4, #0]
 8007f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f14:	81a3      	strh	r3, [r4, #12]
 8007f16:	9b00      	ldr	r3, [sp, #0]
 8007f18:	6163      	str	r3, [r4, #20]
 8007f1a:	9b01      	ldr	r3, [sp, #4]
 8007f1c:	6120      	str	r0, [r4, #16]
 8007f1e:	b15b      	cbz	r3, 8007f38 <__smakebuf_r+0x74>
 8007f20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f24:	4630      	mov	r0, r6
 8007f26:	f000 fc05 	bl	8008734 <_isatty_r>
 8007f2a:	b128      	cbz	r0, 8007f38 <__smakebuf_r+0x74>
 8007f2c:	89a3      	ldrh	r3, [r4, #12]
 8007f2e:	f023 0303 	bic.w	r3, r3, #3
 8007f32:	f043 0301 	orr.w	r3, r3, #1
 8007f36:	81a3      	strh	r3, [r4, #12]
 8007f38:	89a3      	ldrh	r3, [r4, #12]
 8007f3a:	431d      	orrs	r5, r3
 8007f3c:	81a5      	strh	r5, [r4, #12]
 8007f3e:	e7cd      	b.n	8007edc <__smakebuf_r+0x18>
 8007f40:	08007d31 	.word	0x08007d31

08007f44 <_free_r>:
 8007f44:	b538      	push	{r3, r4, r5, lr}
 8007f46:	4605      	mov	r5, r0
 8007f48:	2900      	cmp	r1, #0
 8007f4a:	d045      	beq.n	8007fd8 <_free_r+0x94>
 8007f4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f50:	1f0c      	subs	r4, r1, #4
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	bfb8      	it	lt
 8007f56:	18e4      	addlt	r4, r4, r3
 8007f58:	f000 fc0e 	bl	8008778 <__malloc_lock>
 8007f5c:	4a1f      	ldr	r2, [pc, #124]	; (8007fdc <_free_r+0x98>)
 8007f5e:	6813      	ldr	r3, [r2, #0]
 8007f60:	4610      	mov	r0, r2
 8007f62:	b933      	cbnz	r3, 8007f72 <_free_r+0x2e>
 8007f64:	6063      	str	r3, [r4, #4]
 8007f66:	6014      	str	r4, [r2, #0]
 8007f68:	4628      	mov	r0, r5
 8007f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f6e:	f000 bc04 	b.w	800877a <__malloc_unlock>
 8007f72:	42a3      	cmp	r3, r4
 8007f74:	d90c      	bls.n	8007f90 <_free_r+0x4c>
 8007f76:	6821      	ldr	r1, [r4, #0]
 8007f78:	1862      	adds	r2, r4, r1
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	bf04      	itt	eq
 8007f7e:	681a      	ldreq	r2, [r3, #0]
 8007f80:	685b      	ldreq	r3, [r3, #4]
 8007f82:	6063      	str	r3, [r4, #4]
 8007f84:	bf04      	itt	eq
 8007f86:	1852      	addeq	r2, r2, r1
 8007f88:	6022      	streq	r2, [r4, #0]
 8007f8a:	6004      	str	r4, [r0, #0]
 8007f8c:	e7ec      	b.n	8007f68 <_free_r+0x24>
 8007f8e:	4613      	mov	r3, r2
 8007f90:	685a      	ldr	r2, [r3, #4]
 8007f92:	b10a      	cbz	r2, 8007f98 <_free_r+0x54>
 8007f94:	42a2      	cmp	r2, r4
 8007f96:	d9fa      	bls.n	8007f8e <_free_r+0x4a>
 8007f98:	6819      	ldr	r1, [r3, #0]
 8007f9a:	1858      	adds	r0, r3, r1
 8007f9c:	42a0      	cmp	r0, r4
 8007f9e:	d10b      	bne.n	8007fb8 <_free_r+0x74>
 8007fa0:	6820      	ldr	r0, [r4, #0]
 8007fa2:	4401      	add	r1, r0
 8007fa4:	1858      	adds	r0, r3, r1
 8007fa6:	4282      	cmp	r2, r0
 8007fa8:	6019      	str	r1, [r3, #0]
 8007faa:	d1dd      	bne.n	8007f68 <_free_r+0x24>
 8007fac:	6810      	ldr	r0, [r2, #0]
 8007fae:	6852      	ldr	r2, [r2, #4]
 8007fb0:	605a      	str	r2, [r3, #4]
 8007fb2:	4401      	add	r1, r0
 8007fb4:	6019      	str	r1, [r3, #0]
 8007fb6:	e7d7      	b.n	8007f68 <_free_r+0x24>
 8007fb8:	d902      	bls.n	8007fc0 <_free_r+0x7c>
 8007fba:	230c      	movs	r3, #12
 8007fbc:	602b      	str	r3, [r5, #0]
 8007fbe:	e7d3      	b.n	8007f68 <_free_r+0x24>
 8007fc0:	6820      	ldr	r0, [r4, #0]
 8007fc2:	1821      	adds	r1, r4, r0
 8007fc4:	428a      	cmp	r2, r1
 8007fc6:	bf04      	itt	eq
 8007fc8:	6811      	ldreq	r1, [r2, #0]
 8007fca:	6852      	ldreq	r2, [r2, #4]
 8007fcc:	6062      	str	r2, [r4, #4]
 8007fce:	bf04      	itt	eq
 8007fd0:	1809      	addeq	r1, r1, r0
 8007fd2:	6021      	streq	r1, [r4, #0]
 8007fd4:	605c      	str	r4, [r3, #4]
 8007fd6:	e7c7      	b.n	8007f68 <_free_r+0x24>
 8007fd8:	bd38      	pop	{r3, r4, r5, pc}
 8007fda:	bf00      	nop
 8007fdc:	2000cdf0 	.word	0x2000cdf0

08007fe0 <_malloc_r>:
 8007fe0:	b570      	push	{r4, r5, r6, lr}
 8007fe2:	1ccd      	adds	r5, r1, #3
 8007fe4:	f025 0503 	bic.w	r5, r5, #3
 8007fe8:	3508      	adds	r5, #8
 8007fea:	2d0c      	cmp	r5, #12
 8007fec:	bf38      	it	cc
 8007fee:	250c      	movcc	r5, #12
 8007ff0:	2d00      	cmp	r5, #0
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	db01      	blt.n	8007ffa <_malloc_r+0x1a>
 8007ff6:	42a9      	cmp	r1, r5
 8007ff8:	d903      	bls.n	8008002 <_malloc_r+0x22>
 8007ffa:	230c      	movs	r3, #12
 8007ffc:	6033      	str	r3, [r6, #0]
 8007ffe:	2000      	movs	r0, #0
 8008000:	bd70      	pop	{r4, r5, r6, pc}
 8008002:	f000 fbb9 	bl	8008778 <__malloc_lock>
 8008006:	4a21      	ldr	r2, [pc, #132]	; (800808c <_malloc_r+0xac>)
 8008008:	6814      	ldr	r4, [r2, #0]
 800800a:	4621      	mov	r1, r4
 800800c:	b991      	cbnz	r1, 8008034 <_malloc_r+0x54>
 800800e:	4c20      	ldr	r4, [pc, #128]	; (8008090 <_malloc_r+0xb0>)
 8008010:	6823      	ldr	r3, [r4, #0]
 8008012:	b91b      	cbnz	r3, 800801c <_malloc_r+0x3c>
 8008014:	4630      	mov	r0, r6
 8008016:	f000 fb05 	bl	8008624 <_sbrk_r>
 800801a:	6020      	str	r0, [r4, #0]
 800801c:	4629      	mov	r1, r5
 800801e:	4630      	mov	r0, r6
 8008020:	f000 fb00 	bl	8008624 <_sbrk_r>
 8008024:	1c43      	adds	r3, r0, #1
 8008026:	d124      	bne.n	8008072 <_malloc_r+0x92>
 8008028:	230c      	movs	r3, #12
 800802a:	6033      	str	r3, [r6, #0]
 800802c:	4630      	mov	r0, r6
 800802e:	f000 fba4 	bl	800877a <__malloc_unlock>
 8008032:	e7e4      	b.n	8007ffe <_malloc_r+0x1e>
 8008034:	680b      	ldr	r3, [r1, #0]
 8008036:	1b5b      	subs	r3, r3, r5
 8008038:	d418      	bmi.n	800806c <_malloc_r+0x8c>
 800803a:	2b0b      	cmp	r3, #11
 800803c:	d90f      	bls.n	800805e <_malloc_r+0x7e>
 800803e:	600b      	str	r3, [r1, #0]
 8008040:	50cd      	str	r5, [r1, r3]
 8008042:	18cc      	adds	r4, r1, r3
 8008044:	4630      	mov	r0, r6
 8008046:	f000 fb98 	bl	800877a <__malloc_unlock>
 800804a:	f104 000b 	add.w	r0, r4, #11
 800804e:	1d23      	adds	r3, r4, #4
 8008050:	f020 0007 	bic.w	r0, r0, #7
 8008054:	1ac3      	subs	r3, r0, r3
 8008056:	d0d3      	beq.n	8008000 <_malloc_r+0x20>
 8008058:	425a      	negs	r2, r3
 800805a:	50e2      	str	r2, [r4, r3]
 800805c:	e7d0      	b.n	8008000 <_malloc_r+0x20>
 800805e:	428c      	cmp	r4, r1
 8008060:	684b      	ldr	r3, [r1, #4]
 8008062:	bf16      	itet	ne
 8008064:	6063      	strne	r3, [r4, #4]
 8008066:	6013      	streq	r3, [r2, #0]
 8008068:	460c      	movne	r4, r1
 800806a:	e7eb      	b.n	8008044 <_malloc_r+0x64>
 800806c:	460c      	mov	r4, r1
 800806e:	6849      	ldr	r1, [r1, #4]
 8008070:	e7cc      	b.n	800800c <_malloc_r+0x2c>
 8008072:	1cc4      	adds	r4, r0, #3
 8008074:	f024 0403 	bic.w	r4, r4, #3
 8008078:	42a0      	cmp	r0, r4
 800807a:	d005      	beq.n	8008088 <_malloc_r+0xa8>
 800807c:	1a21      	subs	r1, r4, r0
 800807e:	4630      	mov	r0, r6
 8008080:	f000 fad0 	bl	8008624 <_sbrk_r>
 8008084:	3001      	adds	r0, #1
 8008086:	d0cf      	beq.n	8008028 <_malloc_r+0x48>
 8008088:	6025      	str	r5, [r4, #0]
 800808a:	e7db      	b.n	8008044 <_malloc_r+0x64>
 800808c:	2000cdf0 	.word	0x2000cdf0
 8008090:	2000cdf4 	.word	0x2000cdf4

08008094 <__sfputc_r>:
 8008094:	6893      	ldr	r3, [r2, #8]
 8008096:	3b01      	subs	r3, #1
 8008098:	2b00      	cmp	r3, #0
 800809a:	b410      	push	{r4}
 800809c:	6093      	str	r3, [r2, #8]
 800809e:	da08      	bge.n	80080b2 <__sfputc_r+0x1e>
 80080a0:	6994      	ldr	r4, [r2, #24]
 80080a2:	42a3      	cmp	r3, r4
 80080a4:	db01      	blt.n	80080aa <__sfputc_r+0x16>
 80080a6:	290a      	cmp	r1, #10
 80080a8:	d103      	bne.n	80080b2 <__sfputc_r+0x1e>
 80080aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080ae:	f7ff bcab 	b.w	8007a08 <__swbuf_r>
 80080b2:	6813      	ldr	r3, [r2, #0]
 80080b4:	1c58      	adds	r0, r3, #1
 80080b6:	6010      	str	r0, [r2, #0]
 80080b8:	7019      	strb	r1, [r3, #0]
 80080ba:	4608      	mov	r0, r1
 80080bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <__sfputs_r>:
 80080c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080c4:	4606      	mov	r6, r0
 80080c6:	460f      	mov	r7, r1
 80080c8:	4614      	mov	r4, r2
 80080ca:	18d5      	adds	r5, r2, r3
 80080cc:	42ac      	cmp	r4, r5
 80080ce:	d101      	bne.n	80080d4 <__sfputs_r+0x12>
 80080d0:	2000      	movs	r0, #0
 80080d2:	e007      	b.n	80080e4 <__sfputs_r+0x22>
 80080d4:	463a      	mov	r2, r7
 80080d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080da:	4630      	mov	r0, r6
 80080dc:	f7ff ffda 	bl	8008094 <__sfputc_r>
 80080e0:	1c43      	adds	r3, r0, #1
 80080e2:	d1f3      	bne.n	80080cc <__sfputs_r+0xa>
 80080e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080080e8 <_vfiprintf_r>:
 80080e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ec:	460c      	mov	r4, r1
 80080ee:	b09d      	sub	sp, #116	; 0x74
 80080f0:	4617      	mov	r7, r2
 80080f2:	461d      	mov	r5, r3
 80080f4:	4606      	mov	r6, r0
 80080f6:	b118      	cbz	r0, 8008100 <_vfiprintf_r+0x18>
 80080f8:	6983      	ldr	r3, [r0, #24]
 80080fa:	b90b      	cbnz	r3, 8008100 <_vfiprintf_r+0x18>
 80080fc:	f7ff fe34 	bl	8007d68 <__sinit>
 8008100:	4b7c      	ldr	r3, [pc, #496]	; (80082f4 <_vfiprintf_r+0x20c>)
 8008102:	429c      	cmp	r4, r3
 8008104:	d158      	bne.n	80081b8 <_vfiprintf_r+0xd0>
 8008106:	6874      	ldr	r4, [r6, #4]
 8008108:	89a3      	ldrh	r3, [r4, #12]
 800810a:	0718      	lsls	r0, r3, #28
 800810c:	d55e      	bpl.n	80081cc <_vfiprintf_r+0xe4>
 800810e:	6923      	ldr	r3, [r4, #16]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d05b      	beq.n	80081cc <_vfiprintf_r+0xe4>
 8008114:	2300      	movs	r3, #0
 8008116:	9309      	str	r3, [sp, #36]	; 0x24
 8008118:	2320      	movs	r3, #32
 800811a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800811e:	2330      	movs	r3, #48	; 0x30
 8008120:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008124:	9503      	str	r5, [sp, #12]
 8008126:	f04f 0b01 	mov.w	fp, #1
 800812a:	46b8      	mov	r8, r7
 800812c:	4645      	mov	r5, r8
 800812e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008132:	b10b      	cbz	r3, 8008138 <_vfiprintf_r+0x50>
 8008134:	2b25      	cmp	r3, #37	; 0x25
 8008136:	d154      	bne.n	80081e2 <_vfiprintf_r+0xfa>
 8008138:	ebb8 0a07 	subs.w	sl, r8, r7
 800813c:	d00b      	beq.n	8008156 <_vfiprintf_r+0x6e>
 800813e:	4653      	mov	r3, sl
 8008140:	463a      	mov	r2, r7
 8008142:	4621      	mov	r1, r4
 8008144:	4630      	mov	r0, r6
 8008146:	f7ff ffbc 	bl	80080c2 <__sfputs_r>
 800814a:	3001      	adds	r0, #1
 800814c:	f000 80c2 	beq.w	80082d4 <_vfiprintf_r+0x1ec>
 8008150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008152:	4453      	add	r3, sl
 8008154:	9309      	str	r3, [sp, #36]	; 0x24
 8008156:	f898 3000 	ldrb.w	r3, [r8]
 800815a:	2b00      	cmp	r3, #0
 800815c:	f000 80ba 	beq.w	80082d4 <_vfiprintf_r+0x1ec>
 8008160:	2300      	movs	r3, #0
 8008162:	f04f 32ff 	mov.w	r2, #4294967295
 8008166:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800816a:	9304      	str	r3, [sp, #16]
 800816c:	9307      	str	r3, [sp, #28]
 800816e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008172:	931a      	str	r3, [sp, #104]	; 0x68
 8008174:	46a8      	mov	r8, r5
 8008176:	2205      	movs	r2, #5
 8008178:	f818 1b01 	ldrb.w	r1, [r8], #1
 800817c:	485e      	ldr	r0, [pc, #376]	; (80082f8 <_vfiprintf_r+0x210>)
 800817e:	f7f8 f85f 	bl	8000240 <memchr>
 8008182:	9b04      	ldr	r3, [sp, #16]
 8008184:	bb78      	cbnz	r0, 80081e6 <_vfiprintf_r+0xfe>
 8008186:	06d9      	lsls	r1, r3, #27
 8008188:	bf44      	itt	mi
 800818a:	2220      	movmi	r2, #32
 800818c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008190:	071a      	lsls	r2, r3, #28
 8008192:	bf44      	itt	mi
 8008194:	222b      	movmi	r2, #43	; 0x2b
 8008196:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800819a:	782a      	ldrb	r2, [r5, #0]
 800819c:	2a2a      	cmp	r2, #42	; 0x2a
 800819e:	d02a      	beq.n	80081f6 <_vfiprintf_r+0x10e>
 80081a0:	9a07      	ldr	r2, [sp, #28]
 80081a2:	46a8      	mov	r8, r5
 80081a4:	2000      	movs	r0, #0
 80081a6:	250a      	movs	r5, #10
 80081a8:	4641      	mov	r1, r8
 80081aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081ae:	3b30      	subs	r3, #48	; 0x30
 80081b0:	2b09      	cmp	r3, #9
 80081b2:	d969      	bls.n	8008288 <_vfiprintf_r+0x1a0>
 80081b4:	b360      	cbz	r0, 8008210 <_vfiprintf_r+0x128>
 80081b6:	e024      	b.n	8008202 <_vfiprintf_r+0x11a>
 80081b8:	4b50      	ldr	r3, [pc, #320]	; (80082fc <_vfiprintf_r+0x214>)
 80081ba:	429c      	cmp	r4, r3
 80081bc:	d101      	bne.n	80081c2 <_vfiprintf_r+0xda>
 80081be:	68b4      	ldr	r4, [r6, #8]
 80081c0:	e7a2      	b.n	8008108 <_vfiprintf_r+0x20>
 80081c2:	4b4f      	ldr	r3, [pc, #316]	; (8008300 <_vfiprintf_r+0x218>)
 80081c4:	429c      	cmp	r4, r3
 80081c6:	bf08      	it	eq
 80081c8:	68f4      	ldreq	r4, [r6, #12]
 80081ca:	e79d      	b.n	8008108 <_vfiprintf_r+0x20>
 80081cc:	4621      	mov	r1, r4
 80081ce:	4630      	mov	r0, r6
 80081d0:	f7ff fc6c 	bl	8007aac <__swsetup_r>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d09d      	beq.n	8008114 <_vfiprintf_r+0x2c>
 80081d8:	f04f 30ff 	mov.w	r0, #4294967295
 80081dc:	b01d      	add	sp, #116	; 0x74
 80081de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e2:	46a8      	mov	r8, r5
 80081e4:	e7a2      	b.n	800812c <_vfiprintf_r+0x44>
 80081e6:	4a44      	ldr	r2, [pc, #272]	; (80082f8 <_vfiprintf_r+0x210>)
 80081e8:	1a80      	subs	r0, r0, r2
 80081ea:	fa0b f000 	lsl.w	r0, fp, r0
 80081ee:	4318      	orrs	r0, r3
 80081f0:	9004      	str	r0, [sp, #16]
 80081f2:	4645      	mov	r5, r8
 80081f4:	e7be      	b.n	8008174 <_vfiprintf_r+0x8c>
 80081f6:	9a03      	ldr	r2, [sp, #12]
 80081f8:	1d11      	adds	r1, r2, #4
 80081fa:	6812      	ldr	r2, [r2, #0]
 80081fc:	9103      	str	r1, [sp, #12]
 80081fe:	2a00      	cmp	r2, #0
 8008200:	db01      	blt.n	8008206 <_vfiprintf_r+0x11e>
 8008202:	9207      	str	r2, [sp, #28]
 8008204:	e004      	b.n	8008210 <_vfiprintf_r+0x128>
 8008206:	4252      	negs	r2, r2
 8008208:	f043 0302 	orr.w	r3, r3, #2
 800820c:	9207      	str	r2, [sp, #28]
 800820e:	9304      	str	r3, [sp, #16]
 8008210:	f898 3000 	ldrb.w	r3, [r8]
 8008214:	2b2e      	cmp	r3, #46	; 0x2e
 8008216:	d10e      	bne.n	8008236 <_vfiprintf_r+0x14e>
 8008218:	f898 3001 	ldrb.w	r3, [r8, #1]
 800821c:	2b2a      	cmp	r3, #42	; 0x2a
 800821e:	d138      	bne.n	8008292 <_vfiprintf_r+0x1aa>
 8008220:	9b03      	ldr	r3, [sp, #12]
 8008222:	1d1a      	adds	r2, r3, #4
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	9203      	str	r2, [sp, #12]
 8008228:	2b00      	cmp	r3, #0
 800822a:	bfb8      	it	lt
 800822c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008230:	f108 0802 	add.w	r8, r8, #2
 8008234:	9305      	str	r3, [sp, #20]
 8008236:	4d33      	ldr	r5, [pc, #204]	; (8008304 <_vfiprintf_r+0x21c>)
 8008238:	f898 1000 	ldrb.w	r1, [r8]
 800823c:	2203      	movs	r2, #3
 800823e:	4628      	mov	r0, r5
 8008240:	f7f7 fffe 	bl	8000240 <memchr>
 8008244:	b140      	cbz	r0, 8008258 <_vfiprintf_r+0x170>
 8008246:	2340      	movs	r3, #64	; 0x40
 8008248:	1b40      	subs	r0, r0, r5
 800824a:	fa03 f000 	lsl.w	r0, r3, r0
 800824e:	9b04      	ldr	r3, [sp, #16]
 8008250:	4303      	orrs	r3, r0
 8008252:	f108 0801 	add.w	r8, r8, #1
 8008256:	9304      	str	r3, [sp, #16]
 8008258:	f898 1000 	ldrb.w	r1, [r8]
 800825c:	482a      	ldr	r0, [pc, #168]	; (8008308 <_vfiprintf_r+0x220>)
 800825e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008262:	2206      	movs	r2, #6
 8008264:	f108 0701 	add.w	r7, r8, #1
 8008268:	f7f7 ffea 	bl	8000240 <memchr>
 800826c:	2800      	cmp	r0, #0
 800826e:	d037      	beq.n	80082e0 <_vfiprintf_r+0x1f8>
 8008270:	4b26      	ldr	r3, [pc, #152]	; (800830c <_vfiprintf_r+0x224>)
 8008272:	bb1b      	cbnz	r3, 80082bc <_vfiprintf_r+0x1d4>
 8008274:	9b03      	ldr	r3, [sp, #12]
 8008276:	3307      	adds	r3, #7
 8008278:	f023 0307 	bic.w	r3, r3, #7
 800827c:	3308      	adds	r3, #8
 800827e:	9303      	str	r3, [sp, #12]
 8008280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008282:	444b      	add	r3, r9
 8008284:	9309      	str	r3, [sp, #36]	; 0x24
 8008286:	e750      	b.n	800812a <_vfiprintf_r+0x42>
 8008288:	fb05 3202 	mla	r2, r5, r2, r3
 800828c:	2001      	movs	r0, #1
 800828e:	4688      	mov	r8, r1
 8008290:	e78a      	b.n	80081a8 <_vfiprintf_r+0xc0>
 8008292:	2300      	movs	r3, #0
 8008294:	f108 0801 	add.w	r8, r8, #1
 8008298:	9305      	str	r3, [sp, #20]
 800829a:	4619      	mov	r1, r3
 800829c:	250a      	movs	r5, #10
 800829e:	4640      	mov	r0, r8
 80082a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082a4:	3a30      	subs	r2, #48	; 0x30
 80082a6:	2a09      	cmp	r2, #9
 80082a8:	d903      	bls.n	80082b2 <_vfiprintf_r+0x1ca>
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d0c3      	beq.n	8008236 <_vfiprintf_r+0x14e>
 80082ae:	9105      	str	r1, [sp, #20]
 80082b0:	e7c1      	b.n	8008236 <_vfiprintf_r+0x14e>
 80082b2:	fb05 2101 	mla	r1, r5, r1, r2
 80082b6:	2301      	movs	r3, #1
 80082b8:	4680      	mov	r8, r0
 80082ba:	e7f0      	b.n	800829e <_vfiprintf_r+0x1b6>
 80082bc:	ab03      	add	r3, sp, #12
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	4622      	mov	r2, r4
 80082c2:	4b13      	ldr	r3, [pc, #76]	; (8008310 <_vfiprintf_r+0x228>)
 80082c4:	a904      	add	r1, sp, #16
 80082c6:	4630      	mov	r0, r6
 80082c8:	f3af 8000 	nop.w
 80082cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80082d0:	4681      	mov	r9, r0
 80082d2:	d1d5      	bne.n	8008280 <_vfiprintf_r+0x198>
 80082d4:	89a3      	ldrh	r3, [r4, #12]
 80082d6:	065b      	lsls	r3, r3, #25
 80082d8:	f53f af7e 	bmi.w	80081d8 <_vfiprintf_r+0xf0>
 80082dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082de:	e77d      	b.n	80081dc <_vfiprintf_r+0xf4>
 80082e0:	ab03      	add	r3, sp, #12
 80082e2:	9300      	str	r3, [sp, #0]
 80082e4:	4622      	mov	r2, r4
 80082e6:	4b0a      	ldr	r3, [pc, #40]	; (8008310 <_vfiprintf_r+0x228>)
 80082e8:	a904      	add	r1, sp, #16
 80082ea:	4630      	mov	r0, r6
 80082ec:	f000 f888 	bl	8008400 <_printf_i>
 80082f0:	e7ec      	b.n	80082cc <_vfiprintf_r+0x1e4>
 80082f2:	bf00      	nop
 80082f4:	0800886c 	.word	0x0800886c
 80082f8:	080088ac 	.word	0x080088ac
 80082fc:	0800888c 	.word	0x0800888c
 8008300:	0800884c 	.word	0x0800884c
 8008304:	080088b2 	.word	0x080088b2
 8008308:	080088b6 	.word	0x080088b6
 800830c:	00000000 	.word	0x00000000
 8008310:	080080c3 	.word	0x080080c3

08008314 <_printf_common>:
 8008314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008318:	4691      	mov	r9, r2
 800831a:	461f      	mov	r7, r3
 800831c:	688a      	ldr	r2, [r1, #8]
 800831e:	690b      	ldr	r3, [r1, #16]
 8008320:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008324:	4293      	cmp	r3, r2
 8008326:	bfb8      	it	lt
 8008328:	4613      	movlt	r3, r2
 800832a:	f8c9 3000 	str.w	r3, [r9]
 800832e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008332:	4606      	mov	r6, r0
 8008334:	460c      	mov	r4, r1
 8008336:	b112      	cbz	r2, 800833e <_printf_common+0x2a>
 8008338:	3301      	adds	r3, #1
 800833a:	f8c9 3000 	str.w	r3, [r9]
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	0699      	lsls	r1, r3, #26
 8008342:	bf42      	ittt	mi
 8008344:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008348:	3302      	addmi	r3, #2
 800834a:	f8c9 3000 	strmi.w	r3, [r9]
 800834e:	6825      	ldr	r5, [r4, #0]
 8008350:	f015 0506 	ands.w	r5, r5, #6
 8008354:	d107      	bne.n	8008366 <_printf_common+0x52>
 8008356:	f104 0a19 	add.w	sl, r4, #25
 800835a:	68e3      	ldr	r3, [r4, #12]
 800835c:	f8d9 2000 	ldr.w	r2, [r9]
 8008360:	1a9b      	subs	r3, r3, r2
 8008362:	42ab      	cmp	r3, r5
 8008364:	dc28      	bgt.n	80083b8 <_printf_common+0xa4>
 8008366:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800836a:	6822      	ldr	r2, [r4, #0]
 800836c:	3300      	adds	r3, #0
 800836e:	bf18      	it	ne
 8008370:	2301      	movne	r3, #1
 8008372:	0692      	lsls	r2, r2, #26
 8008374:	d42d      	bmi.n	80083d2 <_printf_common+0xbe>
 8008376:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800837a:	4639      	mov	r1, r7
 800837c:	4630      	mov	r0, r6
 800837e:	47c0      	blx	r8
 8008380:	3001      	adds	r0, #1
 8008382:	d020      	beq.n	80083c6 <_printf_common+0xb2>
 8008384:	6823      	ldr	r3, [r4, #0]
 8008386:	68e5      	ldr	r5, [r4, #12]
 8008388:	f8d9 2000 	ldr.w	r2, [r9]
 800838c:	f003 0306 	and.w	r3, r3, #6
 8008390:	2b04      	cmp	r3, #4
 8008392:	bf08      	it	eq
 8008394:	1aad      	subeq	r5, r5, r2
 8008396:	68a3      	ldr	r3, [r4, #8]
 8008398:	6922      	ldr	r2, [r4, #16]
 800839a:	bf0c      	ite	eq
 800839c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083a0:	2500      	movne	r5, #0
 80083a2:	4293      	cmp	r3, r2
 80083a4:	bfc4      	itt	gt
 80083a6:	1a9b      	subgt	r3, r3, r2
 80083a8:	18ed      	addgt	r5, r5, r3
 80083aa:	f04f 0900 	mov.w	r9, #0
 80083ae:	341a      	adds	r4, #26
 80083b0:	454d      	cmp	r5, r9
 80083b2:	d11a      	bne.n	80083ea <_printf_common+0xd6>
 80083b4:	2000      	movs	r0, #0
 80083b6:	e008      	b.n	80083ca <_printf_common+0xb6>
 80083b8:	2301      	movs	r3, #1
 80083ba:	4652      	mov	r2, sl
 80083bc:	4639      	mov	r1, r7
 80083be:	4630      	mov	r0, r6
 80083c0:	47c0      	blx	r8
 80083c2:	3001      	adds	r0, #1
 80083c4:	d103      	bne.n	80083ce <_printf_common+0xba>
 80083c6:	f04f 30ff 	mov.w	r0, #4294967295
 80083ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ce:	3501      	adds	r5, #1
 80083d0:	e7c3      	b.n	800835a <_printf_common+0x46>
 80083d2:	18e1      	adds	r1, r4, r3
 80083d4:	1c5a      	adds	r2, r3, #1
 80083d6:	2030      	movs	r0, #48	; 0x30
 80083d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083dc:	4422      	add	r2, r4
 80083de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083e6:	3302      	adds	r3, #2
 80083e8:	e7c5      	b.n	8008376 <_printf_common+0x62>
 80083ea:	2301      	movs	r3, #1
 80083ec:	4622      	mov	r2, r4
 80083ee:	4639      	mov	r1, r7
 80083f0:	4630      	mov	r0, r6
 80083f2:	47c0      	blx	r8
 80083f4:	3001      	adds	r0, #1
 80083f6:	d0e6      	beq.n	80083c6 <_printf_common+0xb2>
 80083f8:	f109 0901 	add.w	r9, r9, #1
 80083fc:	e7d8      	b.n	80083b0 <_printf_common+0x9c>
	...

08008400 <_printf_i>:
 8008400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008404:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008408:	460c      	mov	r4, r1
 800840a:	7e09      	ldrb	r1, [r1, #24]
 800840c:	b085      	sub	sp, #20
 800840e:	296e      	cmp	r1, #110	; 0x6e
 8008410:	4617      	mov	r7, r2
 8008412:	4606      	mov	r6, r0
 8008414:	4698      	mov	r8, r3
 8008416:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008418:	f000 80b3 	beq.w	8008582 <_printf_i+0x182>
 800841c:	d822      	bhi.n	8008464 <_printf_i+0x64>
 800841e:	2963      	cmp	r1, #99	; 0x63
 8008420:	d036      	beq.n	8008490 <_printf_i+0x90>
 8008422:	d80a      	bhi.n	800843a <_printf_i+0x3a>
 8008424:	2900      	cmp	r1, #0
 8008426:	f000 80b9 	beq.w	800859c <_printf_i+0x19c>
 800842a:	2958      	cmp	r1, #88	; 0x58
 800842c:	f000 8083 	beq.w	8008536 <_printf_i+0x136>
 8008430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008434:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008438:	e032      	b.n	80084a0 <_printf_i+0xa0>
 800843a:	2964      	cmp	r1, #100	; 0x64
 800843c:	d001      	beq.n	8008442 <_printf_i+0x42>
 800843e:	2969      	cmp	r1, #105	; 0x69
 8008440:	d1f6      	bne.n	8008430 <_printf_i+0x30>
 8008442:	6820      	ldr	r0, [r4, #0]
 8008444:	6813      	ldr	r3, [r2, #0]
 8008446:	0605      	lsls	r5, r0, #24
 8008448:	f103 0104 	add.w	r1, r3, #4
 800844c:	d52a      	bpl.n	80084a4 <_printf_i+0xa4>
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	6011      	str	r1, [r2, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	da03      	bge.n	800845e <_printf_i+0x5e>
 8008456:	222d      	movs	r2, #45	; 0x2d
 8008458:	425b      	negs	r3, r3
 800845a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800845e:	486f      	ldr	r0, [pc, #444]	; (800861c <_printf_i+0x21c>)
 8008460:	220a      	movs	r2, #10
 8008462:	e039      	b.n	80084d8 <_printf_i+0xd8>
 8008464:	2973      	cmp	r1, #115	; 0x73
 8008466:	f000 809d 	beq.w	80085a4 <_printf_i+0x1a4>
 800846a:	d808      	bhi.n	800847e <_printf_i+0x7e>
 800846c:	296f      	cmp	r1, #111	; 0x6f
 800846e:	d020      	beq.n	80084b2 <_printf_i+0xb2>
 8008470:	2970      	cmp	r1, #112	; 0x70
 8008472:	d1dd      	bne.n	8008430 <_printf_i+0x30>
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	f043 0320 	orr.w	r3, r3, #32
 800847a:	6023      	str	r3, [r4, #0]
 800847c:	e003      	b.n	8008486 <_printf_i+0x86>
 800847e:	2975      	cmp	r1, #117	; 0x75
 8008480:	d017      	beq.n	80084b2 <_printf_i+0xb2>
 8008482:	2978      	cmp	r1, #120	; 0x78
 8008484:	d1d4      	bne.n	8008430 <_printf_i+0x30>
 8008486:	2378      	movs	r3, #120	; 0x78
 8008488:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800848c:	4864      	ldr	r0, [pc, #400]	; (8008620 <_printf_i+0x220>)
 800848e:	e055      	b.n	800853c <_printf_i+0x13c>
 8008490:	6813      	ldr	r3, [r2, #0]
 8008492:	1d19      	adds	r1, r3, #4
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	6011      	str	r1, [r2, #0]
 8008498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800849c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084a0:	2301      	movs	r3, #1
 80084a2:	e08c      	b.n	80085be <_printf_i+0x1be>
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	6011      	str	r1, [r2, #0]
 80084a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80084ac:	bf18      	it	ne
 80084ae:	b21b      	sxthne	r3, r3
 80084b0:	e7cf      	b.n	8008452 <_printf_i+0x52>
 80084b2:	6813      	ldr	r3, [r2, #0]
 80084b4:	6825      	ldr	r5, [r4, #0]
 80084b6:	1d18      	adds	r0, r3, #4
 80084b8:	6010      	str	r0, [r2, #0]
 80084ba:	0628      	lsls	r0, r5, #24
 80084bc:	d501      	bpl.n	80084c2 <_printf_i+0xc2>
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	e002      	b.n	80084c8 <_printf_i+0xc8>
 80084c2:	0668      	lsls	r0, r5, #25
 80084c4:	d5fb      	bpl.n	80084be <_printf_i+0xbe>
 80084c6:	881b      	ldrh	r3, [r3, #0]
 80084c8:	4854      	ldr	r0, [pc, #336]	; (800861c <_printf_i+0x21c>)
 80084ca:	296f      	cmp	r1, #111	; 0x6f
 80084cc:	bf14      	ite	ne
 80084ce:	220a      	movne	r2, #10
 80084d0:	2208      	moveq	r2, #8
 80084d2:	2100      	movs	r1, #0
 80084d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084d8:	6865      	ldr	r5, [r4, #4]
 80084da:	60a5      	str	r5, [r4, #8]
 80084dc:	2d00      	cmp	r5, #0
 80084de:	f2c0 8095 	blt.w	800860c <_printf_i+0x20c>
 80084e2:	6821      	ldr	r1, [r4, #0]
 80084e4:	f021 0104 	bic.w	r1, r1, #4
 80084e8:	6021      	str	r1, [r4, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d13d      	bne.n	800856a <_printf_i+0x16a>
 80084ee:	2d00      	cmp	r5, #0
 80084f0:	f040 808e 	bne.w	8008610 <_printf_i+0x210>
 80084f4:	4665      	mov	r5, ip
 80084f6:	2a08      	cmp	r2, #8
 80084f8:	d10b      	bne.n	8008512 <_printf_i+0x112>
 80084fa:	6823      	ldr	r3, [r4, #0]
 80084fc:	07db      	lsls	r3, r3, #31
 80084fe:	d508      	bpl.n	8008512 <_printf_i+0x112>
 8008500:	6923      	ldr	r3, [r4, #16]
 8008502:	6862      	ldr	r2, [r4, #4]
 8008504:	429a      	cmp	r2, r3
 8008506:	bfde      	ittt	le
 8008508:	2330      	movle	r3, #48	; 0x30
 800850a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800850e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008512:	ebac 0305 	sub.w	r3, ip, r5
 8008516:	6123      	str	r3, [r4, #16]
 8008518:	f8cd 8000 	str.w	r8, [sp]
 800851c:	463b      	mov	r3, r7
 800851e:	aa03      	add	r2, sp, #12
 8008520:	4621      	mov	r1, r4
 8008522:	4630      	mov	r0, r6
 8008524:	f7ff fef6 	bl	8008314 <_printf_common>
 8008528:	3001      	adds	r0, #1
 800852a:	d14d      	bne.n	80085c8 <_printf_i+0x1c8>
 800852c:	f04f 30ff 	mov.w	r0, #4294967295
 8008530:	b005      	add	sp, #20
 8008532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008536:	4839      	ldr	r0, [pc, #228]	; (800861c <_printf_i+0x21c>)
 8008538:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800853c:	6813      	ldr	r3, [r2, #0]
 800853e:	6821      	ldr	r1, [r4, #0]
 8008540:	1d1d      	adds	r5, r3, #4
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	6015      	str	r5, [r2, #0]
 8008546:	060a      	lsls	r2, r1, #24
 8008548:	d50b      	bpl.n	8008562 <_printf_i+0x162>
 800854a:	07ca      	lsls	r2, r1, #31
 800854c:	bf44      	itt	mi
 800854e:	f041 0120 	orrmi.w	r1, r1, #32
 8008552:	6021      	strmi	r1, [r4, #0]
 8008554:	b91b      	cbnz	r3, 800855e <_printf_i+0x15e>
 8008556:	6822      	ldr	r2, [r4, #0]
 8008558:	f022 0220 	bic.w	r2, r2, #32
 800855c:	6022      	str	r2, [r4, #0]
 800855e:	2210      	movs	r2, #16
 8008560:	e7b7      	b.n	80084d2 <_printf_i+0xd2>
 8008562:	064d      	lsls	r5, r1, #25
 8008564:	bf48      	it	mi
 8008566:	b29b      	uxthmi	r3, r3
 8008568:	e7ef      	b.n	800854a <_printf_i+0x14a>
 800856a:	4665      	mov	r5, ip
 800856c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008570:	fb02 3311 	mls	r3, r2, r1, r3
 8008574:	5cc3      	ldrb	r3, [r0, r3]
 8008576:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800857a:	460b      	mov	r3, r1
 800857c:	2900      	cmp	r1, #0
 800857e:	d1f5      	bne.n	800856c <_printf_i+0x16c>
 8008580:	e7b9      	b.n	80084f6 <_printf_i+0xf6>
 8008582:	6813      	ldr	r3, [r2, #0]
 8008584:	6825      	ldr	r5, [r4, #0]
 8008586:	6961      	ldr	r1, [r4, #20]
 8008588:	1d18      	adds	r0, r3, #4
 800858a:	6010      	str	r0, [r2, #0]
 800858c:	0628      	lsls	r0, r5, #24
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	d501      	bpl.n	8008596 <_printf_i+0x196>
 8008592:	6019      	str	r1, [r3, #0]
 8008594:	e002      	b.n	800859c <_printf_i+0x19c>
 8008596:	066a      	lsls	r2, r5, #25
 8008598:	d5fb      	bpl.n	8008592 <_printf_i+0x192>
 800859a:	8019      	strh	r1, [r3, #0]
 800859c:	2300      	movs	r3, #0
 800859e:	6123      	str	r3, [r4, #16]
 80085a0:	4665      	mov	r5, ip
 80085a2:	e7b9      	b.n	8008518 <_printf_i+0x118>
 80085a4:	6813      	ldr	r3, [r2, #0]
 80085a6:	1d19      	adds	r1, r3, #4
 80085a8:	6011      	str	r1, [r2, #0]
 80085aa:	681d      	ldr	r5, [r3, #0]
 80085ac:	6862      	ldr	r2, [r4, #4]
 80085ae:	2100      	movs	r1, #0
 80085b0:	4628      	mov	r0, r5
 80085b2:	f7f7 fe45 	bl	8000240 <memchr>
 80085b6:	b108      	cbz	r0, 80085bc <_printf_i+0x1bc>
 80085b8:	1b40      	subs	r0, r0, r5
 80085ba:	6060      	str	r0, [r4, #4]
 80085bc:	6863      	ldr	r3, [r4, #4]
 80085be:	6123      	str	r3, [r4, #16]
 80085c0:	2300      	movs	r3, #0
 80085c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085c6:	e7a7      	b.n	8008518 <_printf_i+0x118>
 80085c8:	6923      	ldr	r3, [r4, #16]
 80085ca:	462a      	mov	r2, r5
 80085cc:	4639      	mov	r1, r7
 80085ce:	4630      	mov	r0, r6
 80085d0:	47c0      	blx	r8
 80085d2:	3001      	adds	r0, #1
 80085d4:	d0aa      	beq.n	800852c <_printf_i+0x12c>
 80085d6:	6823      	ldr	r3, [r4, #0]
 80085d8:	079b      	lsls	r3, r3, #30
 80085da:	d413      	bmi.n	8008604 <_printf_i+0x204>
 80085dc:	68e0      	ldr	r0, [r4, #12]
 80085de:	9b03      	ldr	r3, [sp, #12]
 80085e0:	4298      	cmp	r0, r3
 80085e2:	bfb8      	it	lt
 80085e4:	4618      	movlt	r0, r3
 80085e6:	e7a3      	b.n	8008530 <_printf_i+0x130>
 80085e8:	2301      	movs	r3, #1
 80085ea:	464a      	mov	r2, r9
 80085ec:	4639      	mov	r1, r7
 80085ee:	4630      	mov	r0, r6
 80085f0:	47c0      	blx	r8
 80085f2:	3001      	adds	r0, #1
 80085f4:	d09a      	beq.n	800852c <_printf_i+0x12c>
 80085f6:	3501      	adds	r5, #1
 80085f8:	68e3      	ldr	r3, [r4, #12]
 80085fa:	9a03      	ldr	r2, [sp, #12]
 80085fc:	1a9b      	subs	r3, r3, r2
 80085fe:	42ab      	cmp	r3, r5
 8008600:	dcf2      	bgt.n	80085e8 <_printf_i+0x1e8>
 8008602:	e7eb      	b.n	80085dc <_printf_i+0x1dc>
 8008604:	2500      	movs	r5, #0
 8008606:	f104 0919 	add.w	r9, r4, #25
 800860a:	e7f5      	b.n	80085f8 <_printf_i+0x1f8>
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1ac      	bne.n	800856a <_printf_i+0x16a>
 8008610:	7803      	ldrb	r3, [r0, #0]
 8008612:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008616:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800861a:	e76c      	b.n	80084f6 <_printf_i+0xf6>
 800861c:	080088bd 	.word	0x080088bd
 8008620:	080088ce 	.word	0x080088ce

08008624 <_sbrk_r>:
 8008624:	b538      	push	{r3, r4, r5, lr}
 8008626:	4c06      	ldr	r4, [pc, #24]	; (8008640 <_sbrk_r+0x1c>)
 8008628:	2300      	movs	r3, #0
 800862a:	4605      	mov	r5, r0
 800862c:	4608      	mov	r0, r1
 800862e:	6023      	str	r3, [r4, #0]
 8008630:	f7fb fb38 	bl	8003ca4 <_sbrk>
 8008634:	1c43      	adds	r3, r0, #1
 8008636:	d102      	bne.n	800863e <_sbrk_r+0x1a>
 8008638:	6823      	ldr	r3, [r4, #0]
 800863a:	b103      	cbz	r3, 800863e <_sbrk_r+0x1a>
 800863c:	602b      	str	r3, [r5, #0]
 800863e:	bd38      	pop	{r3, r4, r5, pc}
 8008640:	20017b4c 	.word	0x20017b4c

08008644 <__sread>:
 8008644:	b510      	push	{r4, lr}
 8008646:	460c      	mov	r4, r1
 8008648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800864c:	f000 f896 	bl	800877c <_read_r>
 8008650:	2800      	cmp	r0, #0
 8008652:	bfab      	itete	ge
 8008654:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008656:	89a3      	ldrhlt	r3, [r4, #12]
 8008658:	181b      	addge	r3, r3, r0
 800865a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800865e:	bfac      	ite	ge
 8008660:	6563      	strge	r3, [r4, #84]	; 0x54
 8008662:	81a3      	strhlt	r3, [r4, #12]
 8008664:	bd10      	pop	{r4, pc}

08008666 <__swrite>:
 8008666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800866a:	461f      	mov	r7, r3
 800866c:	898b      	ldrh	r3, [r1, #12]
 800866e:	05db      	lsls	r3, r3, #23
 8008670:	4605      	mov	r5, r0
 8008672:	460c      	mov	r4, r1
 8008674:	4616      	mov	r6, r2
 8008676:	d505      	bpl.n	8008684 <__swrite+0x1e>
 8008678:	2302      	movs	r3, #2
 800867a:	2200      	movs	r2, #0
 800867c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008680:	f000 f868 	bl	8008754 <_lseek_r>
 8008684:	89a3      	ldrh	r3, [r4, #12]
 8008686:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800868a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800868e:	81a3      	strh	r3, [r4, #12]
 8008690:	4632      	mov	r2, r6
 8008692:	463b      	mov	r3, r7
 8008694:	4628      	mov	r0, r5
 8008696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800869a:	f000 b817 	b.w	80086cc <_write_r>

0800869e <__sseek>:
 800869e:	b510      	push	{r4, lr}
 80086a0:	460c      	mov	r4, r1
 80086a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086a6:	f000 f855 	bl	8008754 <_lseek_r>
 80086aa:	1c43      	adds	r3, r0, #1
 80086ac:	89a3      	ldrh	r3, [r4, #12]
 80086ae:	bf15      	itete	ne
 80086b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80086b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80086b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80086ba:	81a3      	strheq	r3, [r4, #12]
 80086bc:	bf18      	it	ne
 80086be:	81a3      	strhne	r3, [r4, #12]
 80086c0:	bd10      	pop	{r4, pc}

080086c2 <__sclose>:
 80086c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086c6:	f000 b813 	b.w	80086f0 <_close_r>
	...

080086cc <_write_r>:
 80086cc:	b538      	push	{r3, r4, r5, lr}
 80086ce:	4c07      	ldr	r4, [pc, #28]	; (80086ec <_write_r+0x20>)
 80086d0:	4605      	mov	r5, r0
 80086d2:	4608      	mov	r0, r1
 80086d4:	4611      	mov	r1, r2
 80086d6:	2200      	movs	r2, #0
 80086d8:	6022      	str	r2, [r4, #0]
 80086da:	461a      	mov	r2, r3
 80086dc:	f7fb fa91 	bl	8003c02 <_write>
 80086e0:	1c43      	adds	r3, r0, #1
 80086e2:	d102      	bne.n	80086ea <_write_r+0x1e>
 80086e4:	6823      	ldr	r3, [r4, #0]
 80086e6:	b103      	cbz	r3, 80086ea <_write_r+0x1e>
 80086e8:	602b      	str	r3, [r5, #0]
 80086ea:	bd38      	pop	{r3, r4, r5, pc}
 80086ec:	20017b4c 	.word	0x20017b4c

080086f0 <_close_r>:
 80086f0:	b538      	push	{r3, r4, r5, lr}
 80086f2:	4c06      	ldr	r4, [pc, #24]	; (800870c <_close_r+0x1c>)
 80086f4:	2300      	movs	r3, #0
 80086f6:	4605      	mov	r5, r0
 80086f8:	4608      	mov	r0, r1
 80086fa:	6023      	str	r3, [r4, #0]
 80086fc:	f7fb fa9d 	bl	8003c3a <_close>
 8008700:	1c43      	adds	r3, r0, #1
 8008702:	d102      	bne.n	800870a <_close_r+0x1a>
 8008704:	6823      	ldr	r3, [r4, #0]
 8008706:	b103      	cbz	r3, 800870a <_close_r+0x1a>
 8008708:	602b      	str	r3, [r5, #0]
 800870a:	bd38      	pop	{r3, r4, r5, pc}
 800870c:	20017b4c 	.word	0x20017b4c

08008710 <_fstat_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	4c07      	ldr	r4, [pc, #28]	; (8008730 <_fstat_r+0x20>)
 8008714:	2300      	movs	r3, #0
 8008716:	4605      	mov	r5, r0
 8008718:	4608      	mov	r0, r1
 800871a:	4611      	mov	r1, r2
 800871c:	6023      	str	r3, [r4, #0]
 800871e:	f7fb fa98 	bl	8003c52 <_fstat>
 8008722:	1c43      	adds	r3, r0, #1
 8008724:	d102      	bne.n	800872c <_fstat_r+0x1c>
 8008726:	6823      	ldr	r3, [r4, #0]
 8008728:	b103      	cbz	r3, 800872c <_fstat_r+0x1c>
 800872a:	602b      	str	r3, [r5, #0]
 800872c:	bd38      	pop	{r3, r4, r5, pc}
 800872e:	bf00      	nop
 8008730:	20017b4c 	.word	0x20017b4c

08008734 <_isatty_r>:
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	4c06      	ldr	r4, [pc, #24]	; (8008750 <_isatty_r+0x1c>)
 8008738:	2300      	movs	r3, #0
 800873a:	4605      	mov	r5, r0
 800873c:	4608      	mov	r0, r1
 800873e:	6023      	str	r3, [r4, #0]
 8008740:	f7fb fa97 	bl	8003c72 <_isatty>
 8008744:	1c43      	adds	r3, r0, #1
 8008746:	d102      	bne.n	800874e <_isatty_r+0x1a>
 8008748:	6823      	ldr	r3, [r4, #0]
 800874a:	b103      	cbz	r3, 800874e <_isatty_r+0x1a>
 800874c:	602b      	str	r3, [r5, #0]
 800874e:	bd38      	pop	{r3, r4, r5, pc}
 8008750:	20017b4c 	.word	0x20017b4c

08008754 <_lseek_r>:
 8008754:	b538      	push	{r3, r4, r5, lr}
 8008756:	4c07      	ldr	r4, [pc, #28]	; (8008774 <_lseek_r+0x20>)
 8008758:	4605      	mov	r5, r0
 800875a:	4608      	mov	r0, r1
 800875c:	4611      	mov	r1, r2
 800875e:	2200      	movs	r2, #0
 8008760:	6022      	str	r2, [r4, #0]
 8008762:	461a      	mov	r2, r3
 8008764:	f7fb fa90 	bl	8003c88 <_lseek>
 8008768:	1c43      	adds	r3, r0, #1
 800876a:	d102      	bne.n	8008772 <_lseek_r+0x1e>
 800876c:	6823      	ldr	r3, [r4, #0]
 800876e:	b103      	cbz	r3, 8008772 <_lseek_r+0x1e>
 8008770:	602b      	str	r3, [r5, #0]
 8008772:	bd38      	pop	{r3, r4, r5, pc}
 8008774:	20017b4c 	.word	0x20017b4c

08008778 <__malloc_lock>:
 8008778:	4770      	bx	lr

0800877a <__malloc_unlock>:
 800877a:	4770      	bx	lr

0800877c <_read_r>:
 800877c:	b538      	push	{r3, r4, r5, lr}
 800877e:	4c07      	ldr	r4, [pc, #28]	; (800879c <_read_r+0x20>)
 8008780:	4605      	mov	r5, r0
 8008782:	4608      	mov	r0, r1
 8008784:	4611      	mov	r1, r2
 8008786:	2200      	movs	r2, #0
 8008788:	6022      	str	r2, [r4, #0]
 800878a:	461a      	mov	r2, r3
 800878c:	f7fb fa1c 	bl	8003bc8 <_read>
 8008790:	1c43      	adds	r3, r0, #1
 8008792:	d102      	bne.n	800879a <_read_r+0x1e>
 8008794:	6823      	ldr	r3, [r4, #0]
 8008796:	b103      	cbz	r3, 800879a <_read_r+0x1e>
 8008798:	602b      	str	r3, [r5, #0]
 800879a:	bd38      	pop	{r3, r4, r5, pc}
 800879c:	20017b4c 	.word	0x20017b4c

080087a0 <_init>:
 80087a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a2:	bf00      	nop
 80087a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087a6:	bc08      	pop	{r3}
 80087a8:	469e      	mov	lr, r3
 80087aa:	4770      	bx	lr

080087ac <_fini>:
 80087ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ae:	bf00      	nop
 80087b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087b2:	bc08      	pop	{r3}
 80087b4:	469e      	mov	lr, r3
 80087b6:	4770      	bx	lr
